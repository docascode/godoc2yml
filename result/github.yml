#YamlMIME: GoLangPkg
ismain: false
summary: Package github provides a client for using the GitHub API.
description: "Package github provides a client for using the GitHub API.\n\nUsage:\n\n
  \   import \"github.com/google/go-github/github\"\n\nConstruct a new GitHub client,
  then use the various services on the client to access different parts of the GitHub
  API. For example:\n\n    client := github.NewClient(nil)\n\n    // list all organizations
  for user \"willnorris\"\n    orgs, _, err := client.Organizations.List(ctx, \"willnorris\",
  nil)\n\nSome API methods have optional parameters that can be passed. For example:\n\n
  \   client := github.NewClient(nil)\n\n    // list public repositories for org \"github\"\n
  \   opt := &github.RepositoryListByOrgOptions{Type: \"public\"}\n    repos, _, err
  := client.Repositories.ListByOrg(ctx, \"github\", opt)\n\nThe services of a client
  divide the API into logical chunks and correspond to the structure of the GitHub
  API documentation at https://developer.github.com/v3/.\n\n\nAuthentication\n\nThe
  go-github library does not directly handle authentication. Instead, when creating
  a new client, pass an http.Client that can handle authentication for you. The easiest
  and recommended way to do this is using the golang.org/x/oauth2 library, but you
  can always use any other library that provides an http.Client. If you have an OAuth2
  access token (for example, a personal API token), you can use it with the oauth2
  library using:\n\n    import \"golang.org/x/oauth2\"\n\n    func main() {\n    \tctx
  := context.Background()\n    \tts := oauth2.StaticTokenSource(\n    \t\t&oauth2.Token{AccessToken:
  \"... your access token ...\"},\n    \t)\n    \ttc := oauth2.NewClient(ctx, ts)\n\n
  \   \tclient := github.NewClient(tc)\n\n    \t// list all repositories for the authenticated
  user\n    \trepos, _, err := client.Repositories.List(ctx, \"\", nil)\n    }\n\nNote
  that when using an authenticated Client, all calls made by the client will include
  the specified OAuth token. Therefore, authenticated clients should almost never
  be shared between different users.\n\nSee the oauth2 docs for complete instructions
  on using that library.\n\nFor API methods that require HTTP Basic Authentication,
  use the BasicAuthTransport.\n\nGitHub Apps authentication can be provided by the
  https://github.com/bradleyfalzon/ghinstallation package.\n\n    import \"github.com/bradleyfalzon/ghinstallation\"\n\n
  \   func main() {\n    \t// Wrap the shared transport for use with the integration
  ID 1 authenticating with installation ID 99.\n    \titr, err := ghinstallation.NewKeyFromFile(http.DefaultTransport,
  1, 99, \"2016-10-19.private-key.pem\")\n    \tif err != nil {\n    \t\t// Handle
  error.\n    \t}\n\n    \t// Use installation transport with client\n    \tclient
  := github.NewClient(&http.Client{Transport: itr})\n\n    \t// Use client...\n    }\n\n\nRate
  Limiting\n\nGitHub imposes a rate limit on all API clients. Unauthenticated clients
  are limited to 60 requests per hour, while authenticated clients can make up to
  5,000 requests per hour. The Search API has a custom rate limit. Unauthenticated
  clients are limited to 10 requests per minute, while authenticated clients can make
  up to 30 requests per minute. To receive the higher rate limit when making calls
  that are not issued on behalf of a user, use UnauthenticatedRateLimitedTransport.\n\nThe
  returned Response.Rate value contains the rate limit information from the most recent
  API call. If a recent enough response isn't available, you can use RateLimits to
  fetch the most up-to-date rate limit data for the client.\n\nTo detect an API rate
  limit error, you can check if its type is *github.RateLimitError:\n\n    repos,
  _, err := client.Repositories.List(ctx, \"\", nil)\n    if _, ok := err.(*github.RateLimitError);
  ok {\n    \tlog.Println(\"hit rate limit\")\n    }\n\nLearn more about GitHub rate
  limiting at https://developer.github.com/v3/#rate-limiting.\n\n\nAccepted Status\n\nSome
  endpoints may return a 202 Accepted status code, meaning that the information required
  is not yet ready and was scheduled to be gathered on the GitHub side. Methods known
  to behave like this are documented specifying this behavior.\n\nTo detect this condition
  of error, you can check if its type is *github.AcceptedError:\n\n    stats, _, err
  := client.Repositories.ListContributorsStats(ctx, org, repo)\n    if _, ok := err.(*github.AcceptedError);
  ok {\n    \tlog.Println(\"scheduled on GitHub side\")\n    }\n\n\nConditional Requests\n\nThe
  GitHub API has good support for conditional requests which will help prevent you
  from burning through your rate limit, as well as help speed up your application.
  go-github does not handle conditional requests directly, but is instead designed
  to work with a caching http.Transport. We recommend using https://github.com/gregjones/httpcache
  for that.\n\nLearn more about GitHub conditional requests at https://developer.github.com/v3/#conditional-requests.\n\n\nCreating
  and Updating Resources\n\nAll structs for GitHub resources use pointer values for
  all non-repeated fields. This allows distinguishing between unset fields and those
  set to a zero-value. Helper functions have been provided to easily create these
  pointers for string, bool, and int values. For example:\n\n    // create a new private
  repository named \"foo\"\n    repo := &github.Repository{\n    \tName:    github.String(\"foo\"),\n
  \   \tPrivate: github.Bool(true),\n    }\n    client.Repositories.Create(ctx, \"\",
  repo)\n\nUsers who have worked with protocol buffers should find this pattern familiar.\n\n\nPagination\n\nAll
  requests for resource collections (repos, pull requests, issues, etc.) support pagination.
  Pagination options are described in the github.ListOptions struct and passed to
  the list methods directly or as an embedded type of a more specific list options
  struct (for example github.PullRequestListOptions). Pages information is available
  via the github.Response struct.\n\n    client := github.NewClient(nil)\n\n    opt
  := &github.RepositoryListByOrgOptions{\n    \tListOptions: github.ListOptions{PerPage:
  10},\n    }\n    // get all pages of results\n    var allRepos []*github.Repository\n
  \   for {\n    \trepos, resp, err := client.Repositories.ListByOrg(ctx, \"github\",
  opt)\n    \tif err != nil {\n    \t\treturn err\n    \t}\n    \tallRepos = append(allRepos,
  repos...)\n    \tif resp.NextPage == 0 {\n    \t\tbreak\n    \t}\n    \topt.Page
  = resp.NextPage\n    }\n\n\nGoogle App Engine\n\nGo on App Engine Classic (which
  as of this writing uses Go 1.6) can not use the \"context\" import and still relies
  on \"golang.org/x/net/context\". As a result, if you wish to continue to use \"go-github\"
  on App Engine Classic, you will need to rewrite all the \"context\" imports using
  the following command:\n\n    gofmt -w -r '\"context\" -> \"golang.org/x/net/context\"'
  *.go\n\nSee \"with_appengine.go\" for more details.\n"
importpath: github
dir: /src/github
consts:
- names: Zipball
  summary: test const
  description: |
    test const
  code: "const (\n\tZipball archiveFormat = \"zipball\"\n)"
  source:
    file: /src/github/repos_contents.go
    line: 228
types:
- name: APIMeta
  summary: APIMeta represents metadata about the GitHub API.
  description: |
    APIMeta represents metadata about the GitHub API.
  code: "type APIMeta struct {\n\t// An Array of IP addresses in CIDR format specifying
    the addresses\n\t// that incoming service hooks will originate from on GitHub.com.\n\tHooks\t[]string\t`json:\"hooks,omitempty\"`\n\n\t//
    An Array of IP addresses in CIDR format specifying the Git servers\n\t// for GitHub.com.\n\tGit\t[]string\t`json:\"git,omitempty\"`\n\n\t//
    Whether authentication with username and password is supported.\n\t// (GitHub
    Enterprise instances using CAS or OAuth for authentication\n\t// will return false.
    Features like Basic Authentication with a\n\t// username and password, sudo mode,
    and two-factor authentication are\n\t// not supported on these servers.)\n\tVerifiablePasswordAuthentication\t*bool\t`json:\"verifiable_password_authentication,omitempty\"`\n\n\t//
    An array of IP addresses in CIDR format specifying the addresses\n\t// which serve
    GitHub Pages websites.\n\tPages\t[]string\t`json:\"pages,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetVerifiablePasswordAuthentication
    summary: GetVerifiablePasswordAuthentication returns the VerifiablePasswordAuthentication
      field if it's non-nil, zero value otherwise.
    description: |
      GetVerifiablePasswordAuthentication returns the VerifiablePasswordAuthentication field if it's non-nil, zero value otherwise.
    code: func (a *APIMeta) GetVerifiablePasswordAuthentication() bool
    source:
      file: /src/github/github-accessors.go
      line: 112
  source:
    file: /src/github/misc.go
    line: 142
- name: AbuseRateLimitError
  summary: AbuseRateLimitError occurs when GitHub returns 403 Forbidden response with
    the "documentation_url" field value equal to "https://developer.github.com/v3#abuse-rate-limits".
  description: |
    AbuseRateLimitError occurs when GitHub returns 403 Forbidden response with the "documentation_url" field value equal to "https://developer.github.com/v3#abuse-rate-limits".
  code: "type AbuseRateLimitError struct {\n\tResponse\t*http.Response\t// HTTP response
    that caused this error\n\tMessage\t\tstring\t\t`json:\"message\"`\t// error message\n\n\t//
    RetryAfter is provided with some abuse rate limit errors. If present,\n\t// it
    is the amount of time that the client should wait before retrying.\n\t// Otherwise,
    the client should try again later (after an unspecified amount of time).\n\tRetryAfter\t*time.Duration\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Error
    summary: ""
    description: ""
    code: func (r *AbuseRateLimitError) Error() string
    source:
      file: /src/github/github.go
      line: 612
  - name: GetRetryAfter
    summary: GetRetryAfter returns the RetryAfter field if it's non-nil, zero value
      otherwise.
    description: |
      GetRetryAfter returns the RetryAfter field if it's non-nil, zero value otherwise.
    code: func (a *AbuseRateLimitError) GetRetryAfter() time.Duration
    source:
      file: /src/github/github-accessors.go
      line: 16
  source:
    file: /src/github/github.go
    line: 602
- name: AcceptedError
  summary: AcceptedError occurs when GitHub returns 202 Accepted response with an
    empty body, which means a job was scheduled on the GitHub side to process the
    information needed and cache it.
  description: |
    AcceptedError occurs when GitHub returns 202 Accepted response with an empty body, which means a job was scheduled on the GitHub side to process the information needed and cache it. Technically, 202 Accepted is not a real error, it's just used to indicate that results are not ready yet, but should be available soon. The request can be repeated after some time.
  code: type AcceptedError struct{}
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Error
    summary: ""
    description: ""
    code: func (*AcceptedError) Error() string
    source:
      file: /src/github/github.go
      line: 596
  source:
    file: /src/github/github.go
    line: 594
- name: ActivityListStarredOptions
  summary: ActivityListStarredOptions specifies the optional parameters to the ActivityService.ListStarred
    method.
  description: |
    ActivityListStarredOptions specifies the optional parameters to the ActivityService.ListStarred method.
  code: "type ActivityListStarredOptions struct {\n\t// How to sort the repository
    list. Possible values are: created, updated,\n\t// pushed, full_name. Default
    is \"full_name\".\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\t// Direction
    in which to sort repositories. Possible values are: asc, desc.\n\t// Default is
    \"asc\" when sort is \"full_name\", otherwise default is \"desc\".\n\tDirection\tstring\t`url:\"direction,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/activity_star.go
    line: 54
- name: ActivityService
  summary: ActivityService handles communication with the activity related methods
    of the GitHub API.
  description: |
    ActivityService handles communication with the activity related methods of the GitHub API.

    GitHub API docs: https://developer.github.com/v3/activity/
  code: type ActivityService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: DeleteRepositorySubscription
    summary: DeleteRepositorySubscription deletes the subscription for the specified
      repository for the authenticated user.
    description: |
      DeleteRepositorySubscription deletes the subscription for the specified repository for the authenticated user.

      This is used to stop watching a repository. To control whether or not to receive notifications from a repository, use SetRepositorySubscription.

      GitHub API docs: https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription
    code: func (s *ActivityService) DeleteRepositorySubscription(ctx context.Context,
      owner, repo string) (*Response, error)
    source:
      file: /src/github/activity_watching.go
      line: 138
  - name: DeleteThreadSubscription
    summary: DeleteThreadSubscription deletes the subscription for the specified thread
      for the authenticated user.
    description: |
      DeleteThreadSubscription deletes the subscription for the specified thread for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription
    code: func (s *ActivityService) DeleteThreadSubscription(ctx context.Context,
      id string) (*Response, error)
    source:
      file: /src/github/activity_notifications.go
      line: 215
  - name: GetRepositorySubscription
    summary: GetRepositorySubscription returns the subscription for the specified
      repository for the authenticated user.
    description: |
      GetRepositorySubscription returns the subscription for the specified repository for the authenticated user. If the authenticated user is not watching the repository, a nil Subscription is returned.

      GitHub API docs: https://developer.github.com/v3/activity/watching/#get-a-repository-subscription
    code: func (s *ActivityService) GetRepositorySubscription(ctx context.Context,
      owner, repo string) (*Subscription, *Response, error)
    source:
      file: /src/github/activity_watching.go
      line: 87
  - name: GetThread
    summary: GetThread gets the specified notification thread.
    description: |
      GetThread gets the specified notification thread.

      GitHub API docs: https://developer.github.com/v3/activity/notifications/#view-a-single-thread
    code: func (s *ActivityService) GetThread(ctx context.Context, id string) (*Notification,
      *Response, error)
    source:
      file: /src/github/activity_notifications.go
      line: 138
  - name: GetThreadSubscription
    summary: GetThreadSubscription checks to see if the authenticated user is subscribed
      to a thread.
    description: |
      GetThreadSubscription checks to see if the authenticated user is subscribed to a thread.

      GitHub API docs: https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription
    code: func (s *ActivityService) GetThreadSubscription(ctx context.Context, id
      string) (*Subscription, *Response, error)
    source:
      file: /src/github/activity_notifications.go
      line: 173
  - name: IsStarred
    summary: IsStarred checks if a repository is starred by authenticated user.
    description: |
      IsStarred checks if a repository is starred by authenticated user.

      GitHub API docs: https://developer.github.com/v3/activity/starring/#check-if-you-are-starring-a-repository
    code: func (s *ActivityService) IsStarred(ctx context.Context, owner, repo string)
      (bool, *Response, error)
    source:
      file: /src/github/activity_star.go
      line: 102
  - name: ListEvents
    summary: ListEvents drinks from the firehose of all public events across GitHub.
    description: |
      ListEvents drinks from the firehose of all public events across GitHub.

      GitHub API docs: https://developer.github.com/v3/activity/events/#list-public-events
    code: func (s *ActivityService) ListEvents(ctx context.Context, opt *ListOptions)
      ([]*Event, *Response, error)
    source:
      file: /src/github/activity_events.go
      line: 125
  - name: ListEventsForOrganization
    summary: ListEventsForOrganization lists public events for an organization.
    description: |
      ListEventsForOrganization lists public events for an organization.

      GitHub API docs: https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization
    code: func (s *ActivityService) ListEventsForOrganization(ctx context.Context,
      org string, opt *ListOptions) ([]*Event, *Response, error)
    source:
      file: /src/github/activity_events.go
      line: 220
  - name: ListEventsForRepoNetwork
    summary: ListEventsForRepoNetwork lists public events for a network of repositories.
    description: |
      ListEventsForRepoNetwork lists public events for a network of repositories.

      GitHub API docs: https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories
    code: func (s *ActivityService) ListEventsForRepoNetwork(ctx context.Context,
      owner, repo string, opt *ListOptions) ([]*Event, *Response, error)
    source:
      file: /src/github/activity_events.go
      line: 196
  - name: ListEventsPerformedByUser
    summary: ListEventsPerformedByUser lists the events performed by a user.
    description: |
      ListEventsPerformedByUser lists the events performed by a user. If publicOnly is true, only public events will be returned.

      GitHub API docs: https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user
    code: func (s *ActivityService) ListEventsPerformedByUser(ctx context.Context,
      user string, publicOnly bool, opt *ListOptions) ([]*Event, *Response, error)
    source:
      file: /src/github/activity_events.go
      line: 245
  - name: ListEventsReceivedByUser
    summary: ListEventsReceivedByUser lists the events received by a user.
    description: |
      ListEventsReceivedByUser lists the events received by a user. If publicOnly is true, only public events will be returned.

      GitHub API docs: https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received
    code: func (s *ActivityService) ListEventsReceivedByUser(ctx context.Context,
      user string, publicOnly bool, opt *ListOptions) ([]*Event, *Response, error)
    source:
      file: /src/github/activity_events.go
      line: 275
  - name: ListFeeds
    summary: ListFeeds lists all the feeds available to the authenticated user.
    description: |
      ListFeeds lists all the feeds available to the authenticated user.

      GitHub provides several timeline resources in Atom format:

          Timeline: The GitHub global public timeline
          User: The public timeline for any user, using URI template
          Current user public: The public timeline for the authenticated user
          Current user: The private timeline for the authenticated user
          Current user actor: The private timeline for activity created by the
              authenticated user
          Current user organizations: The private timeline for the organizations
              the authenticated user is a member of.

      Note: Private feeds are only returned when authenticating via Basic Auth since current feed URIs use the older, non revocable auth tokens.
    code: func (s *ActivityService) ListFeeds(ctx context.Context) (*Feeds, *Response,
      error)
    source:
      file: /src/github/activity.go
      line: 56
  - name: ListIssueEventsForRepository
    summary: ListIssueEventsForRepository lists issue events for a repository.
    description: |
      ListIssueEventsForRepository lists issue events for a repository.

      GitHub API docs: https://developer.github.com/v3/activity/events/#list-issue-events-for-a-repository
    code: func (s *ActivityService) ListIssueEventsForRepository(ctx context.Context,
      owner, repo string, opt *ListOptions) ([]*IssueEvent, *Response, error)
    source:
      file: /src/github/activity_events.go
      line: 172
  - name: ListNotifications
    summary: ListNotifications lists all notifications for the authenticated user.
    description: |
      ListNotifications lists all notifications for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/activity/notifications/#list-your-notifications
    code: func (s *ActivityService) ListNotifications(ctx context.Context, opt *NotificationListOptions)
      ([]*Notification, *Response, error)
    source:
      file: /src/github/activity_notifications.go
      line: 53
  - name: ListRepositoryEvents
    summary: ListRepositoryEvents lists events for a repository.
    description: |
      ListRepositoryEvents lists events for a repository.

      GitHub API docs: https://developer.github.com/v3/activity/events/#list-repository-events
    code: func (s *ActivityService) ListRepositoryEvents(ctx context.Context, owner,
      repo string, opt *ListOptions) ([]*Event, *Response, error)
    source:
      file: /src/github/activity_events.go
      line: 148
  - name: ListRepositoryNotifications
    summary: ListRepositoryNotifications lists all notifications in a given repository
      for the authenticated user.
    description: |
      ListRepositoryNotifications lists all notifications in a given repository for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/activity/notifications/#list-your-notifications-in-a-repository
    code: func (s *ActivityService) ListRepositoryNotifications(ctx context.Context,
      owner, repo string, opt *NotificationListOptions) ([]*Notification, *Response,
      error)
    source:
      file: /src/github/activity_notifications.go
      line: 78
  - name: ListStargazers
    summary: ListStargazers lists people who have starred the specified repo.
    description: |
      ListStargazers lists people who have starred the specified repo.

      GitHub API docs: https://developer.github.com/v3/activity/starring/#list-stargazers
    code: func (s *ActivityService) ListStargazers(ctx context.Context, owner, repo
      string, opt *ListOptions) ([]*Stargazer, *Response, error)
    source:
      file: /src/github/activity_star.go
      line: 28
  - name: ListStarred
    summary: ListStarred lists all the repos starred by a user.
    description: |
      ListStarred lists all the repos starred by a user. Passing the empty string will list the starred repositories for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/activity/starring/#list-repositories-being-starred
    code: func (s *ActivityService) ListStarred(ctx context.Context, user string,
      opt *ActivityListStarredOptions) ([]*StarredRepository, *Response, error)
    source:
      file: /src/github/activity_star.go
      line: 70
  - name: ListUserEventsForOrganization
    summary: ListUserEventsForOrganization provides the user’s organization dashboard.
    description: |
      ListUserEventsForOrganization provides the user’s organization dashboard. You must be authenticated as the user to view this.

      GitHub API docs: https://developer.github.com/v3/activity/events/#list-events-for-an-organization
    code: func (s *ActivityService) ListUserEventsForOrganization(ctx context.Context,
      org, user string, opt *ListOptions) ([]*Event, *Response, error)
    source:
      file: /src/github/activity_events.go
      line: 305
  - name: ListWatched
    summary: ListWatched lists the repositories the specified user is watching.
    description: |
      ListWatched lists the repositories the specified user is watching. Passing the empty string will fetch watched repos for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/activity/watching/#list-repositories-being-watched
    code: func (s *ActivityService) ListWatched(ctx context.Context, user string,
      opt *ListOptions) ([]*Repository, *Response, error)
    source:
      file: /src/github/activity_watching.go
      line: 56
  - name: ListWatchers
    summary: ListWatchers lists watchers of a particular repo.
    description: |
      ListWatchers lists watchers of a particular repo.

      GitHub API docs: https://developer.github.com/v3/activity/watching/#list-watchers
    code: func (s *ActivityService) ListWatchers(ctx context.Context, owner, repo
      string, opt *ListOptions) ([]*User, *Response, error)
    source:
      file: /src/github/activity_watching.go
      line: 31
  - name: MarkNotificationsRead
    summary: MarkNotificationsRead marks all notifications up to lastRead as read.
    description: |
      MarkNotificationsRead marks all notifications up to lastRead as read.

      GitHub API docs: https://developer.github.com/v3/activity/notifications/#mark-as-read
    code: func (s *ActivityService) MarkNotificationsRead(ctx context.Context, lastRead
      time.Time) (*Response, error)
    source:
      file: /src/github/activity_notifications.go
      line: 106
  - name: MarkRepositoryNotificationsRead
    summary: MarkRepositoryNotificationsRead marks all notifications up to lastRead
      in the specified repository as read.
    description: |
      MarkRepositoryNotificationsRead marks all notifications up to lastRead in the specified repository as read.

      GitHub API docs: https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read-in-a-repository
    code: func (s *ActivityService) MarkRepositoryNotificationsRead(ctx context.Context,
      owner, repo string, lastRead time.Time) (*Response, error)
    source:
      file: /src/github/activity_notifications.go
      line: 122
  - name: MarkThreadRead
    summary: MarkThreadRead marks the specified thread as read.
    description: |
      MarkThreadRead marks the specified thread as read.

      GitHub API docs: https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read
    code: func (s *ActivityService) MarkThreadRead(ctx context.Context, id string)
      (*Response, error)
    source:
      file: /src/github/activity_notifications.go
      line: 158
  - name: SetRepositorySubscription
    summary: SetRepositorySubscription sets the subscription for the specified repository
      for the authenticated user.
    description: |
      SetRepositorySubscription sets the subscription for the specified repository for the authenticated user.

      To watch a repository, set subscription.Subscribed to true. To ignore notifications made within a repository, set subscription.Ignored to true. To stop watching a repository, use DeleteRepositorySubscription.

      GitHub API docs: https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
    code: func (s *ActivityService) SetRepositorySubscription(ctx context.Context,
      owner, repo string, subscription *Subscription) (*Subscription, *Response, error)
    source:
      file: /src/github/activity_watching.go
      line: 114
  - name: SetThreadSubscription
    summary: SetThreadSubscription sets the subscription for the specified thread
      for the authenticated user.
    description: |
      SetThreadSubscription sets the subscription for the specified thread for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
    code: func (s *ActivityService) SetThreadSubscription(ctx context.Context, id
      string, subscription *Subscription) (*Subscription, *Response, error)
    source:
      file: /src/github/activity_notifications.go
      line: 194
  - name: Star
    summary: Star a repository as the authenticated user.
    description: |
      Star a repository as the authenticated user.

      GitHub API docs: https://developer.github.com/v3/activity/starring/#star-a-repository
    code: func (s *ActivityService) Star(ctx context.Context, owner, repo string)
      (*Response, error)
    source:
      file: /src/github/activity_star.go
      line: 116
  - name: Unstar
    summary: Unstar a repository as the authenticated user.
    description: |
      Unstar a repository as the authenticated user.

      GitHub API docs: https://developer.github.com/v3/activity/starring/#unstar-a-repository
    code: func (s *ActivityService) Unstar(ctx context.Context, owner, repo string)
      (*Response, error)
    source:
      file: /src/github/activity_star.go
      line: 128
  source:
    file: /src/github/activity.go
    line: 14
- name: AdminEnforcement
  summary: AdminEnforcement represents the configuration to enforce required status
    checks for repository administrators.
  description: |
    AdminEnforcement represents the configuration to enforce required status checks for repository administrators.
  code: "type AdminEnforcement struct {\n\tURL\t*string\t`json:\"url,omitempty\"`\n\tEnabled\tbool\t`json:\"enabled\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (a *AdminEnforcement) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 24
  source:
    file: /src/github/repos.go
    line: 623
- name: AdminService
  summary: AdminService handles communication with the admin related methods of the
    GitHub API.
  description: |
    AdminService handles communication with the admin related methods of the GitHub API. These API routes are normally only accessible for GitHub Enterprise installations.

    GitHub API docs: https://developer.github.com/v3/enterprise/
  code: type AdminService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAdminStats
    summary: GetAdminStats returns a variety of metrics about a Github Enterprise
      installation.
    description: |
      GetAdminStats returns a variety of metrics about a Github Enterprise installation.

      Please note that this is only available to site administrators, otherwise it will error with a 404 not found (instead of 401 or 403).

      GitHub API docs: https://developer.github.com/v3/enterprise-admin/admin_stats/
    code: func (s *AdminService) GetAdminStats(ctx context.Context) (*AdminStats,
      *Response, error)
    source:
      file: /src/github/admin_stats.go
      line: 157
  - name: UpdateTeamLDAPMapping
    summary: UpdateTeamLDAPMapping updates the mapping between a GitHub team and an
      LDAP group.
    description: |
      UpdateTeamLDAPMapping updates the mapping between a GitHub team and an LDAP group.

      GitHub API docs: https://developer.github.com/v3/enterprise/ldap/#update-ldap-mapping-for-a-team
    code: func (s *AdminService) UpdateTeamLDAPMapping(ctx context.Context, team int,
      mapping *TeamLDAPMapping) (*TeamLDAPMapping, *Response, error)
    source:
      file: /src/github/admin.go
      line: 87
  - name: UpdateUserLDAPMapping
    summary: UpdateUserLDAPMapping updates the mapping between a GitHub user and an
      LDAP user.
    description: |
      UpdateUserLDAPMapping updates the mapping between a GitHub user and an LDAP user.

      GitHub API docs: https://developer.github.com/v3/enterprise/ldap/#update-ldap-mapping-for-a-user
    code: func (s *AdminService) UpdateUserLDAPMapping(ctx context.Context, user string,
      mapping *UserLDAPMapping) (*UserLDAPMapping, *Response, error)
    source:
      file: /src/github/admin.go
      line: 68
  source:
    file: /src/github/admin.go
    line: 18
- name: AdminStats
  summary: AdminStats represents a variety of stats of a Github Enterprise installation.
  description: |
    AdminStats represents a variety of stats of a Github Enterprise installation.
  code: "type AdminStats struct {\n\tIssues\t\t*IssueStats\t`json:\"issues,omitempty\"`\n\tHooks\t\t*HookStats\t`json:\"hooks,omitempty\"`\n\tMilestones\t*MilestoneStats\t`json:\"milestones,omitempty\"`\n\tOrgs\t\t*OrgStats\t`json:\"orgs,omitempty\"`\n\tComments\t*CommentStats\t`json:\"comments,omitempty\"`\n\tPages\t\t*PageStats\t`json:\"pages,omitempty\"`\n\tUsers\t\t*UserStats\t`json:\"users,omitempty\"`\n\tGists\t\t*GistStats\t`json:\"gists,omitempty\"`\n\tPulls\t\t*PullStats\t`json:\"pulls,omitempty\"`\n\tRepos\t\t*RepoStats\t`json:\"repos,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetComments
    summary: GetComments returns the Comments field.
    description: |
      GetComments returns the Comments field.
    code: func (a *AdminStats) GetComments() *CommentStats
    source:
      file: /src/github/github-accessors.go
      line: 32
  - name: GetGists
    summary: GetGists returns the Gists field.
    description: |
      GetGists returns the Gists field.
    code: func (a *AdminStats) GetGists() *GistStats
    source:
      file: /src/github/github-accessors.go
      line: 40
  - name: GetHooks
    summary: GetHooks returns the Hooks field.
    description: |
      GetHooks returns the Hooks field.
    code: func (a *AdminStats) GetHooks() *HookStats
    source:
      file: /src/github/github-accessors.go
      line: 48
  - name: GetIssues
    summary: GetIssues returns the Issues field.
    description: |
      GetIssues returns the Issues field.
    code: func (a *AdminStats) GetIssues() *IssueStats
    source:
      file: /src/github/github-accessors.go
      line: 56
  - name: GetMilestones
    summary: GetMilestones returns the Milestones field.
    description: |
      GetMilestones returns the Milestones field.
    code: func (a *AdminStats) GetMilestones() *MilestoneStats
    source:
      file: /src/github/github-accessors.go
      line: 64
  - name: GetOrgs
    summary: GetOrgs returns the Orgs field.
    description: |
      GetOrgs returns the Orgs field.
    code: func (a *AdminStats) GetOrgs() *OrgStats
    source:
      file: /src/github/github-accessors.go
      line: 72
  - name: GetPages
    summary: GetPages returns the Pages field.
    description: |
      GetPages returns the Pages field.
    code: func (a *AdminStats) GetPages() *PageStats
    source:
      file: /src/github/github-accessors.go
      line: 80
  - name: GetPulls
    summary: GetPulls returns the Pulls field.
    description: |
      GetPulls returns the Pulls field.
    code: func (a *AdminStats) GetPulls() *PullStats
    source:
      file: /src/github/github-accessors.go
      line: 88
  - name: GetRepos
    summary: GetRepos returns the Repos field.
    description: |
      GetRepos returns the Repos field.
    code: func (a *AdminStats) GetRepos() *RepoStats
    source:
      file: /src/github/github-accessors.go
      line: 96
  - name: GetUsers
    summary: GetUsers returns the Users field.
    description: |
      GetUsers returns the Users field.
    code: func (a *AdminStats) GetUsers() *UserStats
    source:
      file: /src/github/github-accessors.go
      line: 104
  - name: String
    summary: ""
    description: ""
    code: func (s AdminStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 28
  source:
    file: /src/github/admin_stats.go
    line: 15
- name: App
  summary: App represents a GitHub App.
  description: |
    App represents a GitHub App.
  code: "type App struct {\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tOwner\t\t*User\t\t`json:\"owner,omitempty\"`\n\tName\t\t*string\t\t`json:\"name,omitempty\"`\n\tDescription\t*string\t\t`json:\"description,omitempty\"`\n\tExternalURL\t*string\t\t`json:\"external_url,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tCreatedAt\t*time.Time\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*time.Time\t`json:\"updated_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (a *App) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 120
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (a *App) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 128
  - name: GetExternalURL
    summary: GetExternalURL returns the ExternalURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetExternalURL returns the ExternalURL field if it's non-nil, zero value otherwise.
    code: func (a *App) GetExternalURL() string
    source:
      file: /src/github/github-accessors.go
      line: 136
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (a *App) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 144
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (a *App) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 152
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (a *App) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 160
  - name: GetOwner
    summary: GetOwner returns the Owner field.
    description: |
      GetOwner returns the Owner field.
    code: func (a *App) GetOwner() *User
    source:
      file: /src/github/github-accessors.go
      line: 168
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (a *App) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 176
  source:
    file: /src/github/apps.go
    line: 21
- name: AppsService
  summary: AppsService provides access to the installation related functions in the
    GitHub API.
  description: |
    AppsService provides access to the installation related functions in the GitHub API.

    GitHub API docs: https://developer.github.com/v3/apps/
  code: type AppsService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: AddRepository
    summary: AddRepository adds a single repository to an installation.
    description: |
      AddRepository adds a single repository to an installation.

      GitHub API docs: https://developer.github.com/v3/apps/installations/#add-repository-to-installation
    code: func (s *AppsService) AddRepository(ctx context.Context, instID, repoID
      int) (*Repository, *Response, error)
    source:
      file: /src/github/apps_installation.go
      line: 87
  - name: CreateInstallationToken
    summary: CreateInstallationToken creates a new installation token.
    description: |
      CreateInstallationToken creates a new installation token.

      GitHub API docs: https://developer.github.com/v3/apps/#create-a-new-installation-token
    code: func (s *AppsService) CreateInstallationToken(ctx context.Context, id int)
      (*InstallationToken, *Response, error)
    source:
      file: /src/github/apps.go
      line: 151
  - name: Get
    summary: Get a single GitHub App.
    description: |
      Get a single GitHub App. Passing the empty string will get the authenticated GitHub App.

      Note: appSlug is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., https://github.com/settings/apps/:app_slug).

      GitHub API docs: https://developer.github.com/v3/apps/#get-a-single-github-app
    code: func (s *AppsService) Get(ctx context.Context, appSlug string) (*App, *Response,
      error)
    source:
      file: /src/github/apps.go
      line: 46
  - name: GetInstallation
    summary: GetInstallation returns the specified installation.
    description: |
      GetInstallation returns the specified installation.

      GitHub API docs: https://developer.github.com/v3/apps/#get-a-single-installation
    code: func (s *AppsService) GetInstallation(ctx context.Context, id int) (*Installation,
      *Response, error)
    source:
      file: /src/github/apps.go
      line: 100
  - name: ListInstallations
    summary: ListInstallations lists the installations that the current GitHub App
      has.
    description: |
      ListInstallations lists the installations that the current GitHub App has.

      GitHub API docs: https://developer.github.com/v3/apps/#find-installations
    code: func (s *AppsService) ListInstallations(ctx context.Context, opt *ListOptions)
      ([]*Installation, *Response, error)
    source:
      file: /src/github/apps.go
      line: 74
  - name: ListRepos
    summary: ListRepos lists the repositories that are accessible to the authenticated
      installation.
    description: |
      ListRepos lists the repositories that are accessible to the authenticated installation.

      GitHub API docs: https://developer.github.com/v3/apps/installations/#list-repositories
    code: func (s *AppsService) ListRepos(ctx context.Context, opt *ListOptions) ([]*Repository,
      *Response, error)
    source:
      file: /src/github/apps_installation.go
      line: 29
  - name: ListUserInstallations
    summary: ListUserInstallations lists installations that are accessible to the
      authenticated user.
    description: |
      ListUserInstallations lists installations that are accessible to the authenticated user.

      GitHub API docs: https://developer.github.com/v3/apps/#list-installations-for-user
    code: func (s *AppsService) ListUserInstallations(ctx context.Context, opt *ListOptions)
      ([]*Installation, *Response, error)
    source:
      file: /src/github/apps.go
      line: 123
  - name: ListUserRepos
    summary: ListUserRepos lists repositories that are accessible to the authenticated
      user for an installation.
    description: |
      ListUserRepos lists repositories that are accessible to the authenticated user for an installation.

      GitHub API docs: https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-user-for-an-installation
    code: func (s *AppsService) ListUserRepos(ctx context.Context, id int, opt *ListOptions)
      ([]*Repository, *Response, error)
    source:
      file: /src/github/apps_installation.go
      line: 58
  - name: RemoveRepository
    summary: RemoveRepository removes a single repository from an installation.
    description: |
      RemoveRepository removes a single repository from an installation.

      GitHub docs: https://developer.github.com/v3/apps/installations/#remove-repository-from-installation
    code: func (s *AppsService) RemoveRepository(ctx context.Context, instID, repoID
      int) (*Response, error)
    source:
      file: /src/github/apps_installation.go
      line: 106
  source:
    file: /src/github/apps.go
    line: 18
- name: Authorization
  summary: ""
  description: |
    Authorization represents an individual GitHub authorization.
  code: "type Authorization struct {\n\tID\t\t*int\t\t\t`json:\"id,omitempty\"`\n\tURL\t\t*string\t\t\t`json:\"url,omitempty\"`\n\tScopes\t\t[]Scope\t\t\t`json:\"scopes,omitempty\"`\n\tToken\t\t*string\t\t\t`json:\"token,omitempty\"`\n\tTokenLastEight\t*string\t\t\t`json:\"token_last_eight,omitempty\"`\n\tHashedToken\t*string\t\t\t`json:\"hashed_token,omitempty\"`\n\tApp\t\t*AuthorizationApp\t`json:\"app,omitempty\"`\n\tNote\t\t*string\t\t\t`json:\"note,omitempty\"`\n\tNoteURL\t\t*string\t\t\t`json:\"note_url,omitempty\"`\n\tUpdatedAt\t*Timestamp\t\t`json:\"updated_at,omitempty\"`\n\tCreatedAt\t*Timestamp\t\t`json:\"created_at,omitempty\"`\n\tFingerprint\t*string\t\t\t`json:\"fingerprint,omitempty\"`\n\n\t//
    User is only populated by the Check and Reset methods.\n\tUser\t*User\t`json:\"user,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetApp
    summary: GetApp returns the App field.
    description: |
      GetApp returns the App field.
    code: func (a *Authorization) GetApp() *AuthorizationApp
    source:
      file: /src/github/github-accessors.go
      line: 184
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 192
  - name: GetFingerprint
    summary: GetFingerprint returns the Fingerprint field if it's non-nil, zero value
      otherwise.
    description: |
      GetFingerprint returns the Fingerprint field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetFingerprint() string
    source:
      file: /src/github/github-accessors.go
      line: 200
  - name: GetHashedToken
    summary: GetHashedToken returns the HashedToken field if it's non-nil, zero value
      otherwise.
    description: |
      GetHashedToken returns the HashedToken field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetHashedToken() string
    source:
      file: /src/github/github-accessors.go
      line: 208
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 216
  - name: GetNote
    summary: GetNote returns the Note field if it's non-nil, zero value otherwise.
    description: |
      GetNote returns the Note field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetNote() string
    source:
      file: /src/github/github-accessors.go
      line: 224
  - name: GetNoteURL
    summary: GetNoteURL returns the NoteURL field if it's non-nil, zero value otherwise.
    description: |
      GetNoteURL returns the NoteURL field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetNoteURL() string
    source:
      file: /src/github/github-accessors.go
      line: 232
  - name: GetToken
    summary: GetToken returns the Token field if it's non-nil, zero value otherwise.
    description: |
      GetToken returns the Token field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetToken() string
    source:
      file: /src/github/github-accessors.go
      line: 240
  - name: GetTokenLastEight
    summary: GetTokenLastEight returns the TokenLastEight field if it's non-nil, zero
      value otherwise.
    description: |
      GetTokenLastEight returns the TokenLastEight field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetTokenLastEight() string
    source:
      file: /src/github/github-accessors.go
      line: 248
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 264
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (a *Authorization) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 256
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (a *Authorization) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 272
  - name: String
    summary: ""
    description: ""
    code: func (a Authorization) String() string
    source:
      file: /src/github/authorizations.go
      line: 74
  source:
    file: /src/github/authorizations.go
    line: 56
- name: AuthorizationApp
  summary: ""
  description: |
    AuthorizationApp represents an individual GitHub app (in the context of authorization).
  code: "type AuthorizationApp struct {\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tName\t\t*string\t`json:\"name,omitempty\"`\n\tClientID\t*string\t`json:\"client_id,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetClientID
    summary: GetClientID returns the ClientID field if it's non-nil, zero value otherwise.
    description: |
      GetClientID returns the ClientID field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationApp) GetClientID() string
    source:
      file: /src/github/github-accessors.go
      line: 280
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationApp) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 288
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationApp) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 296
  - name: String
    summary: ""
    description: ""
    code: func (a AuthorizationApp) String() string
    source:
      file: /src/github/authorizations.go
      line: 85
  source:
    file: /src/github/authorizations.go
    line: 79
- name: AuthorizationRequest
  summary: ""
  description: |
    AuthorizationRequest represents a request to create an authorization.
  code: "type AuthorizationRequest struct {\n\tScopes\t\t[]Scope\t`json:\"scopes,omitempty\"`\n\tNote\t\t*string\t`json:\"note,omitempty\"`\n\tNoteURL\t\t*string\t`json:\"note_url,omitempty\"`\n\tClientID\t*string\t`json:\"client_id,omitempty\"`\n\tClientSecret\t*string\t`json:\"client_secret,omitempty\"`\n\tFingerprint\t*string\t`json:\"fingerprint,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetClientID
    summary: GetClientID returns the ClientID field if it's non-nil, zero value otherwise.
    description: |
      GetClientID returns the ClientID field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationRequest) GetClientID() string
    source:
      file: /src/github/github-accessors.go
      line: 304
  - name: GetClientSecret
    summary: GetClientSecret returns the ClientSecret field if it's non-nil, zero
      value otherwise.
    description: |
      GetClientSecret returns the ClientSecret field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationRequest) GetClientSecret() string
    source:
      file: /src/github/github-accessors.go
      line: 312
  - name: GetFingerprint
    summary: GetFingerprint returns the Fingerprint field if it's non-nil, zero value
      otherwise.
    description: |
      GetFingerprint returns the Fingerprint field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationRequest) GetFingerprint() string
    source:
      file: /src/github/github-accessors.go
      line: 320
  - name: GetNote
    summary: GetNote returns the Note field if it's non-nil, zero value otherwise.
    description: |
      GetNote returns the Note field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationRequest) GetNote() string
    source:
      file: /src/github/github-accessors.go
      line: 328
  - name: GetNoteURL
    summary: GetNoteURL returns the NoteURL field if it's non-nil, zero value otherwise.
    description: |
      GetNoteURL returns the NoteURL field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationRequest) GetNoteURL() string
    source:
      file: /src/github/github-accessors.go
      line: 336
  - name: String
    summary: ""
    description: ""
    code: func (a AuthorizationRequest) String() string
    source:
      file: /src/github/authorizations.go
      line: 113
  source:
    file: /src/github/authorizations.go
    line: 104
- name: AuthorizationUpdateRequest
  summary: ""
  description: |
    AuthorizationUpdateRequest represents a request to update an authorization.

    Note that for any one update, you must only provide one of the "scopes" fields. That is, you may provide only one of "Scopes", or "AddScopes", or "RemoveScopes".

    GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization
  code: "type AuthorizationUpdateRequest struct {\n\tScopes\t\t[]string\t`json:\"scopes,omitempty\"`\n\tAddScopes\t[]string\t`json:\"add_scopes,omitempty\"`\n\tRemoveScopes\t[]string\t`json:\"remove_scopes,omitempty\"`\n\tNote\t\t*string\t\t`json:\"note,omitempty\"`\n\tNoteURL\t\t*string\t\t`json:\"note_url,omitempty\"`\n\tFingerprint\t*string\t\t`json:\"fingerprint,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetFingerprint
    summary: GetFingerprint returns the Fingerprint field if it's non-nil, zero value
      otherwise.
    description: |
      GetFingerprint returns the Fingerprint field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationUpdateRequest) GetFingerprint() string
    source:
      file: /src/github/github-accessors.go
      line: 344
  - name: GetNote
    summary: GetNote returns the Note field if it's non-nil, zero value otherwise.
    description: |
      GetNote returns the Note field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationUpdateRequest) GetNote() string
    source:
      file: /src/github/github-accessors.go
      line: 352
  - name: GetNoteURL
    summary: GetNoteURL returns the NoteURL field if it's non-nil, zero value otherwise.
    description: |
      GetNoteURL returns the NoteURL field if it's non-nil, zero value otherwise.
    code: func (a *AuthorizationUpdateRequest) GetNoteURL() string
    source:
      file: /src/github/github-accessors.go
      line: 360
  - name: String
    summary: ""
    description: ""
    code: func (a AuthorizationUpdateRequest) String() string
    source:
      file: /src/github/authorizations.go
      line: 133
  source:
    file: /src/github/authorizations.go
    line: 124
- name: AuthorizationsService
  summary: ""
  description: |
    AuthorizationsService handles communication with the authorization related methods of the GitHub API.

    This service requires HTTP Basic Authentication; it cannot be accessed using an OAuth token.

    GitHub API docs: https://developer.github.com/v3/oauth_authorizations/
  code: type AuthorizationsService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Check
    summary: Check if an OAuth token is valid for a specific app.
    description: |
      Check if an OAuth token is valid for a specific app.

      Note that this operation requires the use of BasicAuth, but where the username is the OAuth application clientID, and the password is its clientSecret. Invalid tokens will return a 404 Not Found.

      The returned Authorization.User field will be populated.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#check-an-authorization
    code: func (s *AuthorizationsService) Check(ctx context.Context, clientID string,
      token string) (*Authorization, *Response, error)
    source:
      file: /src/github/authorizations.go
      line: 277
  - name: Create
    summary: Create a new authorization for the specified OAuth application.
    description: |
      Create a new authorization for the specified OAuth application.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization
    code: func (s *AuthorizationsService) Create(ctx context.Context, auth *AuthorizationRequest)
      (*Authorization, *Response, error)
    source:
      file: /src/github/authorizations.go
      line: 182
  - name: CreateImpersonation
    summary: CreateImpersonation creates an impersonation OAuth token.
    description: |
      CreateImpersonation creates an impersonation OAuth token.

      This requires admin permissions. With the returned Authorization.Token you can e.g. create or delete a user's public SSH key. NOTE: creating a new token automatically revokes an existing one.

      GitHub API docs: https://developer.github.com/enterprise/2.5/v3/users/administration/#create-an-impersonation-oauth-token
    code: func (s *AuthorizationsService) CreateImpersonation(ctx context.Context,
      username string, authReq *AuthorizationRequest) (*Authorization, *Response,
      error)
    source:
      file: /src/github/authorizations.go
      line: 407
  - name: Delete
    summary: Delete a single authorization.
    description: |
      Delete a single authorization.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization
    code: func (s *AuthorizationsService) Delete(ctx context.Context, id int) (*Response,
      error)
    source:
      file: /src/github/authorizations.go
      line: 257
  - name: DeleteGrant
    summary: DeleteGrant deletes an OAuth application grant.
    description: |
      DeleteGrant deletes an OAuth application grant. Deleting an application's grant will also delete all OAuth tokens associated with the application for the user.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#delete-a-grant
    code: func (s *AuthorizationsService) DeleteGrant(ctx context.Context, id int)
      (*Response, error)
    source:
      file: /src/github/authorizations.go
      line: 390
  - name: DeleteImpersonation
    summary: DeleteImpersonation deletes an impersonation OAuth token.
    description: |
      DeleteImpersonation deletes an impersonation OAuth token.

      NOTE: there can be only one at a time.

      GitHub API docs: https://developer.github.com/enterprise/2.5/v3/users/administration/#delete-an-impersonation-oauth-token
    code: func (s *AuthorizationsService) DeleteImpersonation(ctx context.Context,
      username string) (*Response, error)
    source:
      file: /src/github/authorizations.go
      line: 427
  - name: Edit
    summary: Edit a single authorization.
    description: |
      Edit a single authorization.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization
    code: func (s *AuthorizationsService) Edit(ctx context.Context, id int, auth *AuthorizationUpdateRequest)
      (*Authorization, *Response, error)
    source:
      file: /src/github/authorizations.go
      line: 237
  - name: Get
    summary: Get a single authorization.
    description: |
      Get a single authorization.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization
    code: func (s *AuthorizationsService) Get(ctx context.Context, id int) (*Authorization,
      *Response, error)
    source:
      file: /src/github/authorizations.go
      line: 163
  - name: GetGrant
    summary: GetGrant gets a single OAuth application grant.
    description: |
      GetGrant gets a single OAuth application grant.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant
    code: func (s *AuthorizationsService) GetGrant(ctx context.Context, id int) (*Grant,
      *Response, error)
    source:
      file: /src/github/authorizations.go
      line: 369
  - name: GetOrCreateForApp
    summary: GetOrCreateForApp creates a new authorization for the specified OAuth
      application, only if an authorization for that application doesn’t already exist
      for the user.
    description: |
      GetOrCreateForApp creates a new authorization for the specified OAuth application, only if an authorization for that application doesn’t already exist for the user.

      If a new token is created, the HTTP status code will be "201 Created", and the returned Authorization.Token field will be populated. If an existing token is returned, the status code will be "200 OK" and the Authorization.Token field will be empty.

      clientID is the OAuth Client ID with which to create the token.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint
    code: func (s *AuthorizationsService) GetOrCreateForApp(ctx context.Context, clientID
      string, auth *AuthorizationRequest) (*Authorization, *Response, error)
    source:
      file: /src/github/authorizations.go
      line: 212
  - name: List
    summary: List the authorizations for the authenticated user.
    description: |
      List the authorizations for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations
    code: func (s *AuthorizationsService) List(ctx context.Context, opt *ListOptions)
      ([]*Authorization, *Response, error)
    source:
      file: /src/github/authorizations.go
      line: 140
  - name: ListGrants
    summary: ListGrants lists the set of OAuth applications that have been granted
      access to a user's account.
    description: |
      ListGrants lists the set of OAuth applications that have been granted access to a user's account. This will return one entry for each application that has been granted access to the account, regardless of the number of tokens an application has generated for the user.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#list-your-grants
    code: func (s *AuthorizationsService) ListGrants(ctx context.Context, opt *ListOptions)
      ([]*Grant, *Response, error)
    source:
      file: /src/github/authorizations.go
      line: 346
  - name: Reset
    summary: Reset is used to reset a valid OAuth token without end user involvement.
    description: |
      Reset is used to reset a valid OAuth token without end user involvement. Applications must save the "token" property in the response, because changes take effect immediately.

      Note that this operation requires the use of BasicAuth, but where the username is the OAuth application clientID, and the password is its clientSecret. Invalid tokens will return a 404 Not Found.

      The returned Authorization.User field will be populated.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#reset-an-authorization
    code: func (s *AuthorizationsService) Reset(ctx context.Context, clientID string,
      token string) (*Authorization, *Response, error)
    source:
      file: /src/github/authorizations.go
      line: 305
  - name: Revoke
    summary: Revoke an authorization for an application.
    description: |
      Revoke an authorization for an application.

      Note that this operation requires the use of BasicAuth, but where the username is the OAuth application clientID, and the password is its clientSecret. Invalid tokens will return a 404 Not Found.

      GitHub API docs: https://developer.github.com/v3/oauth_authorizations/#revoke-an-authorization-for-an-application
    code: func (s *AuthorizationsService) Revoke(ctx context.Context, clientID string,
      token string) (*Response, error)
    source:
      file: /src/github/authorizations.go
      line: 329
  source:
    file: /src/github/authorizations.go
    line: 53
- name: BasicAuthTransport
  summary: BasicAuthTransport is an http.RoundTripper that authenticates all requests
    using HTTP Basic Authentication with the provided username and password.
  description: |
    BasicAuthTransport is an http.RoundTripper that authenticates all requests using HTTP Basic Authentication with the provided username and password. It additionally supports users who have two-factor authentication enabled on their GitHub account.
  code: "type BasicAuthTransport struct {\n\tUsername\tstring\t// GitHub username\n\tPassword\tstring\t//
    GitHub password\n\tOTP\t\tstring\t// one-time password for users with two-factor
    auth enabled\n\n\t// Transport is the underlying HTTP transport to use when making
    requests.\n\t// It will default to http.DefaultTransport if nil.\n\tTransport\thttp.RoundTripper\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Client
    summary: Client returns an *http.Client that makes requests that are authenticated
      using HTTP Basic Authentication.
    description: |
      Client returns an *http.Client that makes requests that are authenticated using HTTP Basic Authentication.
    code: func (t *BasicAuthTransport) Client() *http.Client
    source:
      file: /src/github/github.go
      line: 927
  - name: RoundTrip
    summary: RoundTrip implements the RoundTripper interface.
    description: |
      RoundTrip implements the RoundTripper interface.
    code: func (t *BasicAuthTransport) RoundTrip(req *http.Request) (*http.Response,
      error)
    source:
      file: /src/github/github.go
      line: 904
  source:
    file: /src/github/github.go
    line: 893
- name: Blob
  summary: Blob represents a blob object.
  description: |
    Blob represents a blob object.
  code: "type Blob struct {\n\tContent\t\t*string\t`json:\"content,omitempty\"`\n\tEncoding\t*string\t`json:\"encoding,omitempty\"`\n\tSHA\t\t*string\t`json:\"sha,omitempty\"`\n\tSize\t\t*int\t`json:\"size,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetContent
    summary: GetContent returns the Content field if it's non-nil, zero value otherwise.
    description: |
      GetContent returns the Content field if it's non-nil, zero value otherwise.
    code: func (b *Blob) GetContent() string
    source:
      file: /src/github/github-accessors.go
      line: 368
  - name: GetEncoding
    summary: GetEncoding returns the Encoding field if it's non-nil, zero value otherwise.
    description: |
      GetEncoding returns the Encoding field if it's non-nil, zero value otherwise.
    code: func (b *Blob) GetEncoding() string
    source:
      file: /src/github/github-accessors.go
      line: 376
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (b *Blob) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 384
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (b *Blob) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 392
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (b *Blob) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 400
  source:
    file: /src/github/git_blobs.go
    line: 14
- name: Branch
  summary: Branch represents a repository branch
  description: |
    Branch represents a repository branch
  code: "type Branch struct {\n\tName\t\t*string\t\t\t`json:\"name,omitempty\"`\n\tCommit\t\t*RepositoryCommit\t`json:\"commit,omitempty\"`\n\tProtected\t*bool\t\t\t`json:\"protected,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCommit
    summary: GetCommit returns the Commit field.
    description: |
      GetCommit returns the Commit field.
    code: func (b *Branch) GetCommit() *RepositoryCommit
    source:
      file: /src/github/github-accessors.go
      line: 408
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (b *Branch) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 416
  - name: GetProtected
    summary: GetProtected returns the Protected field if it's non-nil, zero value
      otherwise.
    description: |
      GetProtected returns the Protected field if it's non-nil, zero value otherwise.
    code: func (b *Branch) GetProtected() bool
    source:
      file: /src/github/github-accessors.go
      line: 424
  source:
    file: /src/github/repos.go
    line: 530
- name: BranchRestrictions
  summary: BranchRestrictions represents the restriction that only certain users or
    teams may push to a branch.
  description: |
    BranchRestrictions represents the restriction that only certain users or teams may push to a branch.
  code: "type BranchRestrictions struct {\n\t// The list of user logins with push
    access.\n\tUsers\t[]*User\t`json:\"users\"`\n\t// The list of team slugs with
    push access.\n\tTeams\t[]*Team\t`json:\"teams\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 630
- name: BranchRestrictionsRequest
  summary: BranchRestrictionsRequest represents the request to create/edit the restriction
    that only certain users or teams may push to a branch.
  description: |
    BranchRestrictionsRequest represents the request to create/edit the restriction that only certain users or teams may push to a branch. It is separate from BranchRestrictions above because the request structure is different from the response structure.
  code: "type BranchRestrictionsRequest struct {\n\t// The list of user logins with
    push access. (Required; use []string{} instead of nil for empty list.)\n\tUsers\t[]string\t`json:\"users\"`\n\t//
    The list of team slugs with push access. (Required; use []string{} instead of
    nil for empty list.)\n\tTeams\t[]string\t`json:\"teams\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 641
- name: Client
  summary: A Client manages communication with the GitHub API.
  description: |
    A Client manages communication with the GitHub API.
  code: "type Client struct {\n\n\t// Base URL for API requests. Defaults to the public
    GitHub API, but can be\n\t// set to a domain endpoint to use with GitHub Enterprise.
    BaseURL should\n\t// always be specified with a trailing slash.\n\tBaseURL\t*url.URL\n\n\t//
    Base URL for uploading files.\n\tUploadURL\t*url.URL\n\n\t// User agent used when
    communicating with the GitHub API.\n\tUserAgent\tstring\n\n\t// Services used
    for talking to different parts of the GitHub API.\n\tActivity\t*ActivityService\n\tAdmin\t\t*AdminService\n\tApps\t\t*AppsService\n\tAuthorizations\t*AuthorizationsService\n\tGists\t\t*GistsService\n\tGit\t\t*GitService\n\tGitignores\t*GitignoresService\n\tIssues\t\t*IssuesService\n\tLicenses\t*LicensesService\n\tMarketplace\t*MarketplaceService\n\tMigrations\t*MigrationService\n\tOrganizations\t*OrganizationsService\n\tProjects\t*ProjectsService\n\tPullRequests\t*PullRequestsService\n\tReactions\t*ReactionsService\n\tRepositories\t*RepositoriesService\n\tSearch\t\t*SearchService\n\tUsers\t\t*UsersService\n\t//
    contains filtered or unexported fields\n}"
  consts: []
  vars: []
  funcs:
  - name: NewClient
    summary: NewClient returns a new GitHub API client.
    description: |
      NewClient returns a new GitHub API client. If a nil httpClient is provided, http.DefaultClient will be used. To use API methods which require authentication, provide an http.Client that will perform the authentication for you (such as that provided by the golang.org/x/oauth2 library).
    code: func NewClient(httpClient *http.Client) *Client
    source:
      file: /src/github/github.go
      line: 219
  - name: NewEnterpriseClient
    summary: NewEnterpriseClient returns a new GitHub API client with provided base
      URL and upload URL (often the same URL).
    description: |
      NewEnterpriseClient returns a new GitHub API client with provided base URL and upload URL (often the same URL). If either URL does not have a trailing slash, one is added automatically. If a nil httpClient is provided, http.DefaultClient will be used.

      Note that NewEnterpriseClient is a convenience helper only; its behavior is equivalent to using NewClient, followed by setting the BaseURL and UploadURL fields.
    code: func NewEnterpriseClient(baseURL, uploadURL string, httpClient *http.Client)
      (*Client, error)
    source:
      file: /src/github/github.go
      line: 257
  methods:
  - name: APIMeta
    summary: APIMeta returns information about GitHub.com, the service.
    description: |
      APIMeta returns information about GitHub.com, the service. Or, if you access this endpoint on your organization’s GitHub Enterprise installation, this endpoint provides information about that installation.

      GitHub API docs: https://developer.github.com/v3/meta/
    code: func (c *Client) APIMeta(ctx context.Context) (*APIMeta, *Response, error)
    source:
      file: /src/github/misc.go
      line: 168
  - name: Do
    summary: Do sends an API request and returns the API response.
    description: |
      Do sends an API request and returns the API response. The API response is JSON decoded and stored in the value pointed to by v, or returned as an error if an API error has occurred. If v implements the io.Writer interface, the raw response body will be written to v, without attempting to first decode it. If rate limit is exceeded and reset time is in the future, Do returns *RateLimitError immediately without making a network API call.

      The provided ctx must be non-nil. If it is canceled or times out, ctx.Err() will be returned.
    code: func (c *Client) Do(ctx context.Context, req *http.Request, v interface{})
      (*Response, error)
    source:
      file: /src/github/github.go
      line: 445
  - name: GetCodeOfConduct
    summary: GetCodeOfConduct returns an individual code of conduct.
    description: |
      GetCodeOfConduct returns an individual code of conduct.

      https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct
    code: func (c *Client) GetCodeOfConduct(ctx context.Context, key string) (*CodeOfConduct,
      *Response, error)
    source:
      file: /src/github/misc.go
      line: 122
  - name: ListCodesOfConduct
    summary: ListCodesOfConduct returns all codes of conduct.
    description: |
      ListCodesOfConduct returns all codes of conduct.

      GitHub API docs: https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct
    code: func (c *Client) ListCodesOfConduct(ctx context.Context) ([]*CodeOfConduct,
      *Response, error)
    source:
      file: /src/github/misc.go
      line: 101
  - name: ListEmojis
    summary: ListEmojis returns the emojis available to use on GitHub.
    description: |
      ListEmojis returns the emojis available to use on GitHub.

      GitHub API docs: https://developer.github.com/v3/emojis/
    code: func (c *Client) ListEmojis(ctx context.Context) (map[string]string, *Response,
      error)
    source:
      file: /src/github/misc.go
      line: 71
  - name: ListServiceHooks
    summary: ListServiceHooks lists all of the available service hooks.
    description: |
      ListServiceHooks lists all of the available service hooks.

      GitHub API docs: https://developer.github.com/webhooks/#services
    code: func (c *Client) ListServiceHooks(ctx context.Context) ([]*ServiceHook,
      *Response, error)
    source:
      file: /src/github/misc.go
      line: 239
  - name: Markdown
    summary: Markdown renders an arbitrary Markdown document.
    description: |
      Markdown renders an arbitrary Markdown document.

      GitHub API docs: https://developer.github.com/v3/markdown/
    code: func (c *Client) Markdown(ctx context.Context, text string, opt *MarkdownOptions)
      (string, *Response, error)
    source:
      file: /src/github/misc.go
      line: 43
  - name: NewRequest
    summary: NewRequest creates an API request.
    description: |
      NewRequest creates an API request. A relative URL can be provided in urlStr, in which case it is resolved relative to the BaseURL of the Client. Relative URLs should always be specified without a preceding slash. If specified, the value pointed to by body is JSON encoded and included as the request body.
    code: func (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request,
      error)
    source:
      file: /src/github/github.go
      line: 285
  - name: NewUploadRequest
    summary: NewUploadRequest creates an upload request.
    description: |
      NewUploadRequest creates an upload request. A relative URL can be provided in urlStr, in which case it is resolved relative to the UploadURL of the Client. Relative URLs should always be specified without a preceding slash.
    code: func (c *Client) NewUploadRequest(urlStr string, reader io.Reader, size
      int64, mediaType string) (*http.Request, error)
    source:
      file: /src/github/github.go
      line: 323
  - name: Octocat
    summary: Octocat returns an ASCII art octocat with the specified message in a
      speech bubble.
    description: |
      Octocat returns an ASCII art octocat with the specified message in a speech bubble. If message is empty, a random zen phrase is used.
    code: func (c *Client) Octocat(ctx context.Context, message string) (string, *Response,
      error)
    source:
      file: /src/github/misc.go
      line: 185
  - name: RateLimits
    summary: RateLimits returns the rate limits for the current client.
    description: |
      RateLimits returns the rate limits for the current client.
    code: func (c *Client) RateLimits(ctx context.Context) (*RateLimits, *Response,
      error)
    source:
      file: /src/github/github.go
      line: 788
  - name: Zen
    summary: Zen returns a random line from The Zen of GitHub.
    description: |
      Zen returns a random line from The Zen of GitHub.

      see also: http://warpspire.com/posts/taste/
    code: func (c *Client) Zen(ctx context.Context) (string, *Response, error)
    source:
      file: /src/github/misc.go
      line: 208
  source:
    file: /src/github/github.go
    line: 117
- name: CodeOfConduct
  summary: CodeOfConduct represents a code of conduct.
  description: |
    CodeOfConduct represents a code of conduct.
  code: "type CodeOfConduct struct {\n\tName\t*string\t`json:\"name,omitempty\"`\n\tKey\t*string\t`json:\"key,omitempty\"`\n\tURL\t*string\t`json:\"url,omitempty\"`\n\tBody\t*string\t`json:\"body,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (c *CodeOfConduct) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 432
  - name: GetKey
    summary: GetKey returns the Key field if it's non-nil, zero value otherwise.
    description: |
      GetKey returns the Key field if it's non-nil, zero value otherwise.
    code: func (c *CodeOfConduct) GetKey() string
    source:
      file: /src/github/github-accessors.go
      line: 440
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (c *CodeOfConduct) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 448
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (c *CodeOfConduct) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 456
  - name: String
    summary: ""
    description: ""
    code: func (c *CodeOfConduct) String() string
    source:
      file: /src/github/misc.go
      line: 94
  source:
    file: /src/github/misc.go
    line: 87
- name: CodeResult
  summary: CodeResult represents a single search result.
  description: |
    CodeResult represents a single search result.
  code: "type CodeResult struct {\n\tName\t\t*string\t\t`json:\"name,omitempty\"`\n\tPath\t\t*string\t\t`json:\"path,omitempty\"`\n\tSHA\t\t*string\t\t`json:\"sha,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tRepository\t*Repository\t`json:\"repository,omitempty\"`\n\tTextMatches\t[]TextMatch\t`json:\"text_matches,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (c *CodeResult) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 464
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (c *CodeResult) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 472
  - name: GetPath
    summary: GetPath returns the Path field if it's non-nil, zero value otherwise.
    description: |
      GetPath returns the Path field if it's non-nil, zero value otherwise.
    code: func (c *CodeResult) GetPath() string
    source:
      file: /src/github/github-accessors.go
      line: 480
  - name: GetRepository
    summary: GetRepository returns the Repository field.
    description: |
      GetRepository returns the Repository field.
    code: func (c *CodeResult) GetRepository() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 488
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (c *CodeResult) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 496
  - name: String
    summary: ""
    description: ""
    code: func (c CodeResult) String() string
    source:
      file: /src/github/search.go
      line: 166
  source:
    file: /src/github/search.go
    line: 157
- name: CodeSearchResult
  summary: CodeSearchResult represents the result of a code search.
  description: |
    CodeSearchResult represents the result of a code search.
  code: "type CodeSearchResult struct {\n\tTotal\t\t\t*int\t\t`json:\"total_count,omitempty\"`\n\tIncompleteResults\t*bool\t\t`json:\"incomplete_results,omitempty\"`\n\tCodeResults\t\t[]CodeResult\t`json:\"items,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetIncompleteResults
    summary: GetIncompleteResults returns the IncompleteResults field if it's non-nil,
      zero value otherwise.
    description: |
      GetIncompleteResults returns the IncompleteResults field if it's non-nil, zero value otherwise.
    code: func (c *CodeSearchResult) GetIncompleteResults() bool
    source:
      file: /src/github/github-accessors.go
      line: 504
  - name: GetTotal
    summary: GetTotal returns the Total field if it's non-nil, zero value otherwise.
    description: |
      GetTotal returns the Total field if it's non-nil, zero value otherwise.
    code: func (c *CodeSearchResult) GetTotal() int
    source:
      file: /src/github/github-accessors.go
      line: 512
  source:
    file: /src/github/search.go
    line: 150
- name: CombinedStatus
  summary: CombinedStatus represents the combined status of a repository at a particular
    reference.
  description: |
    CombinedStatus represents the combined status of a repository at a particular reference.
  code: "type CombinedStatus struct {\n\t// State is the combined state of the repository.
    Possible values are:\n\t// failure, pending, or success.\n\tState\t*string\t`json:\"state,omitempty\"`\n\n\tName\t\t*string\t\t`json:\"name,omitempty\"`\n\tSHA\t\t*string\t\t`json:\"sha,omitempty\"`\n\tTotalCount\t*int\t\t`json:\"total_count,omitempty\"`\n\tStatuses\t[]RepoStatus\t`json:\"statuses,omitempty\"`\n\n\tCommitURL\t*string\t`json:\"commit_url,omitempty\"`\n\tRepositoryURL\t*string\t`json:\"repository_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCommitURL
    summary: GetCommitURL returns the CommitURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetCommitURL returns the CommitURL field if it's non-nil, zero value otherwise.
    code: func (c *CombinedStatus) GetCommitURL() string
    source:
      file: /src/github/github-accessors.go
      line: 520
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (c *CombinedStatus) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 528
  - name: GetRepositoryURL
    summary: GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero value otherwise.
    code: func (c *CombinedStatus) GetRepositoryURL() string
    source:
      file: /src/github/github-accessors.go
      line: 536
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (c *CombinedStatus) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 544
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (c *CombinedStatus) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 552
  - name: GetTotalCount
    summary: GetTotalCount returns the TotalCount field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalCount returns the TotalCount field if it's non-nil, zero value otherwise.
    code: func (c *CombinedStatus) GetTotalCount() int
    source:
      file: /src/github/github-accessors.go
      line: 560
  - name: String
    summary: ""
    description: ""
    code: func (s CombinedStatus) String() string
    source:
      file: /src/github/repos_statuses.go
      line: 102
  source:
    file: /src/github/repos_statuses.go
    line: 88
- name: CommentStats
  summary: CommentStats represents the number of total comments on commits, gists,
    issues and pull requests.
  description: |
    CommentStats represents the number of total comments on commits, gists, issues and pull requests.
  code: "type CommentStats struct {\n\tTotalCommitComments\t\t*int\t`json:\"total_commit_comments,omitempty\"`\n\tTotalGistComments\t\t*int\t`json:\"total_gist_comments,omitempty\"`\n\tTotalIssueComments\t\t*int\t`json:\"total_issue_comments,omitempty\"`\n\tTotalPullRequestComments\t*int\t`json:\"total_pull_request_comments,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetTotalCommitComments
    summary: GetTotalCommitComments returns the TotalCommitComments field if it's
      non-nil, zero value otherwise.
    description: |
      GetTotalCommitComments returns the TotalCommitComments field if it's non-nil, zero value otherwise.
    code: func (c *CommentStats) GetTotalCommitComments() int
    source:
      file: /src/github/github-accessors.go
      line: 568
  - name: GetTotalGistComments
    summary: GetTotalGistComments returns the TotalGistComments field if it's non-nil,
      zero value otherwise.
    description: |
      GetTotalGistComments returns the TotalGistComments field if it's non-nil, zero value otherwise.
    code: func (c *CommentStats) GetTotalGistComments() int
    source:
      file: /src/github/github-accessors.go
      line: 576
  - name: GetTotalIssueComments
    summary: GetTotalIssueComments returns the TotalIssueComments field if it's non-nil,
      zero value otherwise.
    description: |
      GetTotalIssueComments returns the TotalIssueComments field if it's non-nil, zero value otherwise.
    code: func (c *CommentStats) GetTotalIssueComments() int
    source:
      file: /src/github/github-accessors.go
      line: 584
  - name: GetTotalPullRequestComments
    summary: GetTotalPullRequestComments returns the TotalPullRequestComments field
      if it's non-nil, zero value otherwise.
    description: |
      GetTotalPullRequestComments returns the TotalPullRequestComments field if it's non-nil, zero value otherwise.
    code: func (c *CommentStats) GetTotalPullRequestComments() int
    source:
      file: /src/github/github-accessors.go
      line: 592
  - name: String
    summary: ""
    description: ""
    code: func (s CommentStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 87
  source:
    file: /src/github/admin_stats.go
    line: 80
- name: Commit
  summary: Commit represents a GitHub commit.
  description: |
    Commit represents a GitHub commit.
  code: "type Commit struct {\n\tSHA\t\t*string\t\t\t`json:\"sha,omitempty\"`\n\tAuthor\t\t*CommitAuthor\t\t`json:\"author,omitempty\"`\n\tCommitter\t*CommitAuthor\t\t`json:\"committer,omitempty\"`\n\tMessage\t\t*string\t\t\t`json:\"message,omitempty\"`\n\tTree\t\t*Tree\t\t\t`json:\"tree,omitempty\"`\n\tParents\t\t[]Commit\t\t`json:\"parents,omitempty\"`\n\tStats\t\t*CommitStats\t\t`json:\"stats,omitempty\"`\n\tHTMLURL\t\t*string\t\t\t`json:\"html_url,omitempty\"`\n\tURL\t\t*string\t\t\t`json:\"url,omitempty\"`\n\tVerification\t*SignatureVerification\t`json:\"verification,omitempty\"`\n\n\t//
    CommentCount is the number of GitHub comments on the commit. This\n\t// is only
    populated for requests that fetch GitHub data like\n\t// Pulls.ListCommits, Repositories.ListCommits,
    etc.\n\tCommentCount\t*int\t`json:\"comment_count,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAuthor
    summary: GetAuthor returns the Author field.
    description: |
      GetAuthor returns the Author field.
    code: func (c *Commit) GetAuthor() *CommitAuthor
    source:
      file: /src/github/github-accessors.go
      line: 600
  - name: GetCommentCount
    summary: GetCommentCount returns the CommentCount field if it's non-nil, zero
      value otherwise.
    description: |
      GetCommentCount returns the CommentCount field if it's non-nil, zero value otherwise.
    code: func (c *Commit) GetCommentCount() int
    source:
      file: /src/github/github-accessors.go
      line: 608
  - name: GetCommitter
    summary: GetCommitter returns the Committer field.
    description: |
      GetCommitter returns the Committer field.
    code: func (c *Commit) GetCommitter() *CommitAuthor
    source:
      file: /src/github/github-accessors.go
      line: 616
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (c *Commit) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 624
  - name: GetMessage
    summary: GetMessage returns the Message field if it's non-nil, zero value otherwise.
    description: |
      GetMessage returns the Message field if it's non-nil, zero value otherwise.
    code: func (c *Commit) GetMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 632
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (c *Commit) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 640
  - name: GetStats
    summary: GetStats returns the Stats field.
    description: |
      GetStats returns the Stats field.
    code: func (c *Commit) GetStats() *CommitStats
    source:
      file: /src/github/github-accessors.go
      line: 648
  - name: GetTree
    summary: GetTree returns the Tree field.
    description: |
      GetTree returns the Tree field.
    code: func (c *Commit) GetTree() *Tree
    source:
      file: /src/github/github-accessors.go
      line: 656
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (c *Commit) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 664
  - name: GetVerification
    summary: GetVerification returns the Verification field.
    description: |
      GetVerification returns the Verification field.
    code: func (c *Commit) GetVerification() *SignatureVerification
    source:
      file: /src/github/github-accessors.go
      line: 672
  - name: String
    summary: ""
    description: ""
    code: func (c Commit) String() string
    source:
      file: /src/github/git_commits.go
      line: 41
  source:
    file: /src/github/git_commits.go
    line: 23
- name: CommitAuthor
  summary: CommitAuthor represents the author or committer of a commit.
  description: |
    CommitAuthor represents the author or committer of a commit. The commit author may not correspond to a GitHub User.
  code: "type CommitAuthor struct {\n\tDate\t*time.Time\t`json:\"date,omitempty\"`\n\tName\t*string\t\t`json:\"name,omitempty\"`\n\tEmail\t*string\t\t`json:\"email,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tLogin\t*string\t`json:\"username,omitempty\"`\t//
    Renamed for go-github consistency.\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDate
    summary: GetDate returns the Date field if it's non-nil, zero value otherwise.
    description: |
      GetDate returns the Date field if it's non-nil, zero value otherwise.
    code: func (c *CommitAuthor) GetDate() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 680
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (c *CommitAuthor) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 688
  - name: GetLogin
    summary: GetLogin returns the Login field if it's non-nil, zero value otherwise.
    description: |
      GetLogin returns the Login field if it's non-nil, zero value otherwise.
    code: func (c *CommitAuthor) GetLogin() string
    source:
      file: /src/github/github-accessors.go
      line: 696
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (c *CommitAuthor) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 704
  - name: String
    summary: ""
    description: ""
    code: func (c CommitAuthor) String() string
    source:
      file: /src/github/git_commits.go
      line: 56
  source:
    file: /src/github/git_commits.go
    line: 47
- name: CommitCommentEvent
  summary: CommitCommentEvent is triggered when a commit comment is created.
  description: |
    CommitCommentEvent is triggered when a commit comment is created. The Webhook event name is "commit_comment".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#commitcommentevent
  code: "type CommitCommentEvent struct {\n\tComment\t*RepositoryComment\t`json:\"comment,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tAction\t\t*string\t\t`json:\"action,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (c *CommitCommentEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 712
  - name: GetComment
    summary: GetComment returns the Comment field.
    description: |
      GetComment returns the Comment field.
    code: func (c *CommitCommentEvent) GetComment() *RepositoryComment
    source:
      file: /src/github/github-accessors.go
      line: 720
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (c *CommitCommentEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 728
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (c *CommitCommentEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 736
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (c *CommitCommentEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 744
  source:
    file: /src/github/event_types.go
    line: 14
- name: CommitFile
  summary: CommitFile represents a file modified in a commit.
  description: |
    CommitFile represents a file modified in a commit.
  code: "type CommitFile struct {\n\tSHA\t\t*string\t`json:\"sha,omitempty\"`\n\tFilename\t*string\t`json:\"filename,omitempty\"`\n\tAdditions\t*int\t`json:\"additions,omitempty\"`\n\tDeletions\t*int\t`json:\"deletions,omitempty\"`\n\tChanges\t\t*int\t`json:\"changes,omitempty\"`\n\tStatus\t\t*string\t`json:\"status,omitempty\"`\n\tPatch\t\t*string\t`json:\"patch,omitempty\"`\n\tBlobURL\t\t*string\t`json:\"blob_url,omitempty\"`\n\tRawURL\t\t*string\t`json:\"raw_url,omitempty\"`\n\tContentsURL\t*string\t`json:\"contents_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAdditions
    summary: GetAdditions returns the Additions field if it's non-nil, zero value
      otherwise.
    description: |
      GetAdditions returns the Additions field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetAdditions() int
    source:
      file: /src/github/github-accessors.go
      line: 752
  - name: GetBlobURL
    summary: GetBlobURL returns the BlobURL field if it's non-nil, zero value otherwise.
    description: |
      GetBlobURL returns the BlobURL field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetBlobURL() string
    source:
      file: /src/github/github-accessors.go
      line: 760
  - name: GetChanges
    summary: GetChanges returns the Changes field if it's non-nil, zero value otherwise.
    description: |
      GetChanges returns the Changes field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetChanges() int
    source:
      file: /src/github/github-accessors.go
      line: 768
  - name: GetContentsURL
    summary: GetContentsURL returns the ContentsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetContentsURL returns the ContentsURL field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetContentsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 776
  - name: GetDeletions
    summary: GetDeletions returns the Deletions field if it's non-nil, zero value
      otherwise.
    description: |
      GetDeletions returns the Deletions field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetDeletions() int
    source:
      file: /src/github/github-accessors.go
      line: 784
  - name: GetFilename
    summary: GetFilename returns the Filename field if it's non-nil, zero value otherwise.
    description: |
      GetFilename returns the Filename field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetFilename() string
    source:
      file: /src/github/github-accessors.go
      line: 792
  - name: GetPatch
    summary: GetPatch returns the Patch field if it's non-nil, zero value otherwise.
    description: |
      GetPatch returns the Patch field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetPatch() string
    source:
      file: /src/github/github-accessors.go
      line: 800
  - name: GetRawURL
    summary: GetRawURL returns the RawURL field if it's non-nil, zero value otherwise.
    description: |
      GetRawURL returns the RawURL field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetRawURL() string
    source:
      file: /src/github/github-accessors.go
      line: 808
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 816
  - name: GetStatus
    summary: GetStatus returns the Status field if it's non-nil, zero value otherwise.
    description: |
      GetStatus returns the Status field if it's non-nil, zero value otherwise.
    code: func (c *CommitFile) GetStatus() string
    source:
      file: /src/github/github-accessors.go
      line: 824
  - name: String
    summary: ""
    description: ""
    code: func (c CommitFile) String() string
    source:
      file: /src/github/repos_commits.go
      line: 63
  source:
    file: /src/github/repos_commits.go
    line: 50
- name: CommitResult
  summary: CommitResult represents a commit object as returned in commit search endpoint
    response.
  description: |
    CommitResult represents a commit object as returned in commit search endpoint response.
  code: "type CommitResult struct {\n\tSHA\t\t*string\t\t`json:\"sha,omitempty\"`\n\tCommit\t\t*Commit\t\t`json:\"commit,omitempty\"`\n\tAuthor\t\t*User\t\t`json:\"author,omitempty\"`\n\tCommitter\t*User\t\t`json:\"committer,omitempty\"`\n\tParents\t\t[]*Commit\t`json:\"parents,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tCommentsURL\t*string\t\t`json:\"comments_url,omitempty\"`\n\n\tRepository\t*Repository\t`json:\"repository,omitempty\"`\n\tScore\t\t*float64\t`json:\"score,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAuthor
    summary: GetAuthor returns the Author field.
    description: |
      GetAuthor returns the Author field.
    code: func (c *CommitResult) GetAuthor() *User
    source:
      file: /src/github/github-accessors.go
      line: 832
  - name: GetCommentsURL
    summary: GetCommentsURL returns the CommentsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetCommentsURL returns the CommentsURL field if it's non-nil, zero value otherwise.
    code: func (c *CommitResult) GetCommentsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 840
  - name: GetCommit
    summary: GetCommit returns the Commit field.
    description: |
      GetCommit returns the Commit field.
    code: func (c *CommitResult) GetCommit() *Commit
    source:
      file: /src/github/github-accessors.go
      line: 848
  - name: GetCommitter
    summary: GetCommitter returns the Committer field.
    description: |
      GetCommitter returns the Committer field.
    code: func (c *CommitResult) GetCommitter() *User
    source:
      file: /src/github/github-accessors.go
      line: 856
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (c *CommitResult) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 864
  - name: GetRepository
    summary: GetRepository returns the Repository field.
    description: |
      GetRepository returns the Repository field.
    code: func (c *CommitResult) GetRepository() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 872
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (c *CommitResult) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 888
  - name: GetScore
    summary: GetScore returns the Score field.
    description: |
      GetScore returns the Score field.
    code: func (c *CommitResult) GetScore() *float64
    source:
      file: /src/github/github-accessors.go
      line: 880
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (c *CommitResult) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 896
  source:
    file: /src/github/search.go
    line: 75
- name: CommitStats
  summary: CommitStats represents the number of additions / deletions from a file
    in a given RepositoryCommit or GistCommit.
  description: |
    CommitStats represents the number of additions / deletions from a file in a given RepositoryCommit or GistCommit.
  code: "type CommitStats struct {\n\tAdditions\t*int\t`json:\"additions,omitempty\"`\n\tDeletions\t*int\t`json:\"deletions,omitempty\"`\n\tTotal\t\t*int\t`json:\"total,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAdditions
    summary: GetAdditions returns the Additions field if it's non-nil, zero value
      otherwise.
    description: |
      GetAdditions returns the Additions field if it's non-nil, zero value otherwise.
    code: func (c *CommitStats) GetAdditions() int
    source:
      file: /src/github/github-accessors.go
      line: 1008
  - name: GetDeletions
    summary: GetDeletions returns the Deletions field if it's non-nil, zero value
      otherwise.
    description: |
      GetDeletions returns the Deletions field if it's non-nil, zero value otherwise.
    code: func (c *CommitStats) GetDeletions() int
    source:
      file: /src/github/github-accessors.go
      line: 1016
  - name: GetTotal
    summary: GetTotal returns the Total field if it's non-nil, zero value otherwise.
    description: |
      GetTotal returns the Total field if it's non-nil, zero value otherwise.
    code: func (c *CommitStats) GetTotal() int
    source:
      file: /src/github/github-accessors.go
      line: 1024
  - name: String
    summary: ""
    description: ""
    code: func (c CommitStats) String() string
    source:
      file: /src/github/repos_commits.go
      line: 45
  source:
    file: /src/github/repos_commits.go
    line: 39
- name: CommitsComparison
  summary: CommitsComparison is the result of comparing two commits.
  description: |
    CommitsComparison is the result of comparing two commits. See CompareCommits() for details.
  code: "type CommitsComparison struct {\n\tBaseCommit\t*RepositoryCommit\t`json:\"base_commit,omitempty\"`\n\tMergeBaseCommit\t*RepositoryCommit\t`json:\"merge_base_commit,omitempty\"`\n\n\t//
    Head can be 'behind' or 'ahead'\n\tStatus\t\t*string\t`json:\"status,omitempty\"`\n\tAheadBy\t\t*int\t`json:\"ahead_by,omitempty\"`\n\tBehindBy\t*int\t`json:\"behind_by,omitempty\"`\n\tTotalCommits\t*int\t`json:\"total_commits,omitempty\"`\n\n\tCommits\t[]RepositoryCommit\t`json:\"commits,omitempty\"`\n\n\tFiles\t[]CommitFile\t`json:\"files,omitempty\"`\n\n\tHTMLURL\t\t*string\t`json:\"html_url,omitempty\"`\n\tPermalinkURL\t*string\t`json:\"permalink_url,omitempty\"`\n\tDiffURL\t\t*string\t`json:\"diff_url,omitempty\"`\n\tPatchURL\t*string\t`json:\"patch_url,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\t//
    API URL.\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAheadBy
    summary: GetAheadBy returns the AheadBy field if it's non-nil, zero value otherwise.
    description: |
      GetAheadBy returns the AheadBy field if it's non-nil, zero value otherwise.
    code: func (c *CommitsComparison) GetAheadBy() int
    source:
      file: /src/github/github-accessors.go
      line: 904
  - name: GetBaseCommit
    summary: GetBaseCommit returns the BaseCommit field.
    description: |
      GetBaseCommit returns the BaseCommit field.
    code: func (c *CommitsComparison) GetBaseCommit() *RepositoryCommit
    source:
      file: /src/github/github-accessors.go
      line: 912
  - name: GetBehindBy
    summary: GetBehindBy returns the BehindBy field if it's non-nil, zero value otherwise.
    description: |
      GetBehindBy returns the BehindBy field if it's non-nil, zero value otherwise.
    code: func (c *CommitsComparison) GetBehindBy() int
    source:
      file: /src/github/github-accessors.go
      line: 920
  - name: GetDiffURL
    summary: GetDiffURL returns the DiffURL field if it's non-nil, zero value otherwise.
    description: |
      GetDiffURL returns the DiffURL field if it's non-nil, zero value otherwise.
    code: func (c *CommitsComparison) GetDiffURL() string
    source:
      file: /src/github/github-accessors.go
      line: 928
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (c *CommitsComparison) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 936
  - name: GetMergeBaseCommit
    summary: GetMergeBaseCommit returns the MergeBaseCommit field.
    description: |
      GetMergeBaseCommit returns the MergeBaseCommit field.
    code: func (c *CommitsComparison) GetMergeBaseCommit() *RepositoryCommit
    source:
      file: /src/github/github-accessors.go
      line: 944
  - name: GetPatchURL
    summary: GetPatchURL returns the PatchURL field if it's non-nil, zero value otherwise.
    description: |
      GetPatchURL returns the PatchURL field if it's non-nil, zero value otherwise.
    code: func (c *CommitsComparison) GetPatchURL() string
    source:
      file: /src/github/github-accessors.go
      line: 952
  - name: GetPermalinkURL
    summary: GetPermalinkURL returns the PermalinkURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetPermalinkURL returns the PermalinkURL field if it's non-nil, zero value otherwise.
    code: func (c *CommitsComparison) GetPermalinkURL() string
    source:
      file: /src/github/github-accessors.go
      line: 960
  - name: GetStatus
    summary: GetStatus returns the Status field if it's non-nil, zero value otherwise.
    description: |
      GetStatus returns the Status field if it's non-nil, zero value otherwise.
    code: func (c *CommitsComparison) GetStatus() string
    source:
      file: /src/github/github-accessors.go
      line: 968
  - name: GetTotalCommits
    summary: GetTotalCommits returns the TotalCommits field if it's non-nil, zero
      value otherwise.
    description: |
      GetTotalCommits returns the TotalCommits field if it's non-nil, zero value otherwise.
    code: func (c *CommitsComparison) GetTotalCommits() int
    source:
      file: /src/github/github-accessors.go
      line: 976
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (c *CommitsComparison) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 984
  - name: String
    summary: ""
    description: ""
    code: func (c CommitsComparison) String() string
    source:
      file: /src/github/repos_commits.go
      line: 90
  source:
    file: /src/github/repos_commits.go
    line: 69
- name: CommitsListOptions
  summary: CommitsListOptions specifies the optional parameters to the RepositoriesService.ListCommits
    method.
  description: |
    CommitsListOptions specifies the optional parameters to the RepositoriesService.ListCommits method.
  code: "type CommitsListOptions struct {\n\t// SHA or branch to start listing Commits
    from.\n\tSHA\tstring\t`url:\"sha,omitempty\"`\n\n\t// Path that should be touched
    by the returned Commits.\n\tPath\tstring\t`url:\"path,omitempty\"`\n\n\t// Author
    of by which to filter Commits.\n\tAuthor\tstring\t`url:\"author,omitempty\"`\n\n\t//
    Since when should Commits be included in the response.\n\tSince\ttime.Time\t`url:\"since,omitempty\"`\n\n\t//
    Until when should Commits be included in the response.\n\tUntil\ttime.Time\t`url:\"until,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos_commits.go
    line: 96
- name: CommitsSearchResult
  summary: CommitsSearchResult represents the result of a commits search.
  description: |
    CommitsSearchResult represents the result of a commits search.
  code: "type CommitsSearchResult struct {\n\tTotal\t\t\t*int\t\t`json:\"total_count,omitempty\"`\n\tIncompleteResults\t*bool\t\t`json:\"incomplete_results,omitempty\"`\n\tCommits\t\t\t[]*CommitResult\t`json:\"items,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetIncompleteResults
    summary: GetIncompleteResults returns the IncompleteResults field if it's non-nil,
      zero value otherwise.
    description: |
      GetIncompleteResults returns the IncompleteResults field if it's non-nil, zero value otherwise.
    code: func (c *CommitsSearchResult) GetIncompleteResults() bool
    source:
      file: /src/github/github-accessors.go
      line: 992
  - name: GetTotal
    summary: GetTotal returns the Total field if it's non-nil, zero value otherwise.
    description: |
      GetTotal returns the Total field if it's non-nil, zero value otherwise.
    code: func (c *CommitsSearchResult) GetTotal() int
    source:
      file: /src/github/github-accessors.go
      line: 1000
  source:
    file: /src/github/search.go
    line: 68
- name: CommunityHealthFiles
  summary: CommunityHealthFiles represents the different files in the community health
    metrics response.
  description: |
    CommunityHealthFiles represents the different files in the community health metrics response.
  code: "type CommunityHealthFiles struct {\n\tCodeOfConduct\t*Metric\t`json:\"code_of_conduct\"`\n\tContributing\t*Metric\t`json:\"contributing\"`\n\tLicense\t\t*Metric\t`json:\"license\"`\n\tReadme\t\t*Metric\t`json:\"readme\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCodeOfConduct
    summary: GetCodeOfConduct returns the CodeOfConduct field.
    description: |
      GetCodeOfConduct returns the CodeOfConduct field.
    code: func (c *CommunityHealthFiles) GetCodeOfConduct() *Metric
    source:
      file: /src/github/github-accessors.go
      line: 1032
  - name: GetContributing
    summary: GetContributing returns the Contributing field.
    description: |
      GetContributing returns the Contributing field.
    code: func (c *CommunityHealthFiles) GetContributing() *Metric
    source:
      file: /src/github/github-accessors.go
      line: 1040
  - name: GetLicense
    summary: GetLicense returns the License field.
    description: |
      GetLicense returns the License field.
    code: func (c *CommunityHealthFiles) GetLicense() *Metric
    source:
      file: /src/github/github-accessors.go
      line: 1048
  - name: GetReadme
    summary: GetReadme returns the Readme field.
    description: |
      GetReadme returns the Readme field.
    code: func (c *CommunityHealthFiles) GetReadme() *Metric
    source:
      file: /src/github/github-accessors.go
      line: 1056
  source:
    file: /src/github/repos_community_health.go
    line: 23
- name: CommunityHealthMetrics
  summary: CommunityHealthMetrics represents a response containing the community metrics
    of a repository.
  description: |
    CommunityHealthMetrics represents a response containing the community metrics of a repository.
  code: "type CommunityHealthMetrics struct {\n\tHealthPercentage\t*int\t\t\t`json:\"health_percentage\"`\n\tFiles\t\t\t*CommunityHealthFiles\t`json:\"files\"`\n\tUpdatedAt\t\t*time.Time\t\t`json:\"updated_at\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetFiles
    summary: GetFiles returns the Files field.
    description: |
      GetFiles returns the Files field.
    code: func (c *CommunityHealthMetrics) GetFiles() *CommunityHealthFiles
    source:
      file: /src/github/github-accessors.go
      line: 1064
  - name: GetHealthPercentage
    summary: GetHealthPercentage returns the HealthPercentage field if it's non-nil,
      zero value otherwise.
    description: |
      GetHealthPercentage returns the HealthPercentage field if it's non-nil, zero value otherwise.
    code: func (c *CommunityHealthMetrics) GetHealthPercentage() int
    source:
      file: /src/github/github-accessors.go
      line: 1072
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (c *CommunityHealthMetrics) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 1080
  source:
    file: /src/github/repos_community_health.go
    line: 31
- name: Contributor
  summary: Contributor represents a repository contributor
  description: |
    Contributor represents a repository contributor
  code: "type Contributor struct {\n\tLogin\t\t\t*string\t`json:\"login,omitempty\"`\n\tID\t\t\t*int\t`json:\"id,omitempty\"`\n\tAvatarURL\t\t*string\t`json:\"avatar_url,omitempty\"`\n\tGravatarID\t\t*string\t`json:\"gravatar_id,omitempty\"`\n\tURL\t\t\t*string\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t\t*string\t`json:\"html_url,omitempty\"`\n\tFollowersURL\t\t*string\t`json:\"followers_url,omitempty\"`\n\tFollowingURL\t\t*string\t`json:\"following_url,omitempty\"`\n\tGistsURL\t\t*string\t`json:\"gists_url,omitempty\"`\n\tStarredURL\t\t*string\t`json:\"starred_url,omitempty\"`\n\tSubscriptionsURL\t*string\t`json:\"subscriptions_url,omitempty\"`\n\tOrganizationsURL\t*string\t`json:\"organizations_url,omitempty\"`\n\tReposURL\t\t*string\t`json:\"repos_url,omitempty\"`\n\tEventsURL\t\t*string\t`json:\"events_url,omitempty\"`\n\tReceivedEventsURL\t*string\t`json:\"received_events_url,omitempty\"`\n\tType\t\t\t*string\t`json:\"type,omitempty\"`\n\tSiteAdmin\t\t*bool\t`json:\"site_admin,omitempty\"`\n\tContributions\t\t*int\t`json:\"contributions,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAvatarURL
    summary: GetAvatarURL returns the AvatarURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetAvatarURL returns the AvatarURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetAvatarURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1088
  - name: GetContributions
    summary: GetContributions returns the Contributions field if it's non-nil, zero
      value otherwise.
    description: |
      GetContributions returns the Contributions field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetContributions() int
    source:
      file: /src/github/github-accessors.go
      line: 1096
  - name: GetEventsURL
    summary: GetEventsURL returns the EventsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetEventsURL returns the EventsURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1104
  - name: GetFollowersURL
    summary: GetFollowersURL returns the FollowersURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetFollowersURL returns the FollowersURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetFollowersURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1112
  - name: GetFollowingURL
    summary: GetFollowingURL returns the FollowingURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetFollowingURL returns the FollowingURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetFollowingURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1120
  - name: GetGistsURL
    summary: GetGistsURL returns the GistsURL field if it's non-nil, zero value otherwise.
    description: |
      GetGistsURL returns the GistsURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetGistsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1128
  - name: GetGravatarID
    summary: GetGravatarID returns the GravatarID field if it's non-nil, zero value
      otherwise.
    description: |
      GetGravatarID returns the GravatarID field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetGravatarID() string
    source:
      file: /src/github/github-accessors.go
      line: 1136
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1144
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 1152
  - name: GetLogin
    summary: GetLogin returns the Login field if it's non-nil, zero value otherwise.
    description: |
      GetLogin returns the Login field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetLogin() string
    source:
      file: /src/github/github-accessors.go
      line: 1160
  - name: GetOrganizationsURL
    summary: GetOrganizationsURL returns the OrganizationsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetOrganizationsURL returns the OrganizationsURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetOrganizationsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1168
  - name: GetReceivedEventsURL
    summary: GetReceivedEventsURL returns the ReceivedEventsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetReceivedEventsURL returns the ReceivedEventsURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetReceivedEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1176
  - name: GetReposURL
    summary: GetReposURL returns the ReposURL field if it's non-nil, zero value otherwise.
    description: |
      GetReposURL returns the ReposURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetReposURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1184
  - name: GetSiteAdmin
    summary: GetSiteAdmin returns the SiteAdmin field if it's non-nil, zero value
      otherwise.
    description: |
      GetSiteAdmin returns the SiteAdmin field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetSiteAdmin() bool
    source:
      file: /src/github/github-accessors.go
      line: 1192
  - name: GetStarredURL
    summary: GetStarredURL returns the StarredURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetStarredURL returns the StarredURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetStarredURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1200
  - name: GetSubscriptionsURL
    summary: GetSubscriptionsURL returns the SubscriptionsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetSubscriptionsURL returns the SubscriptionsURL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetSubscriptionsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1208
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 1216
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (c *Contributor) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1224
  source:
    file: /src/github/repos.go
    line: 391
- name: ContributorStats
  summary: ContributorStats represents a contributor to a repository and their weekly
    contributions to a given repo.
  description: |
    ContributorStats represents a contributor to a repository and their weekly contributions to a given repo.
  code: "type ContributorStats struct {\n\tAuthor\t*Contributor\t`json:\"author,omitempty\"`\n\tTotal\t*int\t\t`json:\"total,omitempty\"`\n\tWeeks\t[]WeeklyStats\t`json:\"weeks,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAuthor
    summary: GetAuthor returns the Author field.
    description: |
      GetAuthor returns the Author field.
    code: func (c *ContributorStats) GetAuthor() *Contributor
    source:
      file: /src/github/github-accessors.go
      line: 1232
  - name: GetTotal
    summary: GetTotal returns the Total field if it's non-nil, zero value otherwise.
    description: |
      GetTotal returns the Total field if it's non-nil, zero value otherwise.
    code: func (c *ContributorStats) GetTotal() int
    source:
      file: /src/github/github-accessors.go
      line: 1240
  - name: String
    summary: ""
    description: ""
    code: func (c ContributorStats) String() string
    source:
      file: /src/github/repos_stats.go
      line: 22
  source:
    file: /src/github/repos_stats.go
    line: 16
- name: CreateEvent
  summary: CreateEvent represents a created repository, branch, or tag.
  description: |
    CreateEvent represents a created repository, branch, or tag. The Webhook event name is "create".

    Note: webhooks will not receive this event for created repositories. Additionally, webhooks will not receive this event for tags if more than three tags are pushed at once.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#createevent
  code: "type CreateEvent struct {\n\tRef\t*string\t`json:\"ref,omitempty\"`\n\t//
    RefType is the object that was created. Possible values are: \"repository\", \"branch\",
    \"tag\".\n\tRefType\t\t*string\t`json:\"ref_type,omitempty\"`\n\tMasterBranch\t*string\t`json:\"master_branch,omitempty\"`\n\tDescription\t*string\t`json:\"description,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tPusherType\t*string\t\t`json:\"pusher_type,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (c *CreateEvent) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 1248
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (c *CreateEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 1256
  - name: GetMasterBranch
    summary: GetMasterBranch returns the MasterBranch field if it's non-nil, zero
      value otherwise.
    description: |
      GetMasterBranch returns the MasterBranch field if it's non-nil, zero value otherwise.
    code: func (c *CreateEvent) GetMasterBranch() string
    source:
      file: /src/github/github-accessors.go
      line: 1264
  - name: GetPusherType
    summary: GetPusherType returns the PusherType field if it's non-nil, zero value
      otherwise.
    description: |
      GetPusherType returns the PusherType field if it's non-nil, zero value otherwise.
    code: func (c *CreateEvent) GetPusherType() string
    source:
      file: /src/github/github-accessors.go
      line: 1272
  - name: GetRef
    summary: GetRef returns the Ref field if it's non-nil, zero value otherwise.
    description: |
      GetRef returns the Ref field if it's non-nil, zero value otherwise.
    code: func (c *CreateEvent) GetRef() string
    source:
      file: /src/github/github-accessors.go
      line: 1280
  - name: GetRefType
    summary: GetRefType returns the RefType field if it's non-nil, zero value otherwise.
    description: |
      GetRefType returns the RefType field if it's non-nil, zero value otherwise.
    code: func (c *CreateEvent) GetRefType() string
    source:
      file: /src/github/github-accessors.go
      line: 1288
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (c *CreateEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 1296
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (c *CreateEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 1304
  source:
    file: /src/github/event_types.go
    line: 32
- name: DeleteEvent
  summary: DeleteEvent represents a deleted branch or tag.
  description: |
    DeleteEvent represents a deleted branch or tag. The Webhook event name is "delete".

    Note: webhooks will not receive this event for tags if more than three tags are deleted at once.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#deleteevent
  code: "type DeleteEvent struct {\n\tRef\t*string\t`json:\"ref,omitempty\"`\n\t//
    RefType is the object that was deleted. Possible values are: \"branch\", \"tag\".\n\tRefType\t*string\t`json:\"ref_type,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tPusherType\t*string\t\t`json:\"pusher_type,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (d *DeleteEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 1312
  - name: GetPusherType
    summary: GetPusherType returns the PusherType field if it's non-nil, zero value
      otherwise.
    description: |
      GetPusherType returns the PusherType field if it's non-nil, zero value otherwise.
    code: func (d *DeleteEvent) GetPusherType() string
    source:
      file: /src/github/github-accessors.go
      line: 1320
  - name: GetRef
    summary: GetRef returns the Ref field if it's non-nil, zero value otherwise.
    description: |
      GetRef returns the Ref field if it's non-nil, zero value otherwise.
    code: func (d *DeleteEvent) GetRef() string
    source:
      file: /src/github/github-accessors.go
      line: 1328
  - name: GetRefType
    summary: GetRefType returns the RefType field if it's non-nil, zero value otherwise.
    description: |
      GetRefType returns the RefType field if it's non-nil, zero value otherwise.
    code: func (d *DeleteEvent) GetRefType() string
    source:
      file: /src/github/github-accessors.go
      line: 1336
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (d *DeleteEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 1344
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (d *DeleteEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 1352
  source:
    file: /src/github/event_types.go
    line: 53
- name: Deployment
  summary: Deployment represents a deployment in a repo
  description: |
    Deployment represents a deployment in a repo
  code: "type Deployment struct {\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tSHA\t\t*string\t\t`json:\"sha,omitempty\"`\n\tRef\t\t*string\t\t`json:\"ref,omitempty\"`\n\tTask\t\t*string\t\t`json:\"task,omitempty\"`\n\tPayload\t\tjson.RawMessage\t`json:\"payload,omitempty\"`\n\tEnvironment\t*string\t\t`json:\"environment,omitempty\"`\n\tDescription\t*string\t\t`json:\"description,omitempty\"`\n\tCreator\t\t*User\t\t`json:\"creator,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t`json:\"updated_at,omitempty\"`\n\tStatusesURL\t*string\t\t`json:\"statuses_url,omitempty\"`\n\tRepositoryURL\t*string\t\t`json:\"repository_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 1360
  - name: GetCreator
    summary: GetCreator returns the Creator field.
    description: |
      GetCreator returns the Creator field.
    code: func (d *Deployment) GetCreator() *User
    source:
      file: /src/github/github-accessors.go
      line: 1368
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 1376
  - name: GetEnvironment
    summary: GetEnvironment returns the Environment field if it's non-nil, zero value
      otherwise.
    description: |
      GetEnvironment returns the Environment field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetEnvironment() string
    source:
      file: /src/github/github-accessors.go
      line: 1384
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 1392
  - name: GetRef
    summary: GetRef returns the Ref field if it's non-nil, zero value otherwise.
    description: |
      GetRef returns the Ref field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetRef() string
    source:
      file: /src/github/github-accessors.go
      line: 1400
  - name: GetRepositoryURL
    summary: GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetRepositoryURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1408
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 1416
  - name: GetStatusesURL
    summary: GetStatusesURL returns the StatusesURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetStatusesURL returns the StatusesURL field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetStatusesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1424
  - name: GetTask
    summary: GetTask returns the Task field if it's non-nil, zero value otherwise.
    description: |
      GetTask returns the Task field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetTask() string
    source:
      file: /src/github/github-accessors.go
      line: 1432
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1448
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (d *Deployment) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 1440
  source:
    file: /src/github/repos_deployments.go
    line: 15
- name: DeploymentEvent
  summary: DeploymentEvent represents a deployment.
  description: |
    DeploymentEvent represents a deployment. The Webhook event name is "deployment".

    Events of this type are not visible in timelines, they are only used to trigger hooks.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#deploymentevent
  code: "type DeploymentEvent struct {\n\tDeployment\t*Deployment\t`json:\"deployment,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDeployment
    summary: GetDeployment returns the Deployment field.
    description: |
      GetDeployment returns the Deployment field.
    code: func (d *DeploymentEvent) GetDeployment() *Deployment
    source:
      file: /src/github/github-accessors.go
      line: 1456
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (d *DeploymentEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 1464
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (d *DeploymentEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 1472
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (d *DeploymentEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 1480
  source:
    file: /src/github/event_types.go
    line: 71
- name: DeploymentRequest
  summary: DeploymentRequest represents a deployment request
  description: |
    DeploymentRequest represents a deployment request
  code: "type DeploymentRequest struct {\n\tRef\t\t\t*string\t\t`json:\"ref,omitempty\"`\n\tTask\t\t\t*string\t\t`json:\"task,omitempty\"`\n\tAutoMerge\t\t*bool\t\t`json:\"auto_merge,omitempty\"`\n\tRequiredContexts\t*[]string\t`json:\"required_contexts,omitempty\"`\n\tPayload\t\t\t*string\t\t`json:\"payload,omitempty\"`\n\tEnvironment\t\t*string\t\t`json:\"environment,omitempty\"`\n\tDescription\t\t*string\t\t`json:\"description,omitempty\"`\n\tTransientEnvironment\t*bool\t\t`json:\"transient_environment,omitempty\"`\n\tProductionEnvironment\t*bool\t\t`json:\"production_environment,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAutoMerge
    summary: GetAutoMerge returns the AutoMerge field if it's non-nil, zero value
      otherwise.
    description: |
      GetAutoMerge returns the AutoMerge field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentRequest) GetAutoMerge() bool
    source:
      file: /src/github/github-accessors.go
      line: 1488
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentRequest) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 1496
  - name: GetEnvironment
    summary: GetEnvironment returns the Environment field if it's non-nil, zero value
      otherwise.
    description: |
      GetEnvironment returns the Environment field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentRequest) GetEnvironment() string
    source:
      file: /src/github/github-accessors.go
      line: 1504
  - name: GetPayload
    summary: GetPayload returns the Payload field if it's non-nil, zero value otherwise.
    description: |
      GetPayload returns the Payload field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentRequest) GetPayload() string
    source:
      file: /src/github/github-accessors.go
      line: 1512
  - name: GetProductionEnvironment
    summary: GetProductionEnvironment returns the ProductionEnvironment field if it's
      non-nil, zero value otherwise.
    description: |
      GetProductionEnvironment returns the ProductionEnvironment field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentRequest) GetProductionEnvironment() bool
    source:
      file: /src/github/github-accessors.go
      line: 1520
  - name: GetRef
    summary: GetRef returns the Ref field if it's non-nil, zero value otherwise.
    description: |
      GetRef returns the Ref field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentRequest) GetRef() string
    source:
      file: /src/github/github-accessors.go
      line: 1528
  - name: GetRequiredContexts
    summary: GetRequiredContexts returns the RequiredContexts field if it's non-nil,
      zero value otherwise.
    description: |
      GetRequiredContexts returns the RequiredContexts field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentRequest) GetRequiredContexts() []string
    source:
      file: /src/github/github-accessors.go
      line: 1536
  - name: GetTask
    summary: GetTask returns the Task field if it's non-nil, zero value otherwise.
    description: |
      GetTask returns the Task field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentRequest) GetTask() string
    source:
      file: /src/github/github-accessors.go
      line: 1544
  - name: GetTransientEnvironment
    summary: GetTransientEnvironment returns the TransientEnvironment field if it's
      non-nil, zero value otherwise.
    description: |
      GetTransientEnvironment returns the TransientEnvironment field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentRequest) GetTransientEnvironment() bool
    source:
      file: /src/github/github-accessors.go
      line: 1552
  source:
    file: /src/github/repos_deployments.go
    line: 32
- name: DeploymentStatus
  summary: DeploymentStatus represents the status of a particular deployment.
  description: |
    DeploymentStatus represents the status of a particular deployment.
  code: "type DeploymentStatus struct {\n\tID\t*int\t`json:\"id,omitempty\"`\n\t//
    State is the deployment state.\n\t// Possible values are: \"pending\", \"success\",
    \"failure\", \"error\", \"inactive\".\n\tState\t\t*string\t\t`json:\"state,omitempty\"`\n\tCreator\t\t*User\t\t`json:\"creator,omitempty\"`\n\tDescription\t*string\t\t`json:\"description,omitempty\"`\n\tTargetURL\t*string\t\t`json:\"target_url,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t`json:\"updated_at,omitempty\"`\n\tDeploymentURL\t*string\t\t`json:\"deployment_url,omitempty\"`\n\tRepositoryURL\t*string\t\t`json:\"repository_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatus) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 1560
  - name: GetCreator
    summary: GetCreator returns the Creator field.
    description: |
      GetCreator returns the Creator field.
    code: func (d *DeploymentStatus) GetCreator() *User
    source:
      file: /src/github/github-accessors.go
      line: 1568
  - name: GetDeploymentURL
    summary: GetDeploymentURL returns the DeploymentURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetDeploymentURL returns the DeploymentURL field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatus) GetDeploymentURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1576
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatus) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 1584
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatus) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 1592
  - name: GetRepositoryURL
    summary: GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatus) GetRepositoryURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1600
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatus) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 1608
  - name: GetTargetURL
    summary: GetTargetURL returns the TargetURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetTargetURL returns the TargetURL field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatus) GetTargetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1616
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatus) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 1624
  source:
    file: /src/github/repos_deployments.go
    line: 131
- name: DeploymentStatusEvent
  summary: DeploymentStatusEvent represents a deployment status.
  description: |
    DeploymentStatusEvent represents a deployment status. The Webhook event name is "deployment_status".

    Events of this type are not visible in timelines, they are only used to trigger hooks.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#deploymentstatusevent
  code: "type DeploymentStatusEvent struct {\n\tDeployment\t\t*Deployment\t\t`json:\"deployment,omitempty\"`\n\tDeploymentStatus\t*DeploymentStatus\t`json:\"deployment_status,omitempty\"`\n\tRepo\t\t\t*Repository\t\t`json:\"repository,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDeployment
    summary: GetDeployment returns the Deployment field.
    description: |
      GetDeployment returns the Deployment field.
    code: func (d *DeploymentStatusEvent) GetDeployment() *Deployment
    source:
      file: /src/github/github-accessors.go
      line: 1632
  - name: GetDeploymentStatus
    summary: GetDeploymentStatus returns the DeploymentStatus field.
    description: |
      GetDeploymentStatus returns the DeploymentStatus field.
    code: func (d *DeploymentStatusEvent) GetDeploymentStatus() *DeploymentStatus
    source:
      file: /src/github/github-accessors.go
      line: 1640
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (d *DeploymentStatusEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 1648
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (d *DeploymentStatusEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 1656
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (d *DeploymentStatusEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 1664
  source:
    file: /src/github/event_types.go
    line: 86
- name: DeploymentStatusRequest
  summary: DeploymentStatusRequest represents a deployment request
  description: |
    DeploymentStatusRequest represents a deployment request
  code: "type DeploymentStatusRequest struct {\n\tState\t\t*string\t`json:\"state,omitempty\"`\n\tLogURL\t\t*string\t`json:\"log_url,omitempty\"`\n\tDescription\t*string\t`json:\"description,omitempty\"`\n\tEnvironmentURL\t*string\t`json:\"environment_url,omitempty\"`\n\tAutoInactive\t*bool\t`json:\"auto_inactive,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAutoInactive
    summary: GetAutoInactive returns the AutoInactive field if it's non-nil, zero
      value otherwise.
    description: |
      GetAutoInactive returns the AutoInactive field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatusRequest) GetAutoInactive() bool
    source:
      file: /src/github/github-accessors.go
      line: 1672
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatusRequest) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 1680
  - name: GetEnvironmentURL
    summary: GetEnvironmentURL returns the EnvironmentURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetEnvironmentURL returns the EnvironmentURL field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatusRequest) GetEnvironmentURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1688
  - name: GetLogURL
    summary: GetLogURL returns the LogURL field if it's non-nil, zero value otherwise.
    description: |
      GetLogURL returns the LogURL field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatusRequest) GetLogURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1696
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (d *DeploymentStatusRequest) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 1704
  source:
    file: /src/github/repos_deployments.go
    line: 146
- name: DeploymentsListOptions
  summary: DeploymentsListOptions specifies the optional parameters to the RepositoriesService.ListDeployments
    method.
  description: |
    DeploymentsListOptions specifies the optional parameters to the RepositoriesService.ListDeployments method.
  code: "type DeploymentsListOptions struct {\n\t// SHA of the Deployment.\n\tSHA\tstring\t`url:\"sha,omitempty\"`\n\n\t//
    List deployments for a given ref.\n\tRef\tstring\t`url:\"ref,omitempty\"`\n\n\t//
    List deployments for a given task.\n\tTask\tstring\t`url:\"task,omitempty\"`\n\n\t//
    List deployments for a given environment.\n\tEnvironment\tstring\t`url:\"environment,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos_deployments.go
    line: 46
- name: DismissalRestrictions
  summary: DismissalRestrictions specifies which users and teams can dismiss pull
    request reviews.
  description: |
    DismissalRestrictions specifies which users and teams can dismiss pull request reviews.
  code: "type DismissalRestrictions struct {\n\t// The list of users who can dimiss
    pull request reviews.\n\tUsers\t[]*User\t`json:\"users\"`\n\t// The list of teams
    which can dismiss pull request reviews.\n\tTeams\t[]*Team\t`json:\"teams\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 649
- name: DismissalRestrictionsRequest
  summary: DismissalRestrictionsRequest represents the request to create/edit the
    restriction to allows only specific users or teams to dimiss pull request reviews.
  description: |
    DismissalRestrictionsRequest represents the request to create/edit the restriction to allows only specific users or teams to dimiss pull request reviews. It is separate from DismissalRestrictions above because the request structure is different from the response structure.
  code: "type DismissalRestrictionsRequest struct {\n\t// The list of user logins
    who can dismiss pull request reviews. (Required; use []string{} instead of nil
    for empty list.)\n\tUsers\t[]string\t`json:\"users\"`\n\t// The list of team slugs
    which can dismiss pull request reviews. (Required; use []string{} instead of nil
    for empty list.)\n\tTeams\t[]string\t`json:\"teams\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 660
- name: DraftReviewComment
  summary: DraftReviewComment represents a comment part of the review.
  description: |
    DraftReviewComment represents a comment part of the review.
  code: "type DraftReviewComment struct {\n\tPath\t\t*string\t`json:\"path,omitempty\"`\n\tPosition\t*int\t`json:\"position,omitempty\"`\n\tBody\t\t*string\t`json:\"body,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (d *DraftReviewComment) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 1712
  - name: GetPath
    summary: GetPath returns the Path field if it's non-nil, zero value otherwise.
    description: |
      GetPath returns the Path field if it's non-nil, zero value otherwise.
    code: func (d *DraftReviewComment) GetPath() string
    source:
      file: /src/github/github-accessors.go
      line: 1720
  - name: GetPosition
    summary: GetPosition returns the Position field if it's non-nil, zero value otherwise.
    description: |
      GetPosition returns the Position field if it's non-nil, zero value otherwise.
    code: func (d *DraftReviewComment) GetPosition() int
    source:
      file: /src/github/github-accessors.go
      line: 1728
  - name: String
    summary: ""
    description: ""
    code: func (c DraftReviewComment) String() string
    source:
      file: /src/github/pulls_reviews.go
      line: 37
  source:
    file: /src/github/pulls_reviews.go
    line: 31
- name: EditChange
  summary: EditChange represents the changes when an issue, pull request, or comment
    has been edited.
  description: |
    EditChange represents the changes when an issue, pull request, or comment has been edited.
  code: "type EditChange struct {\n\tTitle\t*struct {\n\t\tFrom *string `json:\"from,omitempty\"`\n\t}\t`json:\"title,omitempty\"`\n\tBody\t*struct
    {\n\t\tFrom *string `json:\"from,omitempty\"`\n\t}\t`json:\"body,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/event_types.go
    line: 135
- name: Error
  summary: An Error reports more details on an individual error in an ErrorResponse.
  description: |
    An Error reports more details on an individual error in an ErrorResponse. These are the possible validation error codes:

        missing:
            resource does not exist
        missing_field:
            a required field on a resource has not been set
        invalid:
            the formatting of a field is invalid
        already_exists:
            another resource has the same valid as this field
        custom:
            some resources return this (e.g. github.User.CreateKey()), additional
            information is set in the Message field of the Error

    GitHub API docs: https://developer.github.com/v3/#client-errors
  code: "type Error struct {\n\tResource\tstring\t`json:\"resource\"`\t// resource
    on which the error occurred\n\tField\t\tstring\t`json:\"field\"`\t\t// field on
    which the error occurred\n\tCode\t\tstring\t`json:\"code\"`\t\t// validation error
    code\n\tMessage\t\tstring\t`json:\"message\"`\t// Message describing the error.
    Errors with Code == \"custom\" will always have this set.\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Error
    summary: ""
    description: ""
    code: func (e *Error) Error() string
    source:
      file: /src/github/github.go
      line: 657
  source:
    file: /src/github/github.go
    line: 650
- name: ErrorResponse
  summary: An ErrorResponse reports one or more errors caused by an API request.
  description: |
    An ErrorResponse reports one or more errors caused by an API request.

    GitHub API docs: https://developer.github.com/v3/#client-errors
  code: "type ErrorResponse struct {\n\tResponse\t*http.Response\t// HTTP response
    that caused this error\n\tMessage\t\tstring\t\t`json:\"message\"`\t// error message\n\tErrors\t\t[]Error\t\t`json:\"errors\"`\t\t//
    more detail on individual errors\n\t// Block is only populated on certain types
    of errors such as code 451.\n\t// See https://developer.github.com/changes/2016-03-17-the-451-status-code-is-now-supported/\n\t//
    for more information.\n\tBlock\t*struct {\n\t\tReason\t\tstring\t\t`json:\"reason,omitempty\"`\n\t\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\t}\t`json:\"block,omitempty\"`\n\t//
    Most errors will also include a documentation_url field pointing\n\t// to some
    content that might help you resolve the error, see\n\t// https://developer.github.com/v3/#client-errors\n\tDocumentationURL\tstring\t`json:\"documentation_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Error
    summary: ""
    description: ""
    code: func (r *ErrorResponse) Error() string
    source:
      file: /src/github/github.go
      line: 561
  source:
    file: /src/github/github.go
    line: 544
- name: Event
  summary: Event represents a GitHub event.
  description: |
    Event represents a GitHub event.
  code: "type Event struct {\n\tType\t\t*string\t\t\t`json:\"type,omitempty\"`\n\tPublic\t\t*bool\t\t\t`json:\"public,omitempty\"`\n\tRawPayload\t*json.RawMessage\t`json:\"payload,omitempty\"`\n\tRepo\t\t*Repository\t\t`json:\"repo,omitempty\"`\n\tActor\t\t*User\t\t\t`json:\"actor,omitempty\"`\n\tOrg\t\t*Organization\t\t`json:\"org,omitempty\"`\n\tCreatedAt\t*time.Time\t\t`json:\"created_at,omitempty\"`\n\tID\t\t*string\t\t\t`json:\"id,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetActor
    summary: GetActor returns the Actor field.
    description: |
      GetActor returns the Actor field.
    code: func (e *Event) GetActor() *User
    source:
      file: /src/github/github-accessors.go
      line: 1736
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (e *Event) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 1744
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (e *Event) GetID() string
    source:
      file: /src/github/github-accessors.go
      line: 1752
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (e *Event) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 1760
  - name: GetPublic
    summary: GetPublic returns the Public field if it's non-nil, zero value otherwise.
    description: |
      GetPublic returns the Public field if it's non-nil, zero value otherwise.
    code: func (e *Event) GetPublic() bool
    source:
      file: /src/github/github-accessors.go
      line: 1768
  - name: GetRawPayload
    summary: GetRawPayload returns the RawPayload field if it's non-nil, zero value
      otherwise.
    description: |
      GetRawPayload returns the RawPayload field if it's non-nil, zero value otherwise.
    code: func (e *Event) GetRawPayload() json.RawMessage
    source:
      file: /src/github/github-accessors.go
      line: 1776
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (e *Event) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 1784
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (e *Event) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 1792
  - name: ParsePayload
    summary: ParsePayload parses the event payload.
    description: |
      ParsePayload parses the event payload. For recognized event types, a value of the corresponding struct type will be returned.
    code: func (e *Event) ParsePayload() (payload interface{}, err error)
    source:
      file: /src/github/activity_events.go
      line: 33
  - name: Payload
    summary: Payload returns the parsed event payload.
    description: |
      Payload returns the parsed event payload. For recognized event types, a value of the corresponding struct type will be returned.

      Deprecated: Use ParsePayload instead, which returns an error rather than panics if JSON unmarshaling raw payload fails.
    code: func (e *Event) Payload() (payload interface{})
    source:
      file: /src/github/activity_events.go
      line: 113
  - name: String
    summary: ""
    description: ""
    code: func (e Event) String() string
    source:
      file: /src/github/activity_events.go
      line: 27
  source:
    file: /src/github/activity_events.go
    line: 16
- name: FeedLink
  summary: FeedLink represents a link to a related resource.
  description: |
    FeedLink represents a link to a related resource.
  code: "type FeedLink struct {\n\tHRef\t*string\t`json:\"href,omitempty\"`\n\tType\t*string\t`json:\"type,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetHRef
    summary: GetHRef returns the HRef field if it's non-nil, zero value otherwise.
    description: |
      GetHRef returns the HRef field if it's non-nil, zero value otherwise.
    code: func (f *FeedLink) GetHRef() string
    source:
      file: /src/github/github-accessors.go
      line: 1800
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (f *FeedLink) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 1808
  source:
    file: /src/github/activity.go
    line: 17
- name: Feeds
  summary: Feeds represents timeline resources in Atom format.
  description: |
    Feeds represents timeline resources in Atom format.
  code: "type Feeds struct {\n\tTimelineURL\t\t\t*string\t\t`json:\"timeline_url,omitempty\"`\n\tUserURL\t\t\t\t*string\t\t`json:\"user_url,omitempty\"`\n\tCurrentUserPublicURL\t\t*string\t\t`json:\"current_user_public_url,omitempty\"`\n\tCurrentUserURL\t\t\t*string\t\t`json:\"current_user_url,omitempty\"`\n\tCurrentUserActorURL\t\t*string\t\t`json:\"current_user_actor_url,omitempty\"`\n\tCurrentUserOrganizationURL\t*string\t\t`json:\"current_user_organization_url,omitempty\"`\n\tCurrentUserOrganizationURLs\t[]string\t`json:\"current_user_organization_urls,omitempty\"`\n\tLinks\t\t\t\t*struct
    {\n\t\tTimeline\t\t\t*FeedLink\t`json:\"timeline,omitempty\"`\n\t\tUser\t\t\t\t*FeedLink\t`json:\"user,omitempty\"`\n\t\tCurrentUserPublic\t\t*FeedLink\t`json:\"current_user_public,omitempty\"`\n\t\tCurrentUser\t\t\t*FeedLink\t`json:\"current_user,omitempty\"`\n\t\tCurrentUserActor\t\t*FeedLink\t`json:\"current_user_actor,omitempty\"`\n\t\tCurrentUserOrganization\t\t*FeedLink\t`json:\"current_user_organization,omitempty\"`\n\t\tCurrentUserOrganizations\t[]FeedLink\t`json:\"current_user_organizations,omitempty\"`\n\t}\t`json:\"_links,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCurrentUserActorURL
    summary: GetCurrentUserActorURL returns the CurrentUserActorURL field if it's
      non-nil, zero value otherwise.
    description: |
      GetCurrentUserActorURL returns the CurrentUserActorURL field if it's non-nil, zero value otherwise.
    code: func (f *Feeds) GetCurrentUserActorURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1816
  - name: GetCurrentUserOrganizationURL
    summary: GetCurrentUserOrganizationURL returns the CurrentUserOrganizationURL
      field if it's non-nil, zero value otherwise.
    description: |
      GetCurrentUserOrganizationURL returns the CurrentUserOrganizationURL field if it's non-nil, zero value otherwise.
    code: func (f *Feeds) GetCurrentUserOrganizationURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1824
  - name: GetCurrentUserPublicURL
    summary: GetCurrentUserPublicURL returns the CurrentUserPublicURL field if it's
      non-nil, zero value otherwise.
    description: |
      GetCurrentUserPublicURL returns the CurrentUserPublicURL field if it's non-nil, zero value otherwise.
    code: func (f *Feeds) GetCurrentUserPublicURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1832
  - name: GetCurrentUserURL
    summary: GetCurrentUserURL returns the CurrentUserURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetCurrentUserURL returns the CurrentUserURL field if it's non-nil, zero value otherwise.
    code: func (f *Feeds) GetCurrentUserURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1840
  - name: GetTimelineURL
    summary: GetTimelineURL returns the TimelineURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetTimelineURL returns the TimelineURL field if it's non-nil, zero value otherwise.
    code: func (f *Feeds) GetTimelineURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1848
  - name: GetUserURL
    summary: GetUserURL returns the UserURL field if it's non-nil, zero value otherwise.
    description: |
      GetUserURL returns the UserURL field if it's non-nil, zero value otherwise.
    code: func (f *Feeds) GetUserURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1856
  source:
    file: /src/github/activity.go
    line: 23
- name: ForkEvent
  summary: ForkEvent is triggered when a user forks a repository.
  description: |
    ForkEvent is triggered when a user forks a repository. The Webhook event name is "fork".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#forkevent
  code: "type ForkEvent struct {\n\t// Forkee is the created repository.\n\tForkee\t*Repository\t`json:\"forkee,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetForkee
    summary: GetForkee returns the Forkee field.
    description: |
      GetForkee returns the Forkee field.
    code: func (f *ForkEvent) GetForkee() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 1864
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (f *ForkEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 1872
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (f *ForkEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 1880
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (f *ForkEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 1888
  source:
    file: /src/github/event_types.go
    line: 100
- name: GPGEmail
  summary: GPGEmail represents an email address associated to a GPG key.
  description: |
    GPGEmail represents an email address associated to a GPG key.
  code: "type GPGEmail struct {\n\tEmail\t\t*string\t`json:\"email,omitempty\"`\n\tVerified\t*bool\t`json:\"verified,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (g *GPGEmail) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 2232
  - name: GetVerified
    summary: GetVerified returns the Verified field if it's non-nil, zero value otherwise.
    description: |
      GetVerified returns the Verified field if it's non-nil, zero value otherwise.
    code: func (g *GPGEmail) GetVerified() bool
    source:
      file: /src/github/github-accessors.go
      line: 2240
  source:
    file: /src/github/users_gpg_keys.go
    line: 38
- name: GPGKey
  summary: GPGKey represents a GitHub user's public GPG key used to verify GPG signed
    commits and tags.
  description: |
    GPGKey represents a GitHub user's public GPG key used to verify GPG signed commits and tags.

    https://developer.github.com/changes/2016-04-04-git-signing-api-preview/
  code: "type GPGKey struct {\n\tID\t\t\t*int\t\t`json:\"id,omitempty\"`\n\tPrimaryKeyID\t\t*int\t\t`json:\"primary_key_id,omitempty\"`\n\tKeyID\t\t\t*string\t\t`json:\"key_id,omitempty\"`\n\tPublicKey\t\t*string\t\t`json:\"public_key,omitempty\"`\n\tEmails\t\t\t[]GPGEmail\t`json:\"emails,omitempty\"`\n\tSubkeys\t\t\t[]GPGKey\t`json:\"subkeys,omitempty\"`\n\tCanSign\t\t\t*bool\t\t`json:\"can_sign,omitempty\"`\n\tCanEncryptComms\t\t*bool\t\t`json:\"can_encrypt_comms,omitempty\"`\n\tCanEncryptStorage\t*bool\t\t`json:\"can_encrypt_storage,omitempty\"`\n\tCanCertify\t\t*bool\t\t`json:\"can_certify,omitempty\"`\n\tCreatedAt\t\t*time.Time\t`json:\"created_at,omitempty\"`\n\tExpiresAt\t\t*time.Time\t`json:\"expires_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCanCertify
    summary: GetCanCertify returns the CanCertify field if it's non-nil, zero value
      otherwise.
    description: |
      GetCanCertify returns the CanCertify field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetCanCertify() bool
    source:
      file: /src/github/github-accessors.go
      line: 2248
  - name: GetCanEncryptComms
    summary: GetCanEncryptComms returns the CanEncryptComms field if it's non-nil,
      zero value otherwise.
    description: |
      GetCanEncryptComms returns the CanEncryptComms field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetCanEncryptComms() bool
    source:
      file: /src/github/github-accessors.go
      line: 2256
  - name: GetCanEncryptStorage
    summary: GetCanEncryptStorage returns the CanEncryptStorage field if it's non-nil,
      zero value otherwise.
    description: |
      GetCanEncryptStorage returns the CanEncryptStorage field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetCanEncryptStorage() bool
    source:
      file: /src/github/github-accessors.go
      line: 2264
  - name: GetCanSign
    summary: GetCanSign returns the CanSign field if it's non-nil, zero value otherwise.
    description: |
      GetCanSign returns the CanSign field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetCanSign() bool
    source:
      file: /src/github/github-accessors.go
      line: 2272
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2280
  - name: GetExpiresAt
    summary: GetExpiresAt returns the ExpiresAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetExpiresAt returns the ExpiresAt field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetExpiresAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2288
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 2296
  - name: GetKeyID
    summary: GetKeyID returns the KeyID field if it's non-nil, zero value otherwise.
    description: |
      GetKeyID returns the KeyID field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetKeyID() string
    source:
      file: /src/github/github-accessors.go
      line: 2304
  - name: GetPrimaryKeyID
    summary: GetPrimaryKeyID returns the PrimaryKeyID field if it's non-nil, zero
      value otherwise.
    description: |
      GetPrimaryKeyID returns the PrimaryKeyID field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetPrimaryKeyID() int
    source:
      file: /src/github/github-accessors.go
      line: 2312
  - name: GetPublicKey
    summary: GetPublicKey returns the PublicKey field if it's non-nil, zero value
      otherwise.
    description: |
      GetPublicKey returns the PublicKey field if it's non-nil, zero value otherwise.
    code: func (g *GPGKey) GetPublicKey() string
    source:
      file: /src/github/github-accessors.go
      line: 2320
  - name: String
    summary: String stringifies a GPGKey.
    description: |
      String stringifies a GPGKey.
    code: func (k GPGKey) String() string
    source:
      file: /src/github/users_gpg_keys.go
      line: 33
  source:
    file: /src/github/users_gpg_keys.go
    line: 17
- name: Gist
  summary: Gist represents a GitHub's gist.
  description: |
    Gist represents a GitHub's gist.
  code: "type Gist struct {\n\tID\t\t*string\t\t\t\t`json:\"id,omitempty\"`\n\tDescription\t*string\t\t\t\t`json:\"description,omitempty\"`\n\tPublic\t\t*bool\t\t\t\t`json:\"public,omitempty\"`\n\tOwner\t\t*User\t\t\t\t`json:\"owner,omitempty\"`\n\tFiles\t\tmap[GistFilename]GistFile\t`json:\"files,omitempty\"`\n\tComments\t*int\t\t\t\t`json:\"comments,omitempty\"`\n\tHTMLURL\t\t*string\t\t\t\t`json:\"html_url,omitempty\"`\n\tGitPullURL\t*string\t\t\t\t`json:\"git_pull_url,omitempty\"`\n\tGitPushURL\t*string\t\t\t\t`json:\"git_push_url,omitempty\"`\n\tCreatedAt\t*time.Time\t\t\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*time.Time\t\t\t`json:\"updated_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetComments
    summary: GetComments returns the Comments field if it's non-nil, zero value otherwise.
    description: |
      GetComments returns the Comments field if it's non-nil, zero value otherwise.
    code: func (g *Gist) GetComments() int
    source:
      file: /src/github/github-accessors.go
      line: 1896
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (g *Gist) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 1904
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (g *Gist) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 1912
  - name: GetGitPullURL
    summary: GetGitPullURL returns the GitPullURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetGitPullURL returns the GitPullURL field if it's non-nil, zero value otherwise.
    code: func (g *Gist) GetGitPullURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1920
  - name: GetGitPushURL
    summary: GetGitPushURL returns the GitPushURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetGitPushURL returns the GitPushURL field if it's non-nil, zero value otherwise.
    code: func (g *Gist) GetGitPushURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1928
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (g *Gist) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 1936
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (g *Gist) GetID() string
    source:
      file: /src/github/github-accessors.go
      line: 1944
  - name: GetOwner
    summary: GetOwner returns the Owner field.
    description: |
      GetOwner returns the Owner field.
    code: func (g *Gist) GetOwner() *User
    source:
      file: /src/github/github-accessors.go
      line: 1952
  - name: GetPublic
    summary: GetPublic returns the Public field if it's non-nil, zero value otherwise.
    description: |
      GetPublic returns the Public field if it's non-nil, zero value otherwise.
    code: func (g *Gist) GetPublic() bool
    source:
      file: /src/github/github-accessors.go
      line: 1960
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (g *Gist) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 1968
  - name: String
    summary: ""
    description: ""
    code: func (g Gist) String() string
    source:
      file: /src/github/gists.go
      line: 35
  source:
    file: /src/github/gists.go
    line: 21
- name: GistComment
  summary: GistComment represents a Gist comment.
  description: |
    GistComment represents a Gist comment.
  code: "type GistComment struct {\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tBody\t\t*string\t\t`json:\"body,omitempty\"`\n\tUser\t\t*User\t\t`json:\"user,omitempty\"`\n\tCreatedAt\t*time.Time\t`json:\"created_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (g *GistComment) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 1976
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (g *GistComment) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 1984
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (g *GistComment) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 1992
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (g *GistComment) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2000
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (g *GistComment) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 2008
  - name: String
    summary: ""
    description: ""
    code: func (g GistComment) String() string
    source:
      file: /src/github/gists_comments.go
      line: 23
  source:
    file: /src/github/gists_comments.go
    line: 15
- name: GistCommit
  summary: GistCommit represents a commit on a gist.
  description: |
    GistCommit represents a commit on a gist.
  code: "type GistCommit struct {\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tVersion\t\t*string\t\t`json:\"version,omitempty\"`\n\tUser\t\t*User\t\t`json:\"user,omitempty\"`\n\tChangeStatus\t*CommitStats\t`json:\"change_status,omitempty\"`\n\tCommittedAt\t*Timestamp\t`json:\"committed_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetChangeStatus
    summary: GetChangeStatus returns the ChangeStatus field.
    description: |
      GetChangeStatus returns the ChangeStatus field.
    code: func (g *GistCommit) GetChangeStatus() *CommitStats
    source:
      file: /src/github/github-accessors.go
      line: 2016
  - name: GetCommittedAt
    summary: GetCommittedAt returns the CommittedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCommittedAt returns the CommittedAt field if it's non-nil, zero value otherwise.
    code: func (g *GistCommit) GetCommittedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 2024
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (g *GistCommit) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2032
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (g *GistCommit) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 2040
  - name: GetVersion
    summary: GetVersion returns the Version field if it's non-nil, zero value otherwise.
    description: |
      GetVersion returns the Version field if it's non-nil, zero value otherwise.
    code: func (g *GistCommit) GetVersion() string
    source:
      file: /src/github/github-accessors.go
      line: 2048
  - name: String
    summary: ""
    description: ""
    code: func (gc GistCommit) String() string
    source:
      file: /src/github/gists.go
      line: 65
  source:
    file: /src/github/gists.go
    line: 57
- name: GistFile
  summary: GistFile represents a file on a gist.
  description: |
    GistFile represents a file on a gist.
  code: "type GistFile struct {\n\tSize\t\t*int\t`json:\"size,omitempty\"`\n\tFilename\t*string\t`json:\"filename,omitempty\"`\n\tLanguage\t*string\t`json:\"language,omitempty\"`\n\tType\t\t*string\t`json:\"type,omitempty\"`\n\tRawURL\t\t*string\t`json:\"raw_url,omitempty\"`\n\tContent\t\t*string\t`json:\"content,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetContent
    summary: GetContent returns the Content field if it's non-nil, zero value otherwise.
    description: |
      GetContent returns the Content field if it's non-nil, zero value otherwise.
    code: func (g *GistFile) GetContent() string
    source:
      file: /src/github/github-accessors.go
      line: 2056
  - name: GetFilename
    summary: GetFilename returns the Filename field if it's non-nil, zero value otherwise.
    description: |
      GetFilename returns the Filename field if it's non-nil, zero value otherwise.
    code: func (g *GistFile) GetFilename() string
    source:
      file: /src/github/github-accessors.go
      line: 2064
  - name: GetLanguage
    summary: GetLanguage returns the Language field if it's non-nil, zero value otherwise.
    description: |
      GetLanguage returns the Language field if it's non-nil, zero value otherwise.
    code: func (g *GistFile) GetLanguage() string
    source:
      file: /src/github/github-accessors.go
      line: 2072
  - name: GetRawURL
    summary: GetRawURL returns the RawURL field if it's non-nil, zero value otherwise.
    description: |
      GetRawURL returns the RawURL field if it's non-nil, zero value otherwise.
    code: func (g *GistFile) GetRawURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2080
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (g *GistFile) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 2088
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (g *GistFile) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 2096
  - name: String
    summary: ""
    description: ""
    code: func (g GistFile) String() string
    source:
      file: /src/github/gists.go
      line: 52
  source:
    file: /src/github/gists.go
    line: 43
- name: GistFilename
  summary: GistFilename represents filename on a gist.
  description: |
    GistFilename represents filename on a gist.
  code: type GistFilename string
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/gists.go
    line: 40
- name: GistFork
  summary: GistFork represents a fork of a gist.
  description: |
    GistFork represents a fork of a gist.
  code: "type GistFork struct {\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tUser\t\t*User\t\t`json:\"user,omitempty\"`\n\tID\t\t*string\t\t`json:\"id,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t`json:\"updated_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (g *GistFork) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 2104
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (g *GistFork) GetID() string
    source:
      file: /src/github/github-accessors.go
      line: 2112
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (g *GistFork) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2128
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (g *GistFork) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 2120
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (g *GistFork) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 2136
  - name: String
    summary: ""
    description: ""
    code: func (gf GistFork) String() string
    source:
      file: /src/github/gists.go
      line: 78
  source:
    file: /src/github/gists.go
    line: 70
- name: GistListOptions
  summary: GistListOptions specifies the optional parameters to the GistsService.List,
    GistsService.ListAll, and GistsService.ListStarred methods.
  description: |
    GistListOptions specifies the optional parameters to the GistsService.List, GistsService.ListAll, and GistsService.ListStarred methods.
  code: "type GistListOptions struct {\n\t// Since filters Gists by time.\n\tSince\ttime.Time\t`url:\"since,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/gists.go
    line: 84
- name: GistStats
  summary: GistStats represents the number of total, private and public gists.
  description: |
    GistStats represents the number of total, private and public gists.
  code: "type GistStats struct {\n\tTotalGists\t*int\t`json:\"total_gists,omitempty\"`\n\tPrivateGists\t*int\t`json:\"private_gists,omitempty\"`\n\tPublicGists\t*int\t`json:\"public_gists,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetPrivateGists
    summary: GetPrivateGists returns the PrivateGists field if it's non-nil, zero
      value otherwise.
    description: |
      GetPrivateGists returns the PrivateGists field if it's non-nil, zero value otherwise.
    code: func (g *GistStats) GetPrivateGists() int
    source:
      file: /src/github/github-accessors.go
      line: 2144
  - name: GetPublicGists
    summary: GetPublicGists returns the PublicGists field if it's non-nil, zero value
      otherwise.
    description: |
      GetPublicGists returns the PublicGists field if it's non-nil, zero value otherwise.
    code: func (g *GistStats) GetPublicGists() int
    source:
      file: /src/github/github-accessors.go
      line: 2152
  - name: GetTotalGists
    summary: GetTotalGists returns the TotalGists field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalGists returns the TotalGists field if it's non-nil, zero value otherwise.
    code: func (g *GistStats) GetTotalGists() int
    source:
      file: /src/github/github-accessors.go
      line: 2160
  - name: String
    summary: ""
    description: ""
    code: func (s GistStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 118
  source:
    file: /src/github/admin_stats.go
    line: 112
- name: GistsService
  summary: GistsService handles communication with the Gist related methods of the
    GitHub API.
  description: |
    GistsService handles communication with the Gist related methods of the GitHub API.

    GitHub API docs: https://developer.github.com/v3/gists/
  code: type GistsService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Create
    summary: Create a gist for authenticated user.
    description: |
      Create a gist for authenticated user.

      GitHub API docs: https://developer.github.com/v3/gists/#create-a-gist
    code: func (s *GistsService) Create(ctx context.Context, gist *Gist) (*Gist, *Response,
      error)
    source:
      file: /src/github/gists.go
      line: 208
  - name: CreateComment
    summary: CreateComment creates a comment for a gist.
    description: |
      CreateComment creates a comment for a gist.

      GitHub API docs: https://developer.github.com/v3/gists/comments/#create-a-comment
    code: func (s *GistsService) CreateComment(ctx context.Context, gistID string,
      comment *GistComment) (*GistComment, *Response, error)
    source:
      file: /src/github/gists_comments.go
      line: 73
  - name: Delete
    summary: Delete a gist.
    description: |
      Delete a gist.

      GitHub API docs: https://developer.github.com/v3/gists/#delete-a-gist
    code: func (s *GistsService) Delete(ctx context.Context, id string) (*Response,
      error)
    source:
      file: /src/github/gists.go
      line: 268
  - name: DeleteComment
    summary: DeleteComment deletes a gist comment.
    description: |
      DeleteComment deletes a gist comment.

      GitHub API docs: https://developer.github.com/v3/gists/comments/#delete-a-comment
    code: func (s *GistsService) DeleteComment(ctx context.Context, gistID string,
      commentID int) (*Response, error)
    source:
      file: /src/github/gists_comments.go
      line: 111
  - name: Edit
    summary: Edit a gist.
    description: |
      Edit a gist.

      GitHub API docs: https://developer.github.com/v3/gists/#edit-a-gist
    code: func (s *GistsService) Edit(ctx context.Context, id string, gist *Gist)
      (*Gist, *Response, error)
    source:
      file: /src/github/gists.go
      line: 226
  - name: EditComment
    summary: EditComment edits an existing gist comment.
    description: |
      EditComment edits an existing gist comment.

      GitHub API docs: https://developer.github.com/v3/gists/comments/#edit-a-comment
    code: func (s *GistsService) EditComment(ctx context.Context, gistID string, commentID
      int, comment *GistComment) (*GistComment, *Response, error)
    source:
      file: /src/github/gists_comments.go
      line: 92
  - name: Fork
    summary: Fork a gist.
    description: |
      Fork a gist.

      GitHub API docs: https://developer.github.com/v3/gists/#fork-a-gist
    code: func (s *GistsService) Fork(ctx context.Context, id string) (*Gist, *Response,
      error)
    source:
      file: /src/github/gists.go
      line: 318
  - name: Get
    summary: Get a single gist.
    description: |
      Get a single gist.

      GitHub API docs: https://developer.github.com/v3/gists/#get-a-single-gist
    code: func (s *GistsService) Get(ctx context.Context, id string) (*Gist, *Response,
      error)
    source:
      file: /src/github/gists.go
      line: 172
  - name: GetComment
    summary: GetComment retrieves a single comment from a gist.
    description: |
      GetComment retrieves a single comment from a gist.

      GitHub API docs: https://developer.github.com/v3/gists/comments/#get-a-single-comment
    code: func (s *GistsService) GetComment(ctx context.Context, gistID string, commentID
      int) (*GistComment, *Response, error)
    source:
      file: /src/github/gists_comments.go
      line: 54
  - name: GetRevision
    summary: GetRevision gets a specific revision of a gist.
    description: |
      GetRevision gets a specific revision of a gist.

      GitHub API docs: https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist
    code: func (s *GistsService) GetRevision(ctx context.Context, id, sha string)
      (*Gist, *Response, error)
    source:
      file: /src/github/gists.go
      line: 190
  - name: IsStarred
    summary: IsStarred checks if a gist is starred by authenticated user.
    description: |
      IsStarred checks if a gist is starred by authenticated user.

      GitHub API docs: https://developer.github.com/v3/gists/#check-if-a-gist-is-starred
    code: func (s *GistsService) IsStarred(ctx context.Context, id string) (bool,
      *Response, error)
    source:
      file: /src/github/gists.go
      line: 304
  - name: List
    summary: List gists for a user.
    description: |
      List gists for a user. Passing the empty string will list all public gists if called anonymously. However, if the call is authenticated, it will returns all gists for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/gists/#list-gists
    code: func (s *GistsService) List(ctx context.Context, user string, opt *GistListOptions)
      ([]*Gist, *Response, error)
    source:
      file: /src/github/gists.go
      line: 97
  - name: ListAll
    summary: ListAll lists all public gists.
    description: |
      ListAll lists all public gists.

      GitHub API docs: https://developer.github.com/v3/gists/#list-gists
    code: func (s *GistsService) ListAll(ctx context.Context, opt *GistListOptions)
      ([]*Gist, *Response, error)
    source:
      file: /src/github/gists.go
      line: 126
  - name: ListComments
    summary: ListComments lists all comments for a gist.
    description: |
      ListComments lists all comments for a gist.

      GitHub API docs: https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist
    code: func (s *GistsService) ListComments(ctx context.Context, gistID string,
      opt *ListOptions) ([]*GistComment, *Response, error)
    source:
      file: /src/github/gists_comments.go
      line: 30
  - name: ListCommits
    summary: ListCommits lists commits of a gist.
    description: |
      ListCommits lists commits of a gist.

      GitHub API docs: https://developer.github.com/v3/gists/#list-gist-commits
    code: func (s *GistsService) ListCommits(ctx context.Context, id string, opt *ListOptions)
      ([]*GistCommit, *Response, error)
    source:
      file: /src/github/gists.go
      line: 244
  - name: ListForks
    summary: ListForks lists forks of a gist.
    description: |
      ListForks lists forks of a gist.

      GitHub API docs: https://developer.github.com/v3/gists/#list-gist-forks
    code: func (s *GistsService) ListForks(ctx context.Context, id string) ([]*GistFork,
      *Response, error)
    source:
      file: /src/github/gists.go
      line: 337
  - name: ListStarred
    summary: ListStarred lists starred gists of authenticated user.
    description: |
      ListStarred lists starred gists of authenticated user.

      GitHub API docs: https://developer.github.com/v3/gists/#list-gists
    code: func (s *GistsService) ListStarred(ctx context.Context, opt *GistListOptions)
      ([]*Gist, *Response, error)
    source:
      file: /src/github/gists.go
      line: 149
  - name: Star
    summary: Star a gist on behalf of authenticated user.
    description: |
      Star a gist on behalf of authenticated user.

      GitHub API docs: https://developer.github.com/v3/gists/#star-a-gist
    code: func (s *GistsService) Star(ctx context.Context, id string) (*Response,
      error)
    source:
      file: /src/github/gists.go
      line: 280
  - name: Unstar
    summary: Unstar a gist on a behalf of authenticated user.
    description: |
      Unstar a gist on a behalf of authenticated user.

      GitHub API docs: https://developer.github.com/v3/gists/#unstar-a-gist
    code: func (s *GistsService) Unstar(ctx context.Context, id string) (*Response,
      error)
    source:
      file: /src/github/gists.go
      line: 292
  source:
    file: /src/github/gists.go
    line: 18
- name: GitObject
  summary: GitObject represents a Git object.
  description: |
    GitObject represents a Git object.
  code: "type GitObject struct {\n\tType\t*string\t`json:\"type\"`\n\tSHA\t*string\t`json:\"sha\"`\n\tURL\t*string\t`json:\"url\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (g *GitObject) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 2184
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (g *GitObject) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 2192
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (g *GitObject) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2200
  - name: String
    summary: ""
    description: ""
    code: func (o GitObject) String() string
    source:
      file: /src/github/git_refs.go
      line: 34
  source:
    file: /src/github/git_refs.go
    line: 28
- name: GitService
  summary: GitService handles communication with the git data related methods of the
    GitHub API.
  description: |
    GitService handles communication with the git data related methods of the GitHub API.

    GitHub API docs: https://developer.github.com/v3/git/
  code: type GitService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: CreateBlob
    summary: CreateBlob creates a blob object.
    description: |
      CreateBlob creates a blob object.

      GitHub API docs: https://developer.github.com/v3/git/blobs/#create-a-blob
    code: func (s *GitService) CreateBlob(ctx context.Context, owner string, repo
      string, blob *Blob) (*Blob, *Response, error)
    source:
      file: /src/github/git_blobs.go
      line: 40
  - name: CreateCommit
    summary: CreateCommit creates a new commit in a repository.
    description: |
      CreateCommit creates a new commit in a repository. commit must not be nil.

      The commit.Committer is optional and will be filled with the commit.Author data if omitted. If the commit.Author is omitted, it will be filled in with the authenticated user’s information and the current date.

      GitHub API docs: https://developer.github.com/v3/git/commits/#create-a-commit
    code: func (s *GitService) CreateCommit(ctx context.Context, owner string, repo
      string, commit *Commit) (*Commit, *Response, error)
    source:
      file: /src/github/git_commits.go
      line: 99
  - name: CreateRef
    summary: CreateRef creates a new ref in a repository.
    description: |
      CreateRef creates a new ref in a repository.

      GitHub API docs: https://developer.github.com/v3/git/refs/#create-a-reference
    code: func (s *GitService) CreateRef(ctx context.Context, owner string, repo string,
      ref *Reference) (*Reference, *Response, error)
    source:
      file: /src/github/git_refs.go
      line: 162
  - name: CreateTag
    summary: CreateTag creates a tag object.
    description: |
      CreateTag creates a tag object.

      GitHub API docs: https://developer.github.com/v3/git/tags/#create-a-tag-object
    code: func (s *GitService) CreateTag(ctx context.Context, owner string, repo string,
      tag *Tag) (*Tag, *Response, error)
    source:
      file: /src/github/git_tags.go
      line: 56
  - name: CreateTree
    summary: CreateTree creates a new tree in a repository.
    description: |
      CreateTree creates a new tree in a repository. If both a tree and a nested path modifying that tree are specified, it will overwrite the contents of that tree with the new path contents and write a new tree out.

      GitHub API docs: https://developer.github.com/v3/git/trees/#create-a-tree
    code: func (s *GitService) CreateTree(ctx context.Context, owner string, repo
      string, baseTree string, entries []TreeEntry) (*Tree, *Response, error)
    source:
      file: /src/github/git_trees.go
      line: 74
  - name: DeleteRef
    summary: DeleteRef deletes a ref from a repository.
    description: |
      DeleteRef deletes a ref from a repository.

      GitHub API docs: https://developer.github.com/v3/git/refs/#delete-a-reference
    code: func (s *GitService) DeleteRef(ctx context.Context, owner string, repo string,
      ref string) (*Response, error)
    source:
      file: /src/github/git_refs.go
      line: 208
  - name: GetBlob
    summary: GetBlob fetchs a blob from a repo given a SHA.
    description: |
      GetBlob fetchs a blob from a repo given a SHA.

      GitHub API docs: https://developer.github.com/v3/git/blobs/#get-a-blob
    code: func (s *GitService) GetBlob(ctx context.Context, owner string, repo string,
      sha string) (*Blob, *Response, error)
    source:
      file: /src/github/git_blobs.go
      line: 25
  - name: GetCommit
    summary: GetCommit fetchs the Commit object for a given SHA.
    description: |
      GetCommit fetchs the Commit object for a given SHA.

      GitHub API docs: https://developer.github.com/v3/git/commits/#get-a-commit
    code: func (s *GitService) GetCommit(ctx context.Context, owner string, repo string,
      sha string) (*Commit, *Response, error)
    source:
      file: /src/github/git_commits.go
      line: 63
  - name: GetRef
    summary: GetRef fetches a single Reference object for a given Git ref.
    description: |
      GetRef fetches a single Reference object for a given Git ref. If there is no exact match, GetRef will return an error.

      Note: The GitHub API can return multiple matches. If you wish to use this functionality please use the GetRefs() method.

      GitHub API docs: https://developer.github.com/v3/git/refs/#get-a-reference
    code: func (s *GitService) GetRef(ctx context.Context, owner string, repo string,
      ref string) (*Reference, *Response, error)
    source:
      file: /src/github/git_refs.go
      line: 57
  - name: GetRefs
    summary: GetRefs fetches a slice of Reference objects for a given Git ref.
    description: |
      GetRefs fetches a slice of Reference objects for a given Git ref. If there is an exact match, only that ref is returned. If there is no exact match, GitHub returns all refs that start with ref. If returned error is nil, there will be at least 1 ref returned. For example:

          "heads/featureA" -> ["refs/heads/featureA"]                         // Exact match, single ref is returned.
          "heads/feature"  -> ["refs/heads/featureA", "refs/heads/featureB"]  // All refs that start with ref.
          "heads/notexist" -> []                                              // Returns an error.

      GitHub API docs: https://developer.github.com/v3/git/refs/#get-a-reference
    code: func (s *GitService) GetRefs(ctx context.Context, owner string, repo string,
      ref string) ([]*Reference, *Response, error)
    source:
      file: /src/github/git_refs.go
      line: 88
  - name: GetTag
    summary: GetTag fetchs a tag from a repo given a SHA.
    description: |
      GetTag fetchs a tag from a repo given a SHA.

      GitHub API docs: https://developer.github.com/v3/git/tags/#get-a-tag
    code: func (s *GitService) GetTag(ctx context.Context, owner string, repo string,
      sha string) (*Tag, *Response, error)
    source:
      file: /src/github/git_tags.go
      line: 38
  - name: GetTree
    summary: GetTree fetches the Tree object for a given sha hash from a repository.
    description: |
      GetTree fetches the Tree object for a given sha hash from a repository.

      GitHub API docs: https://developer.github.com/v3/git/trees/#get-a-tree
    code: func (s *GitService) GetTree(ctx context.Context, owner string, repo string,
      sha string, recursive bool) (*Tree, *Response, error)
    source:
      file: /src/github/git_trees.go
      line: 43
  - name: ListRefs
    summary: ListRefs lists all refs in a repository.
    description: |
      ListRefs lists all refs in a repository.

      GitHub API docs: https://developer.github.com/v3/git/refs/#get-all-references
    code: func (s *GitService) ListRefs(ctx context.Context, owner, repo string, opt
      *ReferenceListOptions) ([]*Reference, *Response, error)
    source:
      file: /src/github/git_refs.go
      line: 133
  - name: UpdateRef
    summary: UpdateRef updates an existing ref in a repository.
    description: |
      UpdateRef updates an existing ref in a repository.

      GitHub API docs: https://developer.github.com/v3/git/refs/#update-a-reference
    code: func (s *GitService) UpdateRef(ctx context.Context, owner string, repo string,
      ref *Reference, force bool) (*Reference, *Response, error)
    source:
      file: /src/github/git_refs.go
      line: 185
  source:
    file: /src/github/git.go
    line: 12
- name: Gitignore
  summary: Gitignore represents a .gitignore file as returned by the GitHub API.
  description: |
    Gitignore represents a .gitignore file as returned by the GitHub API.
  code: "type Gitignore struct {\n\tName\t*string\t`json:\"name,omitempty\"`\n\tSource\t*string\t`json:\"source,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (g *Gitignore) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 2168
  - name: GetSource
    summary: GetSource returns the Source field if it's non-nil, zero value otherwise.
    description: |
      GetSource returns the Source field if it's non-nil, zero value otherwise.
    code: func (g *Gitignore) GetSource() string
    source:
      file: /src/github/github-accessors.go
      line: 2176
  - name: String
    summary: ""
    description: ""
    code: func (g Gitignore) String() string
    source:
      file: /src/github/gitignore.go
      line: 25
  source:
    file: /src/github/gitignore.go
    line: 20
- name: GitignoresService
  summary: GitignoresService provides access to the gitignore related functions in
    the GitHub API.
  description: |
    GitignoresService provides access to the gitignore related functions in the GitHub API.

    GitHub API docs: https://developer.github.com/v3/gitignore/
  code: type GitignoresService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Get
    summary: Get a Gitignore by name.
    description: |
      Get a Gitignore by name.

      GitHub API docs: https://developer.github.com/v3/gitignore/#get-a-single-template
    code: func (s GitignoresService) Get(ctx context.Context, name string) (*Gitignore,
      *Response, error)
    source:
      file: /src/github/gitignore.go
      line: 50
  - name: List
    summary: List all available Gitignore templates.
    description: |
      List all available Gitignore templates.

      GitHub API docs: https://developer.github.com/v3/gitignore/#listing-available-templates
    code: func (s GitignoresService) List(ctx context.Context) ([]string, *Response,
      error)
    source:
      file: /src/github/gitignore.go
      line: 32
  source:
    file: /src/github/gitignore.go
    line: 17
- name: GollumEvent
  summary: GollumEvent is triggered when a Wiki page is created or updated.
  description: |
    GollumEvent is triggered when a Wiki page is created or updated. The Webhook event name is "gollum".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#gollumevent
  code: "type GollumEvent struct {\n\tPages\t[]*Page\t`json:\"pages,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (g *GollumEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 2208
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (g *GollumEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 2216
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (g *GollumEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 2224
  source:
    file: /src/github/event_types.go
    line: 124
- name: Grant
  summary: Grant represents an OAuth application that has been granted access to an
    account.
  description: |
    Grant represents an OAuth application that has been granted access to an account.
  code: "type Grant struct {\n\tID\t\t*int\t\t\t`json:\"id,omitempty\"`\n\tURL\t\t*string\t\t\t`json:\"url,omitempty\"`\n\tApp\t\t*AuthorizationApp\t`json:\"app,omitempty\"`\n\tCreatedAt\t*Timestamp\t\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t\t`json:\"updated_at,omitempty\"`\n\tScopes\t\t[]string\t\t`json:\"scopes,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetApp
    summary: GetApp returns the App field.
    description: |
      GetApp returns the App field.
    code: func (g *Grant) GetApp() *AuthorizationApp
    source:
      file: /src/github/github-accessors.go
      line: 2328
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (g *Grant) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 2336
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (g *Grant) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 2344
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (g *Grant) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2360
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (g *Grant) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 2352
  - name: String
    summary: ""
    description: ""
    code: func (g Grant) String() string
    source:
      file: /src/github/authorizations.go
      line: 99
  source:
    file: /src/github/authorizations.go
    line: 90
- name: Hook
  summary: Hook represents a GitHub (web and service) hook for a repository.
  description: |
    Hook represents a GitHub (web and service) hook for a repository.
  code: "type Hook struct {\n\tCreatedAt\t*time.Time\t\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*time.Time\t\t`json:\"updated_at,omitempty\"`\n\tName\t\t*string\t\t\t`json:\"name,omitempty\"`\n\tURL\t\t*string\t\t\t`json:\"url,omitempty\"`\n\tEvents\t\t[]string\t\t`json:\"events,omitempty\"`\n\tActive\t\t*bool\t\t\t`json:\"active,omitempty\"`\n\tConfig\t\tmap[string]interface{}\t`json:\"config,omitempty\"`\n\tID\t\t*int\t\t\t`json:\"id,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetActive
    summary: GetActive returns the Active field if it's non-nil, zero value otherwise.
    description: |
      GetActive returns the Active field if it's non-nil, zero value otherwise.
    code: func (h *Hook) GetActive() bool
    source:
      file: /src/github/github-accessors.go
      line: 2368
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (h *Hook) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2376
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (h *Hook) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 2384
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (h *Hook) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 2392
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (h *Hook) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2408
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (h *Hook) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2400
  - name: String
    summary: ""
    description: ""
    code: func (h Hook) String() string
    source:
      file: /src/github/repos_hooks.go
      line: 82
  source:
    file: /src/github/repos_hooks.go
    line: 71
- name: HookStats
  summary: HookStats represents the number of total, active and inactive hooks.
  description: |
    HookStats represents the number of total, active and inactive hooks.
  code: "type HookStats struct {\n\tTotalHooks\t*int\t`json:\"total_hooks,omitempty\"`\n\tActiveHooks\t*int\t`json:\"active_hooks,omitempty\"`\n\tInactiveHooks\t*int\t`json:\"inactive_hooks,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetActiveHooks
    summary: GetActiveHooks returns the ActiveHooks field if it's non-nil, zero value
      otherwise.
    description: |
      GetActiveHooks returns the ActiveHooks field if it's non-nil, zero value otherwise.
    code: func (h *HookStats) GetActiveHooks() int
    source:
      file: /src/github/github-accessors.go
      line: 2416
  - name: GetInactiveHooks
    summary: GetInactiveHooks returns the InactiveHooks field if it's non-nil, zero
      value otherwise.
    description: |
      GetInactiveHooks returns the InactiveHooks field if it's non-nil, zero value otherwise.
    code: func (h *HookStats) GetInactiveHooks() int
    source:
      file: /src/github/github-accessors.go
      line: 2424
  - name: GetTotalHooks
    summary: GetTotalHooks returns the TotalHooks field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalHooks returns the TotalHooks field if it's non-nil, zero value otherwise.
    code: func (h *HookStats) GetTotalHooks() int
    source:
      file: /src/github/github-accessors.go
      line: 2432
  - name: String
    summary: ""
    description: ""
    code: func (s HookStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 50
  source:
    file: /src/github/admin_stats.go
    line: 44
- name: Import
  summary: Import represents a repository import request.
  description: |
    Import represents a repository import request.
  code: "type Import struct {\n\t// The URL of the originating repository.\n\tVCSURL\t*string\t`json:\"vcs_url,omitempty\"`\n\t//
    The originating VCS type. Can be one of 'subversion', 'git',\n\t// 'mercurial',
    or 'tfvc'. Without this parameter, the import job will\n\t// take additional time
    to detect the VCS type before beginning the\n\t// import. This detection step
    will be reflected in the response.\n\tVCS\t*string\t`json:\"vcs,omitempty\"`\n\t//
    VCSUsername and VCSPassword are only used for StartImport calls that\n\t// are
    importing a password-protected repository.\n\tVCSUsername\t*string\t`json:\"vcs_username,omitempty\"`\n\tVCSPassword\t*string\t`json:\"vcs_password,omitempty\"`\n\t//
    For a tfvc import, the name of the project that is being imported.\n\tTFVCProject\t*string\t`json:\"tfvc_project,omitempty\"`\n\n\t//
    Describes whether the import has been opted in or out of using Git\n\t// LFS.
    The value can be 'opt_in', 'opt_out', or 'undecided' if no\n\t// action has been
    taken.\n\tUseLFS\t*string\t`json:\"use_lfs,omitempty\"`\n\t// Describes whether
    files larger than 100MB were found during the\n\t// importing step.\n\tHasLargeFiles\t*bool\t`json:\"has_large_files,omitempty\"`\n\t//
    The total size in gigabytes of files larger than 100MB found in the\n\t// originating
    repository.\n\tLargeFilesSize\t*int\t`json:\"large_files_size,omitempty\"`\n\t//
    The total number of files larger than 100MB found in the originating\n\t// repository.
    To see a list of these files, call LargeFiles.\n\tLargeFilesCount\t*int\t`json:\"large_files_count,omitempty\"`\n\n\t//
    Identifies the current status of an import. An import that does not\n\t// have
    errors will progress through these steps:\n\t//\n\t//     detecting - the \"detection\"
    step of the import is in progress\n\t//         because the request did not include
    a VCS parameter. The\n\t//         import is identifying the type of source control
    present at\n\t//         the URL.\n\t//     importing - the \"raw\" step of the
    import is in progress. This is\n\t//         where commit data is fetched from
    the original repository.\n\t//         The import progress response will include
    CommitCount (the\n\t//         total number of raw commits that will be imported)
    and\n\t//         Percent (0 - 100, the current progress through the import).\n\t//
    \    mapping - the \"rewrite\" step of the import is in progress. This\n\t//         is
    where SVN branches are converted to Git branches, and\n\t//         where author
    updates are applied. The import progress\n\t//         response does not include
    progress information.\n\t//     pushing - the \"push\" step of the import is in
    progress. This is\n\t//         where the importer updates the repository on GitHub.
    The\n\t//         import progress response will include PushPercent, which is\n\t//
    \        the percent value reported by git push when it is \"Writing\n\t//         objects\".\n\t//
    \    complete - the import is complete, and the repository is ready\n\t//         on
    GitHub.\n\t//\n\t// If there are problems, you will see one of these in the status
    field:\n\t//\n\t//     auth_failed - the import requires authentication in order
    to\n\t//         connect to the original repository. Make an UpdateImport\n\t//
    \        request, and include VCSUsername and VCSPassword.\n\t//     error - the
    import encountered an error. The import progress\n\t//         response will include
    the FailedStep and an error message.\n\t//         Contact GitHub support for
    more information.\n\t//     detection_needs_auth - the importer requires authentication
    for\n\t//         the originating repository to continue detection. Make an\n\t//
    \        UpdatImport request, and include VCSUsername and\n\t//         VCSPassword.\n\t//
    \    detection_found_nothing - the importer didn't recognize any\n\t//         source
    control at the URL.\n\t//     detection_found_multiple - the importer found several
    projects\n\t//         or repositories at the provided URL. When this is the case,\n\t//
    \        the Import Progress response will also include a\n\t//         ProjectChoices
    field with the possible project choices as\n\t//         values. Make an UpdateImport
    request, and include VCS and\n\t//         (if applicable) TFVCProject.\n\tStatus\t\t*string\t`json:\"status,omitempty\"`\n\tCommitCount\t*int\t`json:\"commit_count,omitempty\"`\n\tStatusText\t*string\t`json:\"status_text,omitempty\"`\n\tAuthorsCount\t*int\t`json:\"authors_count,omitempty\"`\n\tPercent\t\t*int\t`json:\"percent,omitempty\"`\n\tPushPercent\t*int\t`json:\"push_percent,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t*string\t`json:\"html_url,omitempty\"`\n\tAuthorsURL\t*string\t`json:\"authors_url,omitempty\"`\n\tRepositoryURL\t*string\t`json:\"repository_url,omitempty\"`\n\tMessage\t\t*string\t`json:\"message,omitempty\"`\n\tFailedStep\t*string\t`json:\"failed_step,omitempty\"`\n\n\t//
    Human readable display name, provided when the Import appears as\n\t// part of
    ProjectChoices.\n\tHumanName\t*string\t`json:\"human_name,omitempty\"`\n\n\t//
    When the importer finds several projects or repositories at the\n\t// provided
    URLs, this will identify the available choices. Call\n\t// UpdateImport with the
    selected Import value.\n\tProjectChoices\t[]Import\t`json:\"project_choices,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAuthorsCount
    summary: GetAuthorsCount returns the AuthorsCount field if it's non-nil, zero
      value otherwise.
    description: |
      GetAuthorsCount returns the AuthorsCount field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetAuthorsCount() int
    source:
      file: /src/github/github-accessors.go
      line: 2440
  - name: GetAuthorsURL
    summary: GetAuthorsURL returns the AuthorsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetAuthorsURL returns the AuthorsURL field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetAuthorsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2448
  - name: GetCommitCount
    summary: GetCommitCount returns the CommitCount field if it's non-nil, zero value
      otherwise.
    description: |
      GetCommitCount returns the CommitCount field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetCommitCount() int
    source:
      file: /src/github/github-accessors.go
      line: 2456
  - name: GetFailedStep
    summary: GetFailedStep returns the FailedStep field if it's non-nil, zero value
      otherwise.
    description: |
      GetFailedStep returns the FailedStep field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetFailedStep() string
    source:
      file: /src/github/github-accessors.go
      line: 2464
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2480
  - name: GetHasLargeFiles
    summary: GetHasLargeFiles returns the HasLargeFiles field if it's non-nil, zero
      value otherwise.
    description: |
      GetHasLargeFiles returns the HasLargeFiles field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetHasLargeFiles() bool
    source:
      file: /src/github/github-accessors.go
      line: 2472
  - name: GetHumanName
    summary: GetHumanName returns the HumanName field if it's non-nil, zero value
      otherwise.
    description: |
      GetHumanName returns the HumanName field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetHumanName() string
    source:
      file: /src/github/github-accessors.go
      line: 2488
  - name: GetLargeFilesCount
    summary: GetLargeFilesCount returns the LargeFilesCount field if it's non-nil,
      zero value otherwise.
    description: |
      GetLargeFilesCount returns the LargeFilesCount field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetLargeFilesCount() int
    source:
      file: /src/github/github-accessors.go
      line: 2496
  - name: GetLargeFilesSize
    summary: GetLargeFilesSize returns the LargeFilesSize field if it's non-nil, zero
      value otherwise.
    description: |
      GetLargeFilesSize returns the LargeFilesSize field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetLargeFilesSize() int
    source:
      file: /src/github/github-accessors.go
      line: 2504
  - name: GetMessage
    summary: GetMessage returns the Message field if it's non-nil, zero value otherwise.
    description: |
      GetMessage returns the Message field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 2512
  - name: GetPercent
    summary: GetPercent returns the Percent field if it's non-nil, zero value otherwise.
    description: |
      GetPercent returns the Percent field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetPercent() int
    source:
      file: /src/github/github-accessors.go
      line: 2520
  - name: GetPushPercent
    summary: GetPushPercent returns the PushPercent field if it's non-nil, zero value
      otherwise.
    description: |
      GetPushPercent returns the PushPercent field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetPushPercent() int
    source:
      file: /src/github/github-accessors.go
      line: 2528
  - name: GetRepositoryURL
    summary: GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetRepositoryURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2536
  - name: GetStatus
    summary: GetStatus returns the Status field if it's non-nil, zero value otherwise.
    description: |
      GetStatus returns the Status field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetStatus() string
    source:
      file: /src/github/github-accessors.go
      line: 2544
  - name: GetStatusText
    summary: GetStatusText returns the StatusText field if it's non-nil, zero value
      otherwise.
    description: |
      GetStatusText returns the StatusText field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetStatusText() string
    source:
      file: /src/github/github-accessors.go
      line: 2552
  - name: GetTFVCProject
    summary: GetTFVCProject returns the TFVCProject field if it's non-nil, zero value
      otherwise.
    description: |
      GetTFVCProject returns the TFVCProject field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetTFVCProject() string
    source:
      file: /src/github/github-accessors.go
      line: 2560
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2568
  - name: GetUseLFS
    summary: GetUseLFS returns the UseLFS field if it's non-nil, zero value otherwise.
    description: |
      GetUseLFS returns the UseLFS field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetUseLFS() string
    source:
      file: /src/github/github-accessors.go
      line: 2576
  - name: GetVCS
    summary: GetVCS returns the VCS field if it's non-nil, zero value otherwise.
    description: |
      GetVCS returns the VCS field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetVCS() string
    source:
      file: /src/github/github-accessors.go
      line: 2584
  - name: GetVCSPassword
    summary: GetVCSPassword returns the VCSPassword field if it's non-nil, zero value
      otherwise.
    description: |
      GetVCSPassword returns the VCSPassword field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetVCSPassword() string
    source:
      file: /src/github/github-accessors.go
      line: 2592
  - name: GetVCSURL
    summary: GetVCSURL returns the VCSURL field if it's non-nil, zero value otherwise.
    description: |
      GetVCSURL returns the VCSURL field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetVCSURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2600
  - name: GetVCSUsername
    summary: GetVCSUsername returns the VCSUsername field if it's non-nil, zero value
      otherwise.
    description: |
      GetVCSUsername returns the VCSUsername field if it's non-nil, zero value otherwise.
    code: func (i *Import) GetVCSUsername() string
    source:
      file: /src/github/github-accessors.go
      line: 2608
  - name: String
    summary: ""
    description: ""
    code: func (i Import) String() string
    source:
      file: /src/github/migrations_source_import.go
      line: 112
  source:
    file: /src/github/migrations_source_import.go
    line: 14
- name: Installation
  summary: Installation represents a GitHub Apps installation.
  description: |
    Installation represents a GitHub Apps installation.
  code: "type Installation struct {\n\tID\t\t*int\t`json:\"id,omitempty\"`\n\tAccount\t\t*User\t`json:\"account,omitempty\"`\n\tAccessTokensURL\t*string\t`json:\"access_tokens_url,omitempty\"`\n\tRepositoriesURL\t*string\t`json:\"repositories_url,omitempty\"`\n\tHTMLURL\t\t*string\t`json:\"html_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAccessTokensURL
    summary: GetAccessTokensURL returns the AccessTokensURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetAccessTokensURL returns the AccessTokensURL field if it's non-nil, zero value otherwise.
    code: func (i *Installation) GetAccessTokensURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2616
  - name: GetAccount
    summary: GetAccount returns the Account field.
    description: |
      GetAccount returns the Account field.
    code: func (i *Installation) GetAccount() *User
    source:
      file: /src/github/github-accessors.go
      line: 2624
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (i *Installation) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2632
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (i *Installation) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 2640
  - name: GetRepositoriesURL
    summary: GetRepositoriesURL returns the RepositoriesURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetRepositoriesURL returns the RepositoriesURL field if it's non-nil, zero value otherwise.
    code: func (i *Installation) GetRepositoriesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2648
  - name: String
    summary: ""
    description: ""
    code: func (i Installation) String() string
    source:
      file: /src/github/apps_installation.go
      line: 22
  source:
    file: /src/github/apps_installation.go
    line: 14
- name: InstallationEvent
  summary: InstallationEvent is triggered when a GitHub App has been installed or
    uninstalled.
  description: |
    InstallationEvent is triggered when a GitHub App has been installed or uninstalled. The Webhook event name is "installation".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#installationevent
  code: "type InstallationEvent struct {\n\t// The action that was performed. Can
    be either \"created\" or \"deleted\".\n\tAction\t\t*string\t\t`json:\"action,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (i *InstallationEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 2656
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (i *InstallationEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 2664
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (i *InstallationEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 2672
  source:
    file: /src/github/event_types.go
    line: 194
- name: InstallationRepositoriesEvent
  summary: InstallationRepositoriesEvent is triggered when a repository is added or
    removed from an installation.
  description: |
    InstallationRepositoriesEvent is triggered when a repository is added or removed from an installation. The Webhook event name is "installation_repositories".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#installationrepositoriesevent
  code: "type InstallationRepositoriesEvent struct {\n\t// The action that was performed.
    Can be either \"added\" or \"removed\".\n\tAction\t\t\t*string\t\t`json:\"action,omitempty\"`\n\tRepositoriesAdded\t[]*Repository\t`json:\"repositories_added,omitempty\"`\n\tRepositoriesRemoved\t[]*Repository\t`json:\"repositories_removed,omitempty\"`\n\tRepositorySelection\t*string\t\t`json:\"repository_selection,omitempty\"`\n\tSender\t\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (i *InstallationRepositoriesEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 2680
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (i *InstallationRepositoriesEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 2688
  - name: GetRepositorySelection
    summary: GetRepositorySelection returns the RepositorySelection field if it's
      non-nil, zero value otherwise.
    description: |
      GetRepositorySelection returns the RepositorySelection field if it's non-nil, zero value otherwise.
    code: func (i *InstallationRepositoriesEvent) GetRepositorySelection() string
    source:
      file: /src/github/github-accessors.go
      line: 2696
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (i *InstallationRepositoriesEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 2704
  source:
    file: /src/github/event_types.go
    line: 205
- name: InstallationToken
  summary: InstallationToken represents an installation token.
  description: |
    InstallationToken represents an installation token.
  code: "type InstallationToken struct {\n\tToken\t\t*string\t\t`json:\"token,omitempty\"`\n\tExpiresAt\t*time.Time\t`json:\"expires_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetExpiresAt
    summary: GetExpiresAt returns the ExpiresAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetExpiresAt returns the ExpiresAt field if it's non-nil, zero value otherwise.
    code: func (i *InstallationToken) GetExpiresAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2712
  - name: GetToken
    summary: GetToken returns the Token field if it's non-nil, zero value otherwise.
    description: |
      GetToken returns the Token field if it's non-nil, zero value otherwise.
    code: func (i *InstallationToken) GetToken() string
    source:
      file: /src/github/github-accessors.go
      line: 2720
  source:
    file: /src/github/apps.go
    line: 33
- name: Invitation
  summary: Invitation represents a team member's invitation status.
  description: |
    Invitation represents a team member's invitation status.
  code: "type Invitation struct {\n\tID\t*int\t`json:\"id,omitempty\"`\n\tLogin\t*string\t`json:\"login,omitempty\"`\n\tEmail\t*string\t`json:\"email,omitempty\"`\n\t//
    Role can be one of the values - 'direct_member', 'admin', 'billing_manager', 'hiring_manager',
    or 'reinstate'.\n\tRole\t\t*string\t\t`json:\"role,omitempty\"`\n\tCreatedAt\t*time.Time\t`json:\"created_at,omitempty\"`\n\tInviter\t\t*User\t\t`json:\"inviter,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (i *Invitation) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2728
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (i *Invitation) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 2736
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (i *Invitation) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 2744
  - name: GetInviter
    summary: GetInviter returns the Inviter field.
    description: |
      GetInviter returns the Inviter field.
    code: func (i *Invitation) GetInviter() *User
    source:
      file: /src/github/github-accessors.go
      line: 2752
  - name: GetLogin
    summary: GetLogin returns the Login field if it's non-nil, zero value otherwise.
    description: |
      GetLogin returns the Login field if it's non-nil, zero value otherwise.
    code: func (i *Invitation) GetLogin() string
    source:
      file: /src/github/github-accessors.go
      line: 2760
  - name: GetRole
    summary: GetRole returns the Role field if it's non-nil, zero value otherwise.
    description: |
      GetRole returns the Role field if it's non-nil, zero value otherwise.
    code: func (i *Invitation) GetRole() string
    source:
      file: /src/github/github-accessors.go
      line: 2768
  - name: String
    summary: ""
    description: ""
    code: func (i Invitation) String() string
    source:
      file: /src/github/orgs_teams.go
      line: 61
  source:
    file: /src/github/orgs_teams.go
    line: 51
- name: Issue
  summary: Issue represents a GitHub issue on a repository.
  description: |
    Issue represents a GitHub issue on a repository.

    Note: As far as the GitHub API is concerned, every pull request is an issue, but not every issue is a pull request. Some endpoints, events, and webhooks may also return pull requests via this struct. If PullRequestLinks is nil, this is an issue, and if PullRequestLinks is not nil, this is a pull request. The IsPullRequest helper method can be used to check that.
  code: "type Issue struct {\n\tID\t\t\t*int\t\t\t`json:\"id,omitempty\"`\n\tNumber\t\t\t*int\t\t\t`json:\"number,omitempty\"`\n\tState\t\t\t*string\t\t\t`json:\"state,omitempty\"`\n\tLocked\t\t\t*bool\t\t\t`json:\"locked,omitempty\"`\n\tTitle\t\t\t*string\t\t\t`json:\"title,omitempty\"`\n\tBody\t\t\t*string\t\t\t`json:\"body,omitempty\"`\n\tUser\t\t\t*User\t\t\t`json:\"user,omitempty\"`\n\tLabels\t\t\t[]Label\t\t\t`json:\"labels,omitempty\"`\n\tAssignee\t\t*User\t\t\t`json:\"assignee,omitempty\"`\n\tComments\t\t*int\t\t\t`json:\"comments,omitempty\"`\n\tClosedAt\t\t*time.Time\t\t`json:\"closed_at,omitempty\"`\n\tCreatedAt\t\t*time.Time\t\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t\t*time.Time\t\t`json:\"updated_at,omitempty\"`\n\tClosedBy\t\t*User\t\t\t`json:\"closed_by,omitempty\"`\n\tURL\t\t\t*string\t\t\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t\t*string\t\t\t`json:\"html_url,omitempty\"`\n\tCommentsURL\t\t*string\t\t\t`json:\"comments_url,omitempty\"`\n\tEventsURL\t\t*string\t\t\t`json:\"events_url,omitempty\"`\n\tLabelsURL\t\t*string\t\t\t`json:\"labels_url,omitempty\"`\n\tRepositoryURL\t\t*string\t\t\t`json:\"repository_url,omitempty\"`\n\tMilestone\t\t*Milestone\t\t`json:\"milestone,omitempty\"`\n\tPullRequestLinks\t*PullRequestLinks\t`json:\"pull_request,omitempty\"`\n\tRepository\t\t*Repository\t\t`json:\"repository,omitempty\"`\n\tReactions\t\t*Reactions\t\t`json:\"reactions,omitempty\"`\n\tAssignees\t\t[]*User\t\t\t`json:\"assignees,omitempty\"`\n\n\t//
    TextMatches is only populated from search results that request text matches\n\t//
    See: search.go and https://developer.github.com/v3/search/#text-match-metadata\n\tTextMatches\t[]TextMatch\t`json:\"text_matches,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAssignee
    summary: GetAssignee returns the Assignee field.
    description: |
      GetAssignee returns the Assignee field.
    code: func (i *Issue) GetAssignee() *User
    source:
      file: /src/github/github-accessors.go
      line: 2776
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 2784
  - name: GetClosedAt
    summary: GetClosedAt returns the ClosedAt field if it's non-nil, zero value otherwise.
    description: |
      GetClosedAt returns the ClosedAt field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetClosedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2792
  - name: GetClosedBy
    summary: GetClosedBy returns the ClosedBy field.
    description: |
      GetClosedBy returns the ClosedBy field.
    code: func (i *Issue) GetClosedBy() *User
    source:
      file: /src/github/github-accessors.go
      line: 2800
  - name: GetComments
    summary: GetComments returns the Comments field if it's non-nil, zero value otherwise.
    description: |
      GetComments returns the Comments field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetComments() int
    source:
      file: /src/github/github-accessors.go
      line: 2808
  - name: GetCommentsURL
    summary: GetCommentsURL returns the CommentsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetCommentsURL returns the CommentsURL field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetCommentsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2816
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2824
  - name: GetEventsURL
    summary: GetEventsURL returns the EventsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetEventsURL returns the EventsURL field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2832
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2840
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 2848
  - name: GetLabelsURL
    summary: GetLabelsURL returns the LabelsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetLabelsURL returns the LabelsURL field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetLabelsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2856
  - name: GetLocked
    summary: GetLocked returns the Locked field if it's non-nil, zero value otherwise.
    description: |
      GetLocked returns the Locked field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetLocked() bool
    source:
      file: /src/github/github-accessors.go
      line: 2864
  - name: GetMilestone
    summary: GetMilestone returns the Milestone field.
    description: |
      GetMilestone returns the Milestone field.
    code: func (i *Issue) GetMilestone() *Milestone
    source:
      file: /src/github/github-accessors.go
      line: 2872
  - name: GetNumber
    summary: GetNumber returns the Number field if it's non-nil, zero value otherwise.
    description: |
      GetNumber returns the Number field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetNumber() int
    source:
      file: /src/github/github-accessors.go
      line: 2880
  - name: GetPullRequestLinks
    summary: GetPullRequestLinks returns the PullRequestLinks field.
    description: |
      GetPullRequestLinks returns the PullRequestLinks field.
    code: func (i *Issue) GetPullRequestLinks() *PullRequestLinks
    source:
      file: /src/github/github-accessors.go
      line: 2888
  - name: GetReactions
    summary: GetReactions returns the Reactions field.
    description: |
      GetReactions returns the Reactions field.
    code: func (i *Issue) GetReactions() *Reactions
    source:
      file: /src/github/github-accessors.go
      line: 2896
  - name: GetRepository
    summary: GetRepository returns the Repository field.
    description: |
      GetRepository returns the Repository field.
    code: func (i *Issue) GetRepository() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 2904
  - name: GetRepositoryURL
    summary: GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetRepositoryURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2912
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 2920
  - name: GetTitle
    summary: GetTitle returns the Title field if it's non-nil, zero value otherwise.
    description: |
      GetTitle returns the Title field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetTitle() string
    source:
      file: /src/github/github-accessors.go
      line: 2928
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2944
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (i *Issue) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2936
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (i *Issue) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 2952
  - name: IsPullRequest
    summary: IsPullRequest reports whether the issue is also a pull request.
    description: |
      IsPullRequest reports whether the issue is also a pull request. It uses the method recommended by GitHub's API documentation, which is to check whether PullRequestLinks is non-nil.
    code: func (i Issue) IsPullRequest() bool
    source:
      file: /src/github/issues.go
      line: 66
  - name: String
    summary: ""
    description: ""
    code: func (i Issue) String() string
    source:
      file: /src/github/issues.go
      line: 59
  source:
    file: /src/github/issues.go
    line: 27
- name: IssueComment
  summary: IssueComment represents a comment left on an issue.
  description: |
    IssueComment represents a comment left on an issue.
  code: "type IssueComment struct {\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tBody\t\t*string\t\t`json:\"body,omitempty\"`\n\tUser\t\t*User\t\t`json:\"user,omitempty\"`\n\tReactions\t*Reactions\t`json:\"reactions,omitempty\"`\n\tCreatedAt\t*time.Time\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*time.Time\t`json:\"updated_at,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tIssueURL\t*string\t\t`json:\"issue_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (i *IssueComment) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 2960
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (i *IssueComment) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 2968
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (i *IssueComment) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2976
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (i *IssueComment) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 2984
  - name: GetIssueURL
    summary: GetIssueURL returns the IssueURL field if it's non-nil, zero value otherwise.
    description: |
      GetIssueURL returns the IssueURL field if it's non-nil, zero value otherwise.
    code: func (i *IssueComment) GetIssueURL() string
    source:
      file: /src/github/github-accessors.go
      line: 2992
  - name: GetReactions
    summary: GetReactions returns the Reactions field.
    description: |
      GetReactions returns the Reactions field.
    code: func (i *IssueComment) GetReactions() *Reactions
    source:
      file: /src/github/github-accessors.go
      line: 3000
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (i *IssueComment) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3016
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (i *IssueComment) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 3008
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (i *IssueComment) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 3024
  - name: String
    summary: ""
    description: ""
    code: func (i IssueComment) String() string
    source:
      file: /src/github/issues_comments.go
      line: 27
  source:
    file: /src/github/issues_comments.go
    line: 15
- name: IssueCommentEvent
  summary: IssueCommentEvent is triggered when an issue comment is created on an issue
    or pull request.
  description: |
    IssueCommentEvent is triggered when an issue comment is created on an issue or pull request. The Webhook event name is "issue_comment".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#issuecommentevent
  code: "type IssueCommentEvent struct {\n\t// Action is the action that was performed
    on the comment.\n\t// Possible values are: \"created\", \"edited\", \"deleted\".\n\tAction\t*string\t\t`json:\"action,omitempty\"`\n\tIssue\t*Issue\t\t`json:\"issue,omitempty\"`\n\tComment\t*IssueComment\t`json:\"comment,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tChanges\t\t*EditChange\t`json:\"changes,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (i *IssueCommentEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 3032
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (i *IssueCommentEvent) GetChanges() *EditChange
    source:
      file: /src/github/github-accessors.go
      line: 3040
  - name: GetComment
    summary: GetComment returns the Comment field.
    description: |
      GetComment returns the Comment field.
    code: func (i *IssueCommentEvent) GetComment() *IssueComment
    source:
      file: /src/github/github-accessors.go
      line: 3048
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (i *IssueCommentEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 3056
  - name: GetIssue
    summary: GetIssue returns the Issue field.
    description: |
      GetIssue returns the Issue field.
    code: func (i *IssueCommentEvent) GetIssue() *Issue
    source:
      file: /src/github/github-accessors.go
      line: 3064
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (i *IssueCommentEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 3072
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (i *IssueCommentEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 3080
  source:
    file: /src/github/event_types.go
    line: 220
- name: IssueEvent
  summary: IssueEvent represents an event that occurred around an Issue or Pull Request.
  description: |
    IssueEvent represents an event that occurred around an Issue or Pull Request.
  code: "type IssueEvent struct {\n\tID\t*int\t`json:\"id,omitempty\"`\n\tURL\t*string\t`json:\"url,omitempty\"`\n\n\t//
    The User that generated this event.\n\tActor\t*User\t`json:\"actor,omitempty\"`\n\n\t//
    Event identifies the actual type of Event that occurred. Possible\n\t// values
    are:\n\t//\n\t//     closed\n\t//       The Actor closed the issue.\n\t//       If
    the issue was closed by commit message, CommitID holds the SHA1 hash of the commit.\n\t//\n\t//
    \    merged\n\t//       The Actor merged into master a branch containing a commit
    mentioning the issue.\n\t//       CommitID holds the SHA1 of the merge commit.\n\t//\n\t//
    \    referenced\n\t//       The Actor committed to master a commit mentioning
    the issue in its commit message.\n\t//       CommitID holds the SHA1 of the commit.\n\t//\n\t//
    \    reopened, locked, unlocked\n\t//       The Actor did that to the issue.\n\t//\n\t//
    \    renamed\n\t//       The Actor changed the issue title from Rename.From to
    Rename.To.\n\t//\n\t//     mentioned\n\t//       Someone unspecified @mentioned
    the Actor [sic] in an issue comment body.\n\t//\n\t//     assigned, unassigned\n\t//
    \      The Assigner assigned the issue to or removed the assignment from the Assignee.\n\t//\n\t//
    \    labeled, unlabeled\n\t//       The Actor added or removed the Label from
    the issue.\n\t//\n\t//     milestoned, demilestoned\n\t//       The Actor added
    or removed the issue from the Milestone.\n\t//\n\t//     subscribed, unsubscribed\n\t//
    \      The Actor subscribed to or unsubscribed from notifications for an issue.\n\t//\n\t//
    \    head_ref_deleted, head_ref_restored\n\t//       The pull request’s branch
    was deleted or restored.\n\t//\n\tEvent\t*string\t`json:\"event,omitempty\"`\n\n\tCreatedAt\t*time.Time\t`json:\"created_at,omitempty\"`\n\tIssue\t\t*Issue\t\t`json:\"issue,omitempty\"`\n\n\t//
    Only present on certain events; see above.\n\tAssignee\t*User\t\t`json:\"assignee,omitempty\"`\n\tAssigner\t*User\t\t`json:\"assigner,omitempty\"`\n\tCommitID\t*string\t\t`json:\"commit_id,omitempty\"`\n\tMilestone\t*Milestone\t`json:\"milestone,omitempty\"`\n\tLabel\t\t*Label\t\t`json:\"label,omitempty\"`\n\tRename\t\t*Rename\t\t`json:\"rename,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetActor
    summary: GetActor returns the Actor field.
    description: |
      GetActor returns the Actor field.
    code: func (i *IssueEvent) GetActor() *User
    source:
      file: /src/github/github-accessors.go
      line: 3088
  - name: GetAssignee
    summary: GetAssignee returns the Assignee field.
    description: |
      GetAssignee returns the Assignee field.
    code: func (i *IssueEvent) GetAssignee() *User
    source:
      file: /src/github/github-accessors.go
      line: 3096
  - name: GetAssigner
    summary: GetAssigner returns the Assigner field.
    description: |
      GetAssigner returns the Assigner field.
    code: func (i *IssueEvent) GetAssigner() *User
    source:
      file: /src/github/github-accessors.go
      line: 3104
  - name: GetCommitID
    summary: GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    description: |
      GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    code: func (i *IssueEvent) GetCommitID() string
    source:
      file: /src/github/github-accessors.go
      line: 3112
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (i *IssueEvent) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 3120
  - name: GetEvent
    summary: GetEvent returns the Event field if it's non-nil, zero value otherwise.
    description: |
      GetEvent returns the Event field if it's non-nil, zero value otherwise.
    code: func (i *IssueEvent) GetEvent() string
    source:
      file: /src/github/github-accessors.go
      line: 3128
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (i *IssueEvent) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 3136
  - name: GetIssue
    summary: GetIssue returns the Issue field.
    description: |
      GetIssue returns the Issue field.
    code: func (i *IssueEvent) GetIssue() *Issue
    source:
      file: /src/github/github-accessors.go
      line: 3144
  - name: GetLabel
    summary: GetLabel returns the Label field.
    description: |
      GetLabel returns the Label field.
    code: func (i *IssueEvent) GetLabel() *Label
    source:
      file: /src/github/github-accessors.go
      line: 3152
  - name: GetMilestone
    summary: GetMilestone returns the Milestone field.
    description: |
      GetMilestone returns the Milestone field.
    code: func (i *IssueEvent) GetMilestone() *Milestone
    source:
      file: /src/github/github-accessors.go
      line: 3160
  - name: GetRename
    summary: GetRename returns the Rename field.
    description: |
      GetRename returns the Rename field.
    code: func (i *IssueEvent) GetRename() *Rename
    source:
      file: /src/github/github-accessors.go
      line: 3168
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (i *IssueEvent) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3176
  source:
    file: /src/github/issues_events.go
    line: 15
- name: IssueListByRepoOptions
  summary: IssueListByRepoOptions specifies the optional parameters to the IssuesService.ListByRepo
    method.
  description: |
    IssueListByRepoOptions specifies the optional parameters to the IssuesService.ListByRepo method.
  code: "type IssueListByRepoOptions struct {\n\t// Milestone limits issues for the
    specified milestone. Possible values are\n\t// a milestone number, \"none\" for
    issues with no milestone, \"*\" for issues\n\t// with any milestone.\n\tMilestone\tstring\t`url:\"milestone,omitempty\"`\n\n\t//
    State filters issues based on their state. Possible values are: open,\n\t// closed,
    all. Default is \"open\".\n\tState\tstring\t`url:\"state,omitempty\"`\n\n\t//
    Assignee filters issues based on their assignee. Possible values are a\n\t// user
    name, \"none\" for issues that are not assigned, \"*\" for issues with\n\t// any
    assigned user.\n\tAssignee\tstring\t`url:\"assignee,omitempty\"`\n\n\t// Creator
    filters issues based on their creator.\n\tCreator\tstring\t`url:\"creator,omitempty\"`\n\n\t//
    Mentioned filters issues to those mentioned a specific user.\n\tMentioned\tstring\t`url:\"mentioned,omitempty\"`\n\n\t//
    Labels filters issues based on their label.\n\tLabels\t[]string\t`url:\"labels,omitempty,comma\"`\n\n\t//
    Sort specifies how to sort issues. Possible values are: created, updated,\n\t//
    and comments. Default value is \"created\".\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\t//
    Direction in which to sort issues. Possible values are: asc, desc.\n\t// Default
    is \"desc\".\n\tDirection\tstring\t`url:\"direction,omitempty\"`\n\n\t// Since
    filters issues by time.\n\tSince\ttime.Time\t`url:\"since,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/issues.go
    line: 170
- name: IssueListCommentsOptions
  summary: IssueListCommentsOptions specifies the optional parameters to the IssuesService.ListComments
    method.
  description: |
    IssueListCommentsOptions specifies the optional parameters to the IssuesService.ListComments method.
  code: "type IssueListCommentsOptions struct {\n\t// Sort specifies how to sort comments.
    Possible values are: created, updated.\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\t//
    Direction in which to sort comments. Possible values are: asc, desc.\n\tDirection\tstring\t`url:\"direction,omitempty\"`\n\n\t//
    Since filters comments by time.\n\tSince\ttime.Time\t`url:\"since,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/issues_comments.go
    line: 33
- name: IssueListOptions
  summary: IssueListOptions specifies the optional parameters to the IssuesService.List
    and IssuesService.ListByOrg methods.
  description: |
    IssueListOptions specifies the optional parameters to the IssuesService.List and IssuesService.ListByOrg methods.
  code: "type IssueListOptions struct {\n\t// Filter specifies which issues to list.
    Possible values are: assigned,\n\t// created, mentioned, subscribed, all. Default
    is \"assigned\".\n\tFilter\tstring\t`url:\"filter,omitempty\"`\n\n\t// State filters
    issues based on their state. Possible values are: open,\n\t// closed, all. Default
    is \"open\".\n\tState\tstring\t`url:\"state,omitempty\"`\n\n\t// Labels filters
    issues based on their label.\n\tLabels\t[]string\t`url:\"labels,comma,omitempty\"`\n\n\t//
    Sort specifies how to sort issues. Possible values are: created, updated,\n\t//
    and comments. Default value is \"created\".\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\t//
    Direction in which to sort issues. Possible values are: asc, desc.\n\t// Default
    is \"desc\".\n\tDirection\tstring\t`url:\"direction,omitempty\"`\n\n\t// Since
    filters issues by time.\n\tSince\ttime.Time\t`url:\"since,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/issues.go
    line: 85
- name: IssueRequest
  summary: IssueRequest represents a request to create/edit an issue.
  description: |
    IssueRequest represents a request to create/edit an issue. It is separate from Issue above because otherwise Labels and Assignee fail to serialize to the correct JSON.
  code: "type IssueRequest struct {\n\tTitle\t\t*string\t\t`json:\"title,omitempty\"`\n\tBody\t\t*string\t\t`json:\"body,omitempty\"`\n\tLabels\t\t*[]string\t`json:\"labels,omitempty\"`\n\tAssignee\t*string\t\t`json:\"assignee,omitempty\"`\n\tState\t\t*string\t\t`json:\"state,omitempty\"`\n\tMilestone\t*int\t\t`json:\"milestone,omitempty\"`\n\tAssignees\t*[]string\t`json:\"assignees,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAssignee
    summary: GetAssignee returns the Assignee field if it's non-nil, zero value otherwise.
    description: |
      GetAssignee returns the Assignee field if it's non-nil, zero value otherwise.
    code: func (i *IssueRequest) GetAssignee() string
    source:
      file: /src/github/github-accessors.go
      line: 3184
  - name: GetAssignees
    summary: GetAssignees returns the Assignees field if it's non-nil, zero value
      otherwise.
    description: |
      GetAssignees returns the Assignees field if it's non-nil, zero value otherwise.
    code: func (i *IssueRequest) GetAssignees() []string
    source:
      file: /src/github/github-accessors.go
      line: 3192
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (i *IssueRequest) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 3200
  - name: GetLabels
    summary: GetLabels returns the Labels field if it's non-nil, zero value otherwise.
    description: |
      GetLabels returns the Labels field if it's non-nil, zero value otherwise.
    code: func (i *IssueRequest) GetLabels() []string
    source:
      file: /src/github/github-accessors.go
      line: 3208
  - name: GetMilestone
    summary: GetMilestone returns the Milestone field if it's non-nil, zero value
      otherwise.
    description: |
      GetMilestone returns the Milestone field if it's non-nil, zero value otherwise.
    code: func (i *IssueRequest) GetMilestone() int
    source:
      file: /src/github/github-accessors.go
      line: 3216
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (i *IssueRequest) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 3224
  - name: GetTitle
    summary: GetTitle returns the Title field if it's non-nil, zero value otherwise.
    description: |
      GetTitle returns the Title field if it's non-nil, zero value otherwise.
    code: func (i *IssueRequest) GetTitle() string
    source:
      file: /src/github/github-accessors.go
      line: 3232
  source:
    file: /src/github/issues.go
    line: 73
- name: IssueStats
  summary: IssueStats represents the number of total, open and closed issues.
  description: |
    IssueStats represents the number of total, open and closed issues.
  code: "type IssueStats struct {\n\tTotalIssues\t*int\t`json:\"total_issues,omitempty\"`\n\tOpenIssues\t*int\t`json:\"open_issues,omitempty\"`\n\tClosedIssues\t*int\t`json:\"closed_issues,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetClosedIssues
    summary: GetClosedIssues returns the ClosedIssues field if it's non-nil, zero
      value otherwise.
    description: |
      GetClosedIssues returns the ClosedIssues field if it's non-nil, zero value otherwise.
    code: func (i *IssueStats) GetClosedIssues() int
    source:
      file: /src/github/github-accessors.go
      line: 3320
  - name: GetOpenIssues
    summary: GetOpenIssues returns the OpenIssues field if it's non-nil, zero value
      otherwise.
    description: |
      GetOpenIssues returns the OpenIssues field if it's non-nil, zero value otherwise.
    code: func (i *IssueStats) GetOpenIssues() int
    source:
      file: /src/github/github-accessors.go
      line: 3328
  - name: GetTotalIssues
    summary: GetTotalIssues returns the TotalIssues field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalIssues returns the TotalIssues field if it's non-nil, zero value otherwise.
    code: func (i *IssueStats) GetTotalIssues() int
    source:
      file: /src/github/github-accessors.go
      line: 3336
  - name: String
    summary: ""
    description: ""
    code: func (s IssueStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 39
  source:
    file: /src/github/admin_stats.go
    line: 33
- name: IssuesEvent
  summary: IssuesEvent is triggered when an issue is assigned, unassigned, labeled,
    unlabeled, opened, closed, or reopened.
  description: |
    IssuesEvent is triggered when an issue is assigned, unassigned, labeled, unlabeled, opened, closed, or reopened. The Webhook event name is "issues".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#issuesevent
  code: "type IssuesEvent struct {\n\t// Action is the action that was performed.
    Possible values are: \"assigned\",\n\t// \"unassigned\", \"labeled\", \"unlabeled\",
    \"opened\", \"closed\", \"reopened\", \"edited\".\n\tAction\t\t*string\t`json:\"action,omitempty\"`\n\tIssue\t\t*Issue\t`json:\"issue,omitempty\"`\n\tAssignee\t*User\t`json:\"assignee,omitempty\"`\n\tLabel\t\t*Label\t`json:\"label,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tChanges\t\t*EditChange\t`json:\"changes,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (i *IssuesEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 3240
  - name: GetAssignee
    summary: GetAssignee returns the Assignee field.
    description: |
      GetAssignee returns the Assignee field.
    code: func (i *IssuesEvent) GetAssignee() *User
    source:
      file: /src/github/github-accessors.go
      line: 3248
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (i *IssuesEvent) GetChanges() *EditChange
    source:
      file: /src/github/github-accessors.go
      line: 3256
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (i *IssuesEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 3264
  - name: GetIssue
    summary: GetIssue returns the Issue field.
    description: |
      GetIssue returns the Issue field.
    code: func (i *IssuesEvent) GetIssue() *Issue
    source:
      file: /src/github/github-accessors.go
      line: 3272
  - name: GetLabel
    summary: GetLabel returns the Label field.
    description: |
      GetLabel returns the Label field.
    code: func (i *IssuesEvent) GetLabel() *Label
    source:
      file: /src/github/github-accessors.go
      line: 3280
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (i *IssuesEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 3288
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (i *IssuesEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 3296
  source:
    file: /src/github/event_types.go
    line: 239
- name: IssuesSearchResult
  summary: IssuesSearchResult represents the result of an issues search.
  description: |
    IssuesSearchResult represents the result of an issues search.
  code: "type IssuesSearchResult struct {\n\tTotal\t\t\t*int\t`json:\"total_count,omitempty\"`\n\tIncompleteResults\t*bool\t`json:\"incomplete_results,omitempty\"`\n\tIssues\t\t\t[]Issue\t`json:\"items,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetIncompleteResults
    summary: GetIncompleteResults returns the IncompleteResults field if it's non-nil,
      zero value otherwise.
    description: |
      GetIncompleteResults returns the IncompleteResults field if it's non-nil, zero value otherwise.
    code: func (i *IssuesSearchResult) GetIncompleteResults() bool
    source:
      file: /src/github/github-accessors.go
      line: 3304
  - name: GetTotal
    summary: GetTotal returns the Total field if it's non-nil, zero value otherwise.
    description: |
      GetTotal returns the Total field if it's non-nil, zero value otherwise.
    code: func (i *IssuesSearchResult) GetTotal() int
    source:
      file: /src/github/github-accessors.go
      line: 3312
  source:
    file: /src/github/search.go
    line: 99
- name: IssuesService
  summary: IssuesService handles communication with the issue related methods of the
    GitHub API.
  description: |
    IssuesService handles communication with the issue related methods of the GitHub API.

    GitHub API docs: https://developer.github.com/v3/issues/
  code: type IssuesService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: AddAssignees
    summary: AddAssignees adds the provided GitHub users as assignees to the issue.
    description: |
      AddAssignees adds the provided GitHub users as assignees to the issue.

      GitHub API docs: https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue
    code: func (s *IssuesService) AddAssignees(ctx context.Context, owner, repo string,
      number int, assignees []string) (*Issue, *Response, error)
    source:
      file: /src/github/issues_assignees.go
      line: 54
  - name: AddLabelsToIssue
    summary: AddLabelsToIssue adds labels to an issue.
    description: |
      AddLabelsToIssue adds labels to an issue.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue
    code: func (s *IssuesService) AddLabelsToIssue(ctx context.Context, owner string,
      repo string, number int, labels []string) ([]*Label, *Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 145
  - name: Create
    summary: Create a new issue on the specified repository.
    description: |
      Create a new issue on the specified repository.

      GitHub API docs: https://developer.github.com/v3/issues/#create-an-issue
    code: func (s *IssuesService) Create(ctx context.Context, owner string, repo string,
      issue *IssueRequest) (*Issue, *Response, error)
    source:
      file: /src/github/issues.go
      line: 260
  - name: CreateComment
    summary: CreateComment creates a new comment on the specified issue.
    description: |
      CreateComment creates a new comment on the specified issue.

      GitHub API docs: https://developer.github.com/v3/issues/comments/#create-a-comment
    code: func (s *IssuesService) CreateComment(ctx context.Context, owner string,
      repo string, number int, comment *IssueComment) (*IssueComment, *Response, error)
    source:
      file: /src/github/issues_comments.go
      line: 105
  - name: CreateLabel
    summary: CreateLabel creates a new label on the specified repository.
    description: |
      CreateLabel creates a new label on the specified repository.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#create-a-label
    code: func (s *IssuesService) CreateLabel(ctx context.Context, owner string, repo
      string, label *Label) (*Label, *Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 71
  - name: CreateMilestone
    summary: CreateMilestone creates a new milestone on the specified repository.
    description: |
      CreateMilestone creates a new milestone on the specified repository.

      GitHub API docs: https://developer.github.com/v3/issues/milestones/#create-a-milestone
    code: func (s *IssuesService) CreateMilestone(ctx context.Context, owner string,
      repo string, milestone *Milestone) (*Milestone, *Response, error)
    source:
      file: /src/github/issues_milestones.go
      line: 101
  - name: DeleteComment
    summary: DeleteComment deletes an issue comment.
    description: |
      DeleteComment deletes an issue comment.

      GitHub API docs: https://developer.github.com/v3/issues/comments/#delete-a-comment
    code: func (s *IssuesService) DeleteComment(ctx context.Context, owner string,
      repo string, id int) (*Response, error)
    source:
      file: /src/github/issues_comments.go
      line: 141
  - name: DeleteLabel
    summary: DeleteLabel deletes a label.
    description: |
      DeleteLabel deletes a label.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#delete-a-label
    code: func (s *IssuesService) DeleteLabel(ctx context.Context, owner string, repo
      string, name string) (*Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 109
  - name: DeleteMilestone
    summary: DeleteMilestone deletes a milestone.
    description: |
      DeleteMilestone deletes a milestone.

      GitHub API docs: https://developer.github.com/v3/issues/milestones/#delete-a-milestone
    code: func (s *IssuesService) DeleteMilestone(ctx context.Context, owner string,
      repo string, number int) (*Response, error)
    source:
      file: /src/github/issues_milestones.go
      line: 139
  - name: Edit
    summary: Edit an issue.
    description: |
      Edit an issue.

      GitHub API docs: https://developer.github.com/v3/issues/#edit-an-issue
    code: func (s *IssuesService) Edit(ctx context.Context, owner string, repo string,
      number int, issue *IssueRequest) (*Issue, *Response, error)
    source:
      file: /src/github/issues.go
      line: 279
  - name: EditComment
    summary: EditComment updates an issue comment.
    description: |
      EditComment updates an issue comment.

      GitHub API docs: https://developer.github.com/v3/issues/comments/#edit-a-comment
    code: func (s *IssuesService) EditComment(ctx context.Context, owner string, repo
      string, id int, comment *IssueComment) (*IssueComment, *Response, error)
    source:
      file: /src/github/issues_comments.go
      line: 123
  - name: EditLabel
    summary: EditLabel edits a label.
    description: |
      EditLabel edits a label.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#update-a-label
    code: func (s *IssuesService) EditLabel(ctx context.Context, owner string, repo
      string, name string, label *Label) (*Label, *Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 90
  - name: EditMilestone
    summary: EditMilestone edits a milestone.
    description: |
      EditMilestone edits a milestone.

      GitHub API docs: https://developer.github.com/v3/issues/milestones/#update-a-milestone
    code: func (s *IssuesService) EditMilestone(ctx context.Context, owner string,
      repo string, number int, milestone *Milestone) (*Milestone, *Response, error)
    source:
      file: /src/github/issues_milestones.go
      line: 120
  - name: Get
    summary: Get a single issue.
    description: |
      Get a single issue.

      GitHub API docs: https://developer.github.com/v3/issues/#get-a-single-issue
    code: func (s *IssuesService) Get(ctx context.Context, owner string, repo string,
      number int) (*Issue, *Response, error)
    source:
      file: /src/github/issues.go
      line: 238
  - name: GetComment
    summary: GetComment fetches the specified issue comment.
    description: |
      GetComment fetches the specified issue comment.

      GitHub API docs: https://developer.github.com/v3/issues/comments/#get-a-single-comment
    code: func (s *IssuesService) GetComment(ctx context.Context, owner string, repo
      string, id int) (*IssueComment, *Response, error)
    source:
      file: /src/github/issues_comments.go
      line: 82
  - name: GetEvent
    summary: GetEvent returns the specified issue event.
    description: |
      GetEvent returns the specified issue event.

      GitHub API docs: https://developer.github.com/v3/issues/events/#get-a-single-event
    code: func (s *IssuesService) GetEvent(ctx context.Context, owner, repo string,
      id int) (*IssueEvent, *Response, error)
    source:
      file: /src/github/issues_events.go
      line: 126
  - name: GetLabel
    summary: GetLabel gets a single label.
    description: |
      GetLabel gets a single label.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#get-a-single-label
    code: func (s *IssuesService) GetLabel(ctx context.Context, owner string, repo
      string, name string) (*Label, *Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 52
  - name: GetMilestone
    summary: GetMilestone gets a single milestone.
    description: |
      GetMilestone gets a single milestone.

      GitHub API docs: https://developer.github.com/v3/issues/milestones/#get-a-single-milestone
    code: func (s *IssuesService) GetMilestone(ctx context.Context, owner string,
      repo string, number int) (*Milestone, *Response, error)
    source:
      file: /src/github/issues_milestones.go
      line: 82
  - name: IsAssignee
    summary: IsAssignee checks if a user is an assignee for the specified repository.
    description: |
      IsAssignee checks if a user is an assignee for the specified repository.

      GitHub API docs: https://developer.github.com/v3/issues/assignees/#check-assignee
    code: func (s *IssuesService) IsAssignee(ctx context.Context, owner, repo, user
      string) (bool, *Response, error)
    source:
      file: /src/github/issues_assignees.go
      line: 40
  - name: List
    summary: List the issues for the authenticated user.
    description: |
      List the issues for the authenticated user. If all is true, list issues across all the user's visible repositories including owned, member, and organization repositories; if false, list only owned and member repositories.

      GitHub API docs: https://developer.github.com/v3/issues/#list-issues
    code: func (s *IssuesService) List(ctx context.Context, all bool, opt *IssueListOptions)
      ([]*Issue, *Response, error)
    source:
      file: /src/github/issues.go
      line: 126
  - name: ListAssignees
    summary: ListAssignees fetches all available assignees (owners and collaborators)
      to which issues may be assigned.
    description: |
      ListAssignees fetches all available assignees (owners and collaborators) to which issues may be assigned.

      GitHub API docs: https://developer.github.com/v3/issues/assignees/#list-assignees
    code: func (s *IssuesService) ListAssignees(ctx context.Context, owner, repo string,
      opt *ListOptions) ([]*User, *Response, error)
    source:
      file: /src/github/issues_assignees.go
      line: 17
  - name: ListByOrg
    summary: ListByOrg fetches the issues in the specified organization for the authenticated
      user.
    description: |
      ListByOrg fetches the issues in the specified organization for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/issues/#list-issues
    code: func (s *IssuesService) ListByOrg(ctx context.Context, org string, opt *IssueListOptions)
      ([]*Issue, *Response, error)
    source:
      file: /src/github/issues.go
      line: 140
  - name: ListByRepo
    summary: ListByRepo lists the issues for the specified repository.
    description: |
      ListByRepo lists the issues for the specified repository.

      GitHub API docs: https://developer.github.com/v3/issues/#list-issues-for-a-repository
    code: func (s *IssuesService) ListByRepo(ctx context.Context, owner string, repo
      string, opt *IssueListByRepoOptions) ([]*Issue, *Response, error)
    source:
      file: /src/github/issues.go
      line: 211
  - name: ListComments
    summary: ListComments lists all comments on the specified issue.
    description: |
      ListComments lists all comments on the specified issue. Specifying an issue number of 0 will return all comments on all issues for the repository.

      GitHub API docs: https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue
    code: func (s *IssuesService) ListComments(ctx context.Context, owner string,
      repo string, number int, opt *IssueListCommentsOptions) ([]*IssueComment, *Response,
      error)
    source:
      file: /src/github/issues_comments.go
      line: 50
  - name: ListIssueEvents
    summary: ListIssueEvents lists events for the specified issue.
    description: |
      ListIssueEvents lists events for the specified issue.

      GitHub API docs: https://developer.github.com/v3/issues/events/#list-events-for-an-issue
    code: func (s *IssuesService) ListIssueEvents(ctx context.Context, owner, repo
      string, number int, opt *ListOptions) ([]*IssueEvent, *Response, error)
    source:
      file: /src/github/issues_events.go
      line: 78
  - name: ListIssueTimeline
    summary: ListIssueTimeline lists events for the specified issue.
    description: |
      ListIssueTimeline lists events for the specified issue.

      GitHub API docs: https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue
    code: func (s *IssuesService) ListIssueTimeline(ctx context.Context, owner, repo
      string, number int, opt *ListOptions) ([]*Timeline, *Response, error)
    source:
      file: /src/github/issues_timeline.go
      line: 131
  - name: ListLabels
    summary: ListLabels lists all labels for a repository.
    description: |
      ListLabels lists all labels for a repository.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository
    code: func (s *IssuesService) ListLabels(ctx context.Context, owner string, repo
      string, opt *ListOptions) ([]*Label, *Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 28
  - name: ListLabelsByIssue
    summary: ListLabelsByIssue lists all labels for an issue.
    description: |
      ListLabelsByIssue lists all labels for an issue.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#list-labels-on-an-issue
    code: func (s *IssuesService) ListLabelsByIssue(ctx context.Context, owner string,
      repo string, number int, opt *ListOptions) ([]*Label, *Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 121
  - name: ListLabelsForMilestone
    summary: ListLabelsForMilestone lists labels for every issue in a milestone.
    description: |
      ListLabelsForMilestone lists labels for every issue in a milestone.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#get-labels-for-every-issue-in-a-milestone
    code: func (s *IssuesService) ListLabelsForMilestone(ctx context.Context, owner
      string, repo string, number int, opt *ListOptions) ([]*Label, *Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 207
  - name: ListMilestones
    summary: ListMilestones lists all milestones for a repository.
    description: |
      ListMilestones lists all milestones for a repository.

      GitHub API docs: https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository
    code: func (s *IssuesService) ListMilestones(ctx context.Context, owner string,
      repo string, opt *MilestoneListOptions) ([]*Milestone, *Response, error)
    source:
      file: /src/github/issues_milestones.go
      line: 58
  - name: ListRepositoryEvents
    summary: ListRepositoryEvents lists events for the specified repository.
    description: |
      ListRepositoryEvents lists events for the specified repository.

      GitHub API docs: https://developer.github.com/v3/issues/events/#list-events-for-a-repository
    code: func (s *IssuesService) ListRepositoryEvents(ctx context.Context, owner,
      repo string, opt *ListOptions) ([]*IssueEvent, *Response, error)
    source:
      file: /src/github/issues_events.go
      line: 102
  - name: Lock
    summary: Lock an issue's conversation.
    description: |
      Lock an issue's conversation.

      GitHub API docs: https://developer.github.com/v3/issues/#lock-an-issue
    code: func (s *IssuesService) Lock(ctx context.Context, owner string, repo string,
      number int) (*Response, error)
    source:
      file: /src/github/issues.go
      line: 298
  - name: RemoveAssignees
    summary: RemoveAssignees removes the provided GitHub users as assignees from the
      issue.
    description: |
      RemoveAssignees removes the provided GitHub users as assignees from the issue.

      GitHub API docs: https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue
    code: func (s *IssuesService) RemoveAssignees(ctx context.Context, owner, repo
      string, number int, assignees []string) (*Issue, *Response, error)
    source:
      file: /src/github/issues_assignees.go
      line: 72
  - name: RemoveLabelForIssue
    summary: RemoveLabelForIssue removes a label for an issue.
    description: |
      RemoveLabelForIssue removes a label for an issue.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue
    code: func (s *IssuesService) RemoveLabelForIssue(ctx context.Context, owner string,
      repo string, number int, label string) (*Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 164
  - name: RemoveLabelsForIssue
    summary: RemoveLabelsForIssue removes all labels for an issue.
    description: |
      RemoveLabelsForIssue removes all labels for an issue.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue
    code: func (s *IssuesService) RemoveLabelsForIssue(ctx context.Context, owner
      string, repo string, number int) (*Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 195
  - name: ReplaceLabelsForIssue
    summary: ReplaceLabelsForIssue replaces all labels for an issue.
    description: |
      ReplaceLabelsForIssue replaces all labels for an issue.

      GitHub API docs: https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue
    code: func (s *IssuesService) ReplaceLabelsForIssue(ctx context.Context, owner
      string, repo string, number int, labels []string) ([]*Label, *Response, error)
    source:
      file: /src/github/issues_labels.go
      line: 176
  - name: Unlock
    summary: Unlock an issue's conversation.
    description: |
      Unlock an issue's conversation.

      GitHub API docs: https://developer.github.com/v3/issues/#unlock-an-issue
    code: func (s *IssuesService) Unlock(ctx context.Context, owner string, repo string,
      number int) (*Response, error)
    source:
      file: /src/github/issues.go
      line: 311
  source:
    file: /src/github/issues.go
    line: 18
- name: Key
  summary: Key represents a public SSH key used to authenticate a user or deploy script.
  description: |
    Key represents a public SSH key used to authenticate a user or deploy script.
  code: "type Key struct {\n\tID\t\t*int\t`json:\"id,omitempty\"`\n\tKey\t\t*string\t`json:\"key,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tTitle\t\t*string\t`json:\"title,omitempty\"`\n\tReadOnly\t*bool\t`json:\"read_only,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (k *Key) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 3344
  - name: GetKey
    summary: GetKey returns the Key field if it's non-nil, zero value otherwise.
    description: |
      GetKey returns the Key field if it's non-nil, zero value otherwise.
    code: func (k *Key) GetKey() string
    source:
      file: /src/github/github-accessors.go
      line: 3352
  - name: GetReadOnly
    summary: GetReadOnly returns the ReadOnly field if it's non-nil, zero value otherwise.
    description: |
      GetReadOnly returns the ReadOnly field if it's non-nil, zero value otherwise.
    code: func (k *Key) GetReadOnly() bool
    source:
      file: /src/github/github-accessors.go
      line: 3360
  - name: GetTitle
    summary: GetTitle returns the Title field if it's non-nil, zero value otherwise.
    description: |
      GetTitle returns the Title field if it's non-nil, zero value otherwise.
    code: func (k *Key) GetTitle() string
    source:
      file: /src/github/github-accessors.go
      line: 3368
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (k *Key) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3376
  - name: String
    summary: ""
    description: ""
    code: func (k Key) String() string
    source:
      file: /src/github/users_keys.go
      line: 22
  source:
    file: /src/github/users_keys.go
    line: 14
- name: Label
  summary: Label represents a GitHub label on an Issue
  description: |
    Label represents a GitHub label on an Issue
  code: "type Label struct {\n\tID\t*int\t`json:\"id,omitempty\"`\n\tURL\t*string\t`json:\"url,omitempty\"`\n\tName\t*string\t`json:\"name,omitempty\"`\n\tColor\t*string\t`json:\"color,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetColor
    summary: GetColor returns the Color field if it's non-nil, zero value otherwise.
    description: |
      GetColor returns the Color field if it's non-nil, zero value otherwise.
    code: func (l *Label) GetColor() string
    source:
      file: /src/github/github-accessors.go
      line: 3384
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (l *Label) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 3392
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (l *Label) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 3400
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (l *Label) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3408
  - name: String
    summary: ""
    description: ""
    code: func (l Label) String() string
    source:
      file: /src/github/issues_labels.go
      line: 21
  source:
    file: /src/github/issues_labels.go
    line: 14
- name: LabelEvent
  summary: LabelEvent is triggered when a repository's label is created, edited, or
    deleted.
  description: |
    LabelEvent is triggered when a repository's label is created, edited, or deleted. The Webhook event name is "label"

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#labelevent
  code: "type LabelEvent struct {\n\t// Action is the action that was performed. Possible
    values are:\n\t// \"created\", \"edited\", \"deleted\"\n\tAction\t*string\t`json:\"action,omitempty\"`\n\tLabel\t*Label\t`json:\"label,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tChanges\t\t*EditChange\t`json:\"changes,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tOrg\t\t*Organization\t`json:\"organization,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (l *LabelEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 3416
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (l *LabelEvent) GetChanges() *EditChange
    source:
      file: /src/github/github-accessors.go
      line: 3424
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (l *LabelEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 3432
  - name: GetLabel
    summary: GetLabel returns the Label field.
    description: |
      GetLabel returns the Label field.
    code: func (l *LabelEvent) GetLabel() *Label
    source:
      file: /src/github/github-accessors.go
      line: 3440
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (l *LabelEvent) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 3448
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (l *LabelEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 3456
  source:
    file: /src/github/event_types.go
    line: 258
- name: LargeFile
  summary: LargeFile identifies a file larger than 100MB found during a repository
    import.
  description: |
    LargeFile identifies a file larger than 100MB found during a repository import.

    GitHub API docs: https://developer.github.com/v3/migration/source_imports/#get-large-files
  code: "type LargeFile struct {\n\tRefName\t*string\t`json:\"ref_name,omitempty\"`\n\tPath\t*string\t`json:\"path,omitempty\"`\n\tOID\t*string\t`json:\"oid,omitempty\"`\n\tSize\t*int\t`json:\"size,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetOID
    summary: GetOID returns the OID field if it's non-nil, zero value otherwise.
    description: |
      GetOID returns the OID field if it's non-nil, zero value otherwise.
    code: func (l *LargeFile) GetOID() string
    source:
      file: /src/github/github-accessors.go
      line: 3464
  - name: GetPath
    summary: GetPath returns the Path field if it's non-nil, zero value otherwise.
    description: |
      GetPath returns the Path field if it's non-nil, zero value otherwise.
    code: func (l *LargeFile) GetPath() string
    source:
      file: /src/github/github-accessors.go
      line: 3472
  - name: GetRefName
    summary: GetRefName returns the RefName field if it's non-nil, zero value otherwise.
    description: |
      GetRefName returns the RefName field if it's non-nil, zero value otherwise.
    code: func (l *LargeFile) GetRefName() string
    source:
      file: /src/github/github-accessors.go
      line: 3480
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (l *LargeFile) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 3488
  - name: String
    summary: ""
    description: ""
    code: func (f LargeFile) String() string
    source:
      file: /src/github/migrations_source_import.go
      line: 143
  source:
    file: /src/github/migrations_source_import.go
    line: 136
- name: License
  summary: License represents an open source license.
  description: |
    License represents an open source license.
  code: "type License struct {\n\tKey\t*string\t`json:\"key,omitempty\"`\n\tName\t*string\t`json:\"name,omitempty\"`\n\tURL\t*string\t`json:\"url,omitempty\"`\n\n\tSPDXID\t\t*string\t\t`json:\"spdx_id,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tFeatured\t*bool\t\t`json:\"featured,omitempty\"`\n\tDescription\t*string\t\t`json:\"description,omitempty\"`\n\tImplementation\t*string\t\t`json:\"implementation,omitempty\"`\n\tPermissions\t*[]string\t`json:\"permissions,omitempty\"`\n\tConditions\t*[]string\t`json:\"conditions,omitempty\"`\n\tLimitations\t*[]string\t`json:\"limitations,omitempty\"`\n\tBody\t\t*string\t\t`json:\"body,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (l *License) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 3496
  - name: GetConditions
    summary: GetConditions returns the Conditions field if it's non-nil, zero value
      otherwise.
    description: |
      GetConditions returns the Conditions field if it's non-nil, zero value otherwise.
    code: func (l *License) GetConditions() []string
    source:
      file: /src/github/github-accessors.go
      line: 3504
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (l *License) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 3512
  - name: GetFeatured
    summary: GetFeatured returns the Featured field if it's non-nil, zero value otherwise.
    description: |
      GetFeatured returns the Featured field if it's non-nil, zero value otherwise.
    code: func (l *License) GetFeatured() bool
    source:
      file: /src/github/github-accessors.go
      line: 3520
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (l *License) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3528
  - name: GetImplementation
    summary: GetImplementation returns the Implementation field if it's non-nil, zero
      value otherwise.
    description: |
      GetImplementation returns the Implementation field if it's non-nil, zero value otherwise.
    code: func (l *License) GetImplementation() string
    source:
      file: /src/github/github-accessors.go
      line: 3536
  - name: GetKey
    summary: GetKey returns the Key field if it's non-nil, zero value otherwise.
    description: |
      GetKey returns the Key field if it's non-nil, zero value otherwise.
    code: func (l *License) GetKey() string
    source:
      file: /src/github/github-accessors.go
      line: 3544
  - name: GetLimitations
    summary: GetLimitations returns the Limitations field if it's non-nil, zero value
      otherwise.
    description: |
      GetLimitations returns the Limitations field if it's non-nil, zero value otherwise.
    code: func (l *License) GetLimitations() []string
    source:
      file: /src/github/github-accessors.go
      line: 3552
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (l *License) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 3560
  - name: GetPermissions
    summary: GetPermissions returns the Permissions field if it's non-nil, zero value
      otherwise.
    description: |
      GetPermissions returns the Permissions field if it's non-nil, zero value otherwise.
    code: func (l *License) GetPermissions() []string
    source:
      file: /src/github/github-accessors.go
      line: 3568
  - name: GetSPDXID
    summary: GetSPDXID returns the SPDXID field if it's non-nil, zero value otherwise.
    description: |
      GetSPDXID returns the SPDXID field if it's non-nil, zero value otherwise.
    code: func (l *License) GetSPDXID() string
    source:
      file: /src/github/github-accessors.go
      line: 3576
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (l *License) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3584
  - name: String
    summary: ""
    description: ""
    code: func (l License) String() string
    source:
      file: /src/github/licenses.go
      line: 57
  source:
    file: /src/github/licenses.go
    line: 41
- name: LicensesService
  summary: LicensesService handles communication with the license related methods
    of the GitHub API.
  description: |
    LicensesService handles communication with the license related methods of the GitHub API.

    GitHub API docs: https://developer.github.com/v3/licenses/
  code: type LicensesService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Get
    summary: Get extended metadata for one license.
    description: |
      Get extended metadata for one license.

      GitHub API docs: https://developer.github.com/v3/licenses/#get-an-individual-license
    code: func (s *LicensesService) Get(ctx context.Context, licenseName string) (*License,
      *Response, error)
    source:
      file: /src/github/licenses.go
      line: 85
  - name: List
    summary: List popular open source licenses.
    description: |
      List popular open source licenses.

      GitHub API docs: https://developer.github.com/v3/licenses/#list-all-licenses
    code: func (s *LicensesService) List(ctx context.Context) ([]*License, *Response,
      error)
    source:
      file: /src/github/licenses.go
      line: 64
  source:
    file: /src/github/licenses.go
    line: 17
- name: ListCollaboratorsOptions
  summary: ListCollaboratorsOptions specifies the optional parameters to the RepositoriesService.ListCollaborators
    method.
  description: |
    ListCollaboratorsOptions specifies the optional parameters to the RepositoriesService.ListCollaborators method.
  code: "type ListCollaboratorsOptions struct {\n\t// Affiliation specifies how collaborators
    should be filtered by their affiliation.\n\t// Possible values are:\n\t//     outside
    - All outside collaborators of an organization-owned repository\n\t//     direct
    - All collaborators with permissions to an organization-owned repository,\n\t//
    \             regardless of organization membership status\n\t//     all - All
    collaborators the authenticated user can see\n\t//\n\t// Default value is \"all\".\n\tAffiliation\tstring\t`url:\"affiliation,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos_collaborators.go
    line: 15
- name: ListContributorsOptions
  summary: ListContributorsOptions specifies the optional parameters to the RepositoriesService.ListContributors
    method.
  description: |
    ListContributorsOptions specifies the optional parameters to the RepositoriesService.ListContributors method.
  code: "type ListContributorsOptions struct {\n\t// Include anonymous contributors
    in results or not\n\tAnon\tstring\t`url:\"anon,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 414
- name: ListMembersOptions
  summary: ListMembersOptions specifies optional parameters to the OrganizationsService.ListMembers
    method.
  description: |
    ListMembersOptions specifies optional parameters to the OrganizationsService.ListMembers method.
  code: "type ListMembersOptions struct {\n\t// If true (or if the authenticated user
    is not an owner of the\n\t// organization), list only publicly visible members.\n\tPublicOnly\tbool\t`url:\"-\"`\n\n\t//
    Filter members returned in the list. Possible values are:\n\t// 2fa_disabled,
    all. Default is \"all\".\n\tFilter\tstring\t`url:\"filter,omitempty\"`\n\n\t//
    Role filters members returned by their role in the organization.\n\t// Possible
    values are:\n\t//     all - all members of the organization, regardless of role\n\t//
    \    admin - organization owners\n\t//     member - non-organization members\n\t//\n\t//
    Default is \"all\".\n\tRole\tstring\t`url:\"role,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/orgs_members.go
    line: 49
- name: ListOptions
  summary: ListOptions specifies the optional parameters to various List methods that
    support pagination.
  description: |
    ListOptions specifies the optional parameters to various List methods that support pagination.
  code: "type ListOptions struct {\n\t// For paginated result sets, page of results
    to retrieve.\n\tPage\tint\t`url:\"page,omitempty\"`\n\n\t// For paginated result
    sets, the number of results to include per page.\n\tPerPage\tint\t`url:\"per_page,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/github.go
    line: 164
- name: ListOrgMembershipsOptions
  summary: ListOrgMembershipsOptions specifies optional parameters to the OrganizationsService.ListOrgMemberships
    method.
  description: |
    ListOrgMembershipsOptions specifies optional parameters to the OrganizationsService.ListOrgMemberships method.
  code: "type ListOrgMembershipsOptions struct {\n\t// Filter memberships to include
    only those with the specified state.\n\t// Possible values are: \"active\", \"pending\".\n\tState\tstring\t`url:\"state,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/orgs_members.go
    line: 173
- name: ListOutsideCollaboratorsOptions
  summary: ListOutsideCollaboratorsOptions specifies optional parameters to the OrganizationsService.ListOutsideCollaborators
    method.
  description: |
    ListOutsideCollaboratorsOptions specifies optional parameters to the OrganizationsService.ListOutsideCollaborators method.
  code: "type ListOutsideCollaboratorsOptions struct {\n\t// Filter outside collaborators
    returned in the list. Possible values are:\n\t// 2fa_disabled, all.  Default is
    \"all\".\n\tFilter\tstring\t`url:\"filter,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/orgs_outside_collaborators.go
    line: 15
- name: MarkdownOptions
  summary: MarkdownOptions specifies optional parameters to the Markdown method.
  description: |
    MarkdownOptions specifies optional parameters to the Markdown method.
  code: "type MarkdownOptions struct {\n\t// Mode identifies the rendering mode. Possible
    values are:\n\t//   markdown - render a document as plain Markdown, just like\n\t//
    \  README files are rendered.\n\t//\n\t//   gfm - to render a document as user-content,
    e.g. like user\n\t//   comments or issues are rendered. In GFM mode, hard line
    breaks are\n\t//   always taken into account, and issue and user mentions are
    linked\n\t//   accordingly.\n\t//\n\t// Default is \"markdown\".\n\tMode\tstring\n\n\t//
    Context identifies the repository context. Only taken into account\n\t// when
    rendering as \"gfm\".\n\tContext\tstring\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/misc.go
    line: 16
- name: MarketplacePlan
  summary: MarketplacePlan represents a GitHub Apps Marketplace Listing Plan.
  description: |
    MarketplacePlan represents a GitHub Apps Marketplace Listing Plan.
  code: "type MarketplacePlan struct {\n\tURL\t\t\t*string\t\t`json:\"url,omitempty\"`\n\tAccountsURL\t\t*string\t\t`json:\"accounts_url,omitempty\"`\n\tID\t\t\t*int\t\t`json:\"id,omitempty\"`\n\tName\t\t\t*string\t\t`json:\"name,omitempty\"`\n\tDescription\t\t*string\t\t`json:\"description,omitempty\"`\n\tMonthlyPriceInCents\t*int\t\t`json:\"monthly_price_in_cents,omitempty\"`\n\tYearlyPriceInCents\t*int\t\t`json:\"yearly_price_in_cents,omitempty\"`\n\tPriceModel\t\t*string\t\t`json:\"price_model,omitempty\"`\n\tUnitName\t\t*string\t\t`json:\"unit_name,omitempty\"`\n\tBullets\t\t\t*[]string\t`json:\"bullets,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAccountsURL
    summary: GetAccountsURL returns the AccountsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetAccountsURL returns the AccountsURL field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetAccountsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3592
  - name: GetBullets
    summary: GetBullets returns the Bullets field if it's non-nil, zero value otherwise.
    description: |
      GetBullets returns the Bullets field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetBullets() []string
    source:
      file: /src/github/github-accessors.go
      line: 3600
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 3608
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 3616
  - name: GetMonthlyPriceInCents
    summary: GetMonthlyPriceInCents returns the MonthlyPriceInCents field if it's
      non-nil, zero value otherwise.
    description: |
      GetMonthlyPriceInCents returns the MonthlyPriceInCents field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetMonthlyPriceInCents() int
    source:
      file: /src/github/github-accessors.go
      line: 3624
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 3632
  - name: GetPriceModel
    summary: GetPriceModel returns the PriceModel field if it's non-nil, zero value
      otherwise.
    description: |
      GetPriceModel returns the PriceModel field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetPriceModel() string
    source:
      file: /src/github/github-accessors.go
      line: 3640
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3656
  - name: GetUnitName
    summary: GetUnitName returns the UnitName field if it's non-nil, zero value otherwise.
    description: |
      GetUnitName returns the UnitName field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetUnitName() string
    source:
      file: /src/github/github-accessors.go
      line: 3648
  - name: GetYearlyPriceInCents
    summary: GetYearlyPriceInCents returns the YearlyPriceInCents field if it's non-nil,
      zero value otherwise.
    description: |
      GetYearlyPriceInCents returns the YearlyPriceInCents field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlan) GetYearlyPriceInCents() int
    source:
      file: /src/github/github-accessors.go
      line: 3664
  source:
    file: /src/github/apps_marketplace.go
    line: 29
- name: MarketplacePlanAccount
  summary: MarketplacePlanAccount represents a GitHub Account (user or organization)
    on a specific plan.
  description: |
    MarketplacePlanAccount represents a GitHub Account (user or organization) on a specific plan.
  code: "type MarketplacePlanAccount struct {\n\tURL\t\t\t\t*string\t\t\t`json:\"url,omitempty\"`\n\tType\t\t\t\t*string\t\t\t`json:\"type,omitempty\"`\n\tID\t\t\t\t*int\t\t\t`json:\"id,omitempty\"`\n\tLogin\t\t\t\t*string\t\t\t`json:\"login,omitempty\"`\n\tEmail\t\t\t\t*string\t\t\t`json:\"email,omitempty\"`\n\tOrganizationBillingEmail\t*string\t\t\t`json:\"organization_billing_email,omitempty\"`\n\tMarketplacePurchase\t\t*MarketplacePurchase\t`json:\"marketplace_purchase,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlanAccount) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 3672
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlanAccount) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 3680
  - name: GetLogin
    summary: GetLogin returns the Login field if it's non-nil, zero value otherwise.
    description: |
      GetLogin returns the Login field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlanAccount) GetLogin() string
    source:
      file: /src/github/github-accessors.go
      line: 3688
  - name: GetMarketplacePurchase
    summary: GetMarketplacePurchase returns the MarketplacePurchase field.
    description: |
      GetMarketplacePurchase returns the MarketplacePurchase field.
    code: func (m *MarketplacePlanAccount) GetMarketplacePurchase() *MarketplacePurchase
    source:
      file: /src/github/github-accessors.go
      line: 3696
  - name: GetOrganizationBillingEmail
    summary: GetOrganizationBillingEmail returns the OrganizationBillingEmail field
      if it's non-nil, zero value otherwise.
    description: |
      GetOrganizationBillingEmail returns the OrganizationBillingEmail field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlanAccount) GetOrganizationBillingEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 3704
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlanAccount) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 3712
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePlanAccount) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3720
  source:
    file: /src/github/apps_marketplace.go
    line: 52
- name: MarketplacePurchase
  summary: MarketplacePurchase represents a GitHub Apps Marketplace Purchase.
  description: |
    MarketplacePurchase represents a GitHub Apps Marketplace Purchase.
  code: "type MarketplacePurchase struct {\n\tBillingCycle\t*string\t\t\t`json:\"billing_cycle,omitempty\"`\n\tNextBillingDate\t*string\t\t\t`json:\"next_billing_date,omitempty\"`\n\tUnitCount\t*int\t\t\t`json:\"unit_count,omitempty\"`\n\tPlan\t\t*MarketplacePlan\t`json:\"plan,omitempty\"`\n\tAccount\t\t*MarketplacePlanAccount\t`json:\"account,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAccount
    summary: GetAccount returns the Account field.
    description: |
      GetAccount returns the Account field.
    code: func (m *MarketplacePurchase) GetAccount() *MarketplacePlanAccount
    source:
      file: /src/github/github-accessors.go
      line: 3728
  - name: GetBillingCycle
    summary: GetBillingCycle returns the BillingCycle field if it's non-nil, zero
      value otherwise.
    description: |
      GetBillingCycle returns the BillingCycle field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePurchase) GetBillingCycle() string
    source:
      file: /src/github/github-accessors.go
      line: 3736
  - name: GetNextBillingDate
    summary: GetNextBillingDate returns the NextBillingDate field if it's non-nil,
      zero value otherwise.
    description: |
      GetNextBillingDate returns the NextBillingDate field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePurchase) GetNextBillingDate() string
    source:
      file: /src/github/github-accessors.go
      line: 3744
  - name: GetPlan
    summary: GetPlan returns the Plan field.
    description: |
      GetPlan returns the Plan field.
    code: func (m *MarketplacePurchase) GetPlan() *MarketplacePlan
    source:
      file: /src/github/github-accessors.go
      line: 3752
  - name: GetUnitCount
    summary: GetUnitCount returns the UnitCount field if it's non-nil, zero value
      otherwise.
    description: |
      GetUnitCount returns the UnitCount field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePurchase) GetUnitCount() int
    source:
      file: /src/github/github-accessors.go
      line: 3760
  source:
    file: /src/github/apps_marketplace.go
    line: 43
- name: MarketplacePurchaseEvent
  summary: MarketplacePurchaseEvent is triggered when a user purchases, cancels, or
    changes their GitHub Marketplace plan.
  description: |
    MarketplacePurchaseEvent is triggered when a user purchases, cancels, or changes their GitHub Marketplace plan. Webhook event name "marketplace_purchase".

    Github API docs: https://developer.github.com/v3/activity/events/types/#marketplacepurchaseevent
  code: "type MarketplacePurchaseEvent struct {\n\t// Action is the action that was
    performed. Possible values are:\n\t// \"purchased\", \"cancelled\", \"changed\".\n\tAction\t*string\t`json:\"action,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tEffectiveDate\t\t\t*Timestamp\t\t`json:\"effective_date,omitempty\"`\n\tMarketplacePurchase\t\t*MarketplacePurchase\t`json:\"marketplace_purchase,omitempty\"`\n\tPreviousMarketplacePurchase\t*MarketplacePurchase\t`json:\"previous_marketplace_purchase,omitempty\"`\n\tSender\t\t\t\t*User\t\t\t`json:\"sender,omitempty\"`\n\tInstallation\t\t\t*Installation\t\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePurchaseEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 3768
  - name: GetEffectiveDate
    summary: GetEffectiveDate returns the EffectiveDate field if it's non-nil, zero
      value otherwise.
    description: |
      GetEffectiveDate returns the EffectiveDate field if it's non-nil, zero value otherwise.
    code: func (m *MarketplacePurchaseEvent) GetEffectiveDate() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 3776
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (m *MarketplacePurchaseEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 3784
  - name: GetMarketplacePurchase
    summary: GetMarketplacePurchase returns the MarketplacePurchase field.
    description: |
      GetMarketplacePurchase returns the MarketplacePurchase field.
    code: func (m *MarketplacePurchaseEvent) GetMarketplacePurchase() *MarketplacePurchase
    source:
      file: /src/github/github-accessors.go
      line: 3792
  - name: GetPreviousMarketplacePurchase
    summary: GetPreviousMarketplacePurchase returns the PreviousMarketplacePurchase
      field.
    description: |
      GetPreviousMarketplacePurchase returns the PreviousMarketplacePurchase field.
    code: func (m *MarketplacePurchaseEvent) GetPreviousMarketplacePurchase() *MarketplacePurchase
    source:
      file: /src/github/github-accessors.go
      line: 3800
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (m *MarketplacePurchaseEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 3808
  source:
    file: /src/github/event_types.go
    line: 276
- name: MarketplaceService
  summary: MarketplaceService handles communication with the marketplace related methods
    of the GitHub API.
  description: |
    MarketplaceService handles communication with the marketplace related methods of the GitHub API.

    GitHub API docs: https://developer.github.com/v3/apps/marketplace/
  code: "type MarketplaceService struct {\n\n\t// Stubbed controls whether endpoints
    that return stubbed data are used\n\t// instead of production endpoints. Stubbed
    data is fake data that's useful\n\t// for testing your GitHub Apps. Stubbed data
    is hard-coded and will not\n\t// change based on actual subscriptions.\n\t//\n\t//
    GitHub API docs: https://developer.github.com/v3/apps/marketplace/\n\tStubbed
    bool\n\t// contains filtered or unexported fields\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: ListMarketplacePurchasesForUser
    summary: ListMarketplacePurchasesForUser lists all GitHub marketplace purchases
      made by a user.
    description: |
      ListMarketplacePurchasesForUser lists all GitHub marketplace purchases made by a user.

      GitHub API docs: https://developer.github.com/v3/apps/marketplace/#get-a-users-marketplace-purchases
    code: func (s *MarketplaceService) ListMarketplacePurchasesForUser(ctx context.Context,
      opt *ListOptions) ([]*MarketplacePurchase, *Response, error)
    source:
      file: /src/github/apps_marketplace.go
      line: 146
  - name: ListPlanAccountsForAccount
    summary: ListPlanAccountsForAccount lists all GitHub accounts (user or organization)
      associated with an account.
    description: |
      ListPlanAccountsForAccount lists all GitHub accounts (user or organization) associated with an account.

      GitHub API docs: https://developer.github.com/v3/apps/marketplace/#check-if-a-github-account-is-associated-with-any-marketplace-listing
    code: func (s *MarketplaceService) ListPlanAccountsForAccount(ctx context.Context,
      accountID int, opt *ListOptions) ([]*MarketplacePlanAccount, *Response, error)
    source:
      file: /src/github/apps_marketplace.go
      line: 119
  - name: ListPlanAccountsForPlan
    summary: ListPlanAccountsForPlan lists all GitHub accounts (user or organization)
      on a specific plan.
    description: |
      ListPlanAccountsForPlan lists all GitHub accounts (user or organization) on a specific plan.

      GitHub API docs: https://developer.github.com/v3/apps/marketplace/#list-all-github-accounts-user-or-organization-on-a-specific-plan
    code: func (s *MarketplaceService) ListPlanAccountsForPlan(ctx context.Context,
      planID int, opt *ListOptions) ([]*MarketplacePlanAccount, *Response, error)
    source:
      file: /src/github/apps_marketplace.go
      line: 92
  - name: ListPlans
    summary: ListPlans lists all plans for your Marketplace listing.
    description: |
      ListPlans lists all plans for your Marketplace listing.

      GitHub API docs: https://developer.github.com/v3/apps/marketplace/#list-all-plans-for-your-marketplace-listing
    code: func (s *MarketplaceService) ListPlans(ctx context.Context, opt *ListOptions)
      ([]*MarketplacePlan, *Response, error)
    source:
      file: /src/github/apps_marketplace.go
      line: 65
  source:
    file: /src/github/apps_marketplace.go
    line: 17
- name: Match
  summary: Match represents a single text match.
  description: |
    Match represents a single text match.
  code: "type Match struct {\n\tText\t*string\t`json:\"text,omitempty\"`\n\tIndices\t[]int\t`json:\"indices,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetText
    summary: GetText returns the Text field if it's non-nil, zero value otherwise.
    description: |
      GetText returns the Text field if it's non-nil, zero value otherwise.
    code: func (m *Match) GetText() string
    source:
      file: /src/github/github-accessors.go
      line: 3816
  source:
    file: /src/github/search.go
    line: 131
- name: MemberEvent
  summary: MemberEvent is triggered when a user is added as a collaborator to a repository.
  description: |
    MemberEvent is triggered when a user is added as a collaborator to a repository. The Webhook event name is "member".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#memberevent
  code: "type MemberEvent struct {\n\t// Action is the action that was performed.
    Possible value is: \"added\".\n\tAction\t*string\t`json:\"action,omitempty\"`\n\tMember\t*User\t`json:\"member,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (m *MemberEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 3824
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (m *MemberEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 3832
  - name: GetMember
    summary: GetMember returns the Member field.
    description: |
      GetMember returns the Member field.
    code: func (m *MemberEvent) GetMember() *User
    source:
      file: /src/github/github-accessors.go
      line: 3840
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (m *MemberEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 3848
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (m *MemberEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 3856
  source:
    file: /src/github/event_types.go
    line: 293
- name: Membership
  summary: Membership represents the status of a user's membership in an organization
    or team.
  description: |
    Membership represents the status of a user's membership in an organization or team.
  code: "type Membership struct {\n\tURL\t*string\t`json:\"url,omitempty\"`\n\n\t//
    State is the user's status within the organization or team.\n\t// Possible values
    are: \"active\", \"pending\"\n\tState\t*string\t`json:\"state,omitempty\"`\n\n\t//
    Role identifies the user's role within the organization or team.\n\t// Possible
    values for organization membership:\n\t//     member - non-owner organization
    member\n\t//     admin - organization owner\n\t//\n\t// Possible values for team
    membership are:\n\t//     member - a normal member of the team\n\t//     maintainer
    - a team maintainer. Able to add/remove other team\n\t//                  members,
    promote other team members to team\n\t//                  maintainer, and edit
    the team’s name and description\n\tRole\t*string\t`json:\"role,omitempty\"`\n\n\t//
    For organization membership, the API URL of the organization.\n\tOrganizationURL\t*string\t`json:\"organization_url,omitempty\"`\n\n\t//
    For organization membership, the organization the membership is for.\n\tOrganization\t*Organization\t`json:\"organization,omitempty\"`\n\n\t//
    For organization membership, the user the membership is for.\n\tUser\t*User\t`json:\"user,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetOrganization
    summary: GetOrganization returns the Organization field.
    description: |
      GetOrganization returns the Organization field.
    code: func (m *Membership) GetOrganization() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 3864
  - name: GetOrganizationURL
    summary: GetOrganizationURL returns the OrganizationURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetOrganizationURL returns the OrganizationURL field if it's non-nil, zero value otherwise.
    code: func (m *Membership) GetOrganizationURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3872
  - name: GetRole
    summary: GetRole returns the Role field if it's non-nil, zero value otherwise.
    description: |
      GetRole returns the Role field if it's non-nil, zero value otherwise.
    code: func (m *Membership) GetRole() string
    source:
      file: /src/github/github-accessors.go
      line: 3880
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (m *Membership) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 3888
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (m *Membership) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3896
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (m *Membership) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 3904
  - name: String
    summary: ""
    description: ""
    code: func (m Membership) String() string
    source:
      file: /src/github/orgs_members.go
      line: 43
  source:
    file: /src/github/orgs_members.go
    line: 14
- name: MembershipEvent
  summary: MembershipEvent is triggered when a user is added or removed from a team.
  description: |
    MembershipEvent is triggered when a user is added or removed from a team. The Webhook event name is "membership".

    Events of this type are not visible in timelines, they are only used to trigger organization webhooks.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#membershipevent
  code: "type MembershipEvent struct {\n\t// Action is the action that was performed.
    Possible values are: \"added\", \"removed\".\n\tAction\t*string\t`json:\"action,omitempty\"`\n\t//
    Scope is the scope of the membership. Possible value is: \"team\".\n\tScope\t*string\t`json:\"scope,omitempty\"`\n\tMember\t*User\t`json:\"member,omitempty\"`\n\tTeam\t*Team\t`json:\"team,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tOrg\t\t*Organization\t`json:\"organization,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (m *MembershipEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 3912
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (m *MembershipEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 3920
  - name: GetMember
    summary: GetMember returns the Member field.
    description: |
      GetMember returns the Member field.
    code: func (m *MembershipEvent) GetMember() *User
    source:
      file: /src/github/github-accessors.go
      line: 3928
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (m *MembershipEvent) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 3936
  - name: GetScope
    summary: GetScope returns the Scope field if it's non-nil, zero value otherwise.
    description: |
      GetScope returns the Scope field if it's non-nil, zero value otherwise.
    code: func (m *MembershipEvent) GetScope() string
    source:
      file: /src/github/github-accessors.go
      line: 3944
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (m *MembershipEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 3952
  - name: GetTeam
    summary: GetTeam returns the Team field.
    description: |
      GetTeam returns the Team field.
    code: func (m *MembershipEvent) GetTeam() *Team
    source:
      file: /src/github/github-accessors.go
      line: 3960
  source:
    file: /src/github/event_types.go
    line: 311
- name: Metric
  summary: Metric represents the different fields for one file in community health
    files.
  description: |
    Metric represents the different fields for one file in community health files.
  code: "type Metric struct {\n\tName\t*string\t`json:\"name\"`\n\tKey\t*string\t`json:\"key\"`\n\tURL\t*string\t`json:\"url\"`\n\tHTMLURL\t*string\t`json:\"html_url\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (m *Metric) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3968
  - name: GetKey
    summary: GetKey returns the Key field if it's non-nil, zero value otherwise.
    description: |
      GetKey returns the Key field if it's non-nil, zero value otherwise.
    code: func (m *Metric) GetKey() string
    source:
      file: /src/github/github-accessors.go
      line: 3976
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (m *Metric) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 3984
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (m *Metric) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 3992
  source:
    file: /src/github/repos_community_health.go
    line: 15
- name: Migration
  summary: Migration represents a GitHub migration (archival).
  description: |
    Migration represents a GitHub migration (archival).
  code: "type Migration struct {\n\tID\t*int\t`json:\"id,omitempty\"`\n\tGUID\t*string\t`json:\"guid,omitempty\"`\n\t//
    State is the current state of a migration.\n\t// Possible values are:\n\t//     \"pending\"
    which means the migration hasn't started yet,\n\t//     \"exporting\" which means
    the migration is in progress,\n\t//     \"exported\" which means the migration
    finished successfully, or\n\t//     \"failed\" which means the migration failed.\n\tState\t*string\t`json:\"state,omitempty\"`\n\t//
    LockRepositories indicates whether repositories are locked (to prevent\n\t// manipulation)
    while migrating data.\n\tLockRepositories\t*bool\t`json:\"lock_repositories,omitempty\"`\n\t//
    ExcludeAttachments indicates whether attachments should be excluded from\n\t//
    the migration (to reduce migration archive file size).\n\tExcludeAttachments\t*bool\t\t`json:\"exclude_attachments,omitempty\"`\n\tURL\t\t\t*string\t\t`json:\"url,omitempty\"`\n\tCreatedAt\t\t*string\t\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t\t*string\t\t`json:\"updated_at,omitempty\"`\n\tRepositories\t\t[]*Repository\t`json:\"repositories,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (m *Migration) GetCreatedAt() string
    source:
      file: /src/github/github-accessors.go
      line: 4000
  - name: GetExcludeAttachments
    summary: GetExcludeAttachments returns the ExcludeAttachments field if it's non-nil,
      zero value otherwise.
    description: |
      GetExcludeAttachments returns the ExcludeAttachments field if it's non-nil, zero value otherwise.
    code: func (m *Migration) GetExcludeAttachments() bool
    source:
      file: /src/github/github-accessors.go
      line: 4008
  - name: GetGUID
    summary: GetGUID returns the GUID field if it's non-nil, zero value otherwise.
    description: |
      GetGUID returns the GUID field if it's non-nil, zero value otherwise.
    code: func (m *Migration) GetGUID() string
    source:
      file: /src/github/github-accessors.go
      line: 4016
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (m *Migration) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 4024
  - name: GetLockRepositories
    summary: GetLockRepositories returns the LockRepositories field if it's non-nil,
      zero value otherwise.
    description: |
      GetLockRepositories returns the LockRepositories field if it's non-nil, zero value otherwise.
    code: func (m *Migration) GetLockRepositories() bool
    source:
      file: /src/github/github-accessors.go
      line: 4032
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (m *Migration) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 4040
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (m *Migration) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4056
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (m *Migration) GetUpdatedAt() string
    source:
      file: /src/github/github-accessors.go
      line: 4048
  - name: String
    summary: ""
    description: ""
    code: func (m Migration) String() string
    source:
      file: /src/github/migrations.go
      line: 45
  source:
    file: /src/github/migrations.go
    line: 23
- name: MigrationOptions
  summary: MigrationOptions specifies the optional parameters to Migration methods.
  description: |
    MigrationOptions specifies the optional parameters to Migration methods.
  code: "type MigrationOptions struct {\n\t// LockRepositories indicates whether repositories
    should be locked (to prevent\n\t// manipulation) while migrating data.\n\tLockRepositories\tbool\n\n\t//
    ExcludeAttachments indicates whether attachments should be excluded from\n\t//
    the migration (to reduce migration archive file size).\n\tExcludeAttachments\tbool\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/migrations.go
    line: 50
- name: MigrationService
  summary: MigrationService provides access to the migration related functions in
    the GitHub API.
  description: |
    MigrationService provides access to the migration related functions in the GitHub API.

    GitHub API docs: https://developer.github.com/v3/migration/
  code: type MigrationService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: CancelImport
    summary: CancelImport stops an import for a repository.
    description: |
      CancelImport stops an import for a repository.

      GitHub API docs: https://developer.github.com/v3/migration/source_imports/#cancel-an-import
    code: func (s *MigrationService) CancelImport(ctx context.Context, owner, repo
      string) (*Response, error)
    source:
      file: /src/github/migrations_source_import.go
      line: 318
  - name: CommitAuthors
    summary: CommitAuthors gets the authors mapped from the original repository.
    description: |
      CommitAuthors gets the authors mapped from the original repository.

      Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username "hubot" into something like "hubot <hubot@12341234-abab-fefe-8787-fedcba987654>".

      This method and MapCommitAuthor allow you to provide correct Git author information.

      GitHub API docs: https://developer.github.com/v3/migration/source_imports/#get-commit-authors
    code: func (s *MigrationService) CommitAuthors(ctx context.Context, owner, repo
      string) ([]*SourceImportAuthor, *Response, error)
    source:
      file: /src/github/migrations_source_import.go
      line: 226
  - name: DeleteMigration
    summary: DeleteMigration deletes a previous migration archive.
    description: |
      DeleteMigration deletes a previous migration archive. id is the migration ID.

      GitHub API docs: https://developer.github.com/v3/migration/migrations/#delete-a-migration-archive
    code: func (s *MigrationService) DeleteMigration(ctx context.Context, org string,
      id int) (*Response, error)
    source:
      file: /src/github/migrations.go
      line: 192
  - name: ImportProgress
    summary: ImportProgress queries for the status and progress of an ongoing repository
      import.
    description: |
      ImportProgress queries for the status and progress of an ongoing repository import.

      GitHub API docs: https://developer.github.com/v3/migration/source_imports/#get-import-progress
    code: func (s *MigrationService) ImportProgress(ctx context.Context, owner, repo
      string) (*Import, *Response, error)
    source:
      file: /src/github/migrations_source_import.go
      line: 172
  - name: LargeFiles
    summary: LargeFiles lists files larger than 100MB found during the import.
    description: |
      LargeFiles lists files larger than 100MB found during the import.

      GitHub API docs: https://developer.github.com/v3/migration/source_imports/#get-large-files
    code: func (s *MigrationService) LargeFiles(ctx context.Context, owner, repo string)
      ([]*LargeFile, *Response, error)
    source:
      file: /src/github/migrations_source_import.go
      line: 296
  - name: ListMigrations
    summary: ListMigrations lists the most recent migrations.
    description: |
      ListMigrations lists the most recent migrations.

      GitHub API docs: https://developer.github.com/v3/migration/migrations/#get-a-list-of-migrations
    code: func (s *MigrationService) ListMigrations(ctx context.Context, org string)
      ([]*Migration, *Response, error)
    source:
      file: /src/github/migrations.go
      line: 107
  - name: MapCommitAuthor
    summary: MapCommitAuthor updates an author's identity for the import.
    description: |
      MapCommitAuthor updates an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.

      GitHub API docs: https://developer.github.com/v3/migration/source_imports/#map-a-commit-author
    code: func (s *MigrationService) MapCommitAuthor(ctx context.Context, owner, repo
      string, id int, author *SourceImportAuthor) (*SourceImportAuthor, *Response,
      error)
    source:
      file: /src/github/migrations_source_import.go
      line: 250
  - name: MigrationArchiveURL
    summary: MigrationArchiveURL fetches a migration archive URL.
    description: |
      MigrationArchiveURL fetches a migration archive URL. id is the migration ID.

      GitHub API docs: https://developer.github.com/v3/migration/migrations/#download-a-migration-archive
    code: func (s *MigrationService) MigrationArchiveURL(ctx context.Context, org
      string, id int) (url string, err error)
    source:
      file: /src/github/migrations.go
      line: 155
  - name: MigrationStatus
    summary: MigrationStatus gets the status of a specific migration archive.
    description: |
      MigrationStatus gets the status of a specific migration archive. id is the migration ID.

      GitHub API docs: https://developer.github.com/v3/migration/migrations/#get-the-status-of-a-migration
    code: func (s *MigrationService) MigrationStatus(ctx context.Context, org string,
      id int) (*Migration, *Response, error)
    source:
      file: /src/github/migrations.go
      line: 131
  - name: SetLFSPreference
    summary: SetLFSPreference sets whether imported repositories should use Git LFS
      for files larger than 100MB.
    description: |
      SetLFSPreference sets whether imported repositories should use Git LFS for files larger than 100MB. Only the UseLFS field on the provided Import is used.

      GitHub API docs: https://developer.github.com/v3/migration/source_imports/#set-git-lfs-preference
    code: func (s *MigrationService) SetLFSPreference(ctx context.Context, owner,
      repo string, in *Import) (*Import, *Response, error)
    source:
      file: /src/github/migrations_source_import.go
      line: 274
  - name: StartImport
    summary: StartImport initiates a repository import.
    description: |
      StartImport initiates a repository import.

      GitHub API docs: https://developer.github.com/v3/migration/source_imports/#start-an-import
    code: func (s *MigrationService) StartImport(ctx context.Context, owner, repo
      string, in *Import) (*Import, *Response, error)
    source:
      file: /src/github/migrations_source_import.go
      line: 150
  - name: StartMigration
    summary: StartMigration starts the generation of a migration archive.
    description: |
      StartMigration starts the generation of a migration archive. repos is a slice of repository names to migrate.

      GitHub API docs: https://developer.github.com/v3/migration/migrations/#start-a-migration
    code: func (s *MigrationService) StartMigration(ctx context.Context, org string,
      repos []string, opt *MigrationOptions) (*Migration, *Response, error)
    source:
      file: /src/github/migrations.go
      line: 78
  - name: UnlockRepo
    summary: UnlockRepo unlocks a repository that was locked for migration.
    description: |
      UnlockRepo unlocks a repository that was locked for migration. id is the migration ID. You should unlock each migrated repository and delete them when the migration is complete and you no longer need the source data.

      GitHub API docs: https://developer.github.com/v3/migration/migrations/#unlock-a-repository
    code: func (s *MigrationService) UnlockRepo(ctx context.Context, org string, id
      int, repo string) (*Response, error)
    source:
      file: /src/github/migrations.go
      line: 212
  - name: UpdateImport
    summary: UpdateImport initiates a repository import.
    description: |
      UpdateImport initiates a repository import.

      GitHub API docs: https://developer.github.com/v3/migration/source_imports/#update-existing-import
    code: func (s *MigrationService) UpdateImport(ctx context.Context, owner, repo
      string, in *Import) (*Import, *Response, error)
    source:
      file: /src/github/migrations_source_import.go
      line: 194
  source:
    file: /src/github/migrations.go
    line: 20
- name: Milestone
  summary: Milestone represents a GitHub repository milestone.
  description: |
    Milestone represents a GitHub repository milestone.
  code: "type Milestone struct {\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tLabelsURL\t*string\t\t`json:\"labels_url,omitempty\"`\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tNumber\t\t*int\t\t`json:\"number,omitempty\"`\n\tState\t\t*string\t\t`json:\"state,omitempty\"`\n\tTitle\t\t*string\t\t`json:\"title,omitempty\"`\n\tDescription\t*string\t\t`json:\"description,omitempty\"`\n\tCreator\t\t*User\t\t`json:\"creator,omitempty\"`\n\tOpenIssues\t*int\t\t`json:\"open_issues,omitempty\"`\n\tClosedIssues\t*int\t\t`json:\"closed_issues,omitempty\"`\n\tCreatedAt\t*time.Time\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*time.Time\t`json:\"updated_at,omitempty\"`\n\tClosedAt\t*time.Time\t`json:\"closed_at,omitempty\"`\n\tDueOn\t\t*time.Time\t`json:\"due_on,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetClosedAt
    summary: GetClosedAt returns the ClosedAt field if it's non-nil, zero value otherwise.
    description: |
      GetClosedAt returns the ClosedAt field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetClosedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 4064
  - name: GetClosedIssues
    summary: GetClosedIssues returns the ClosedIssues field if it's non-nil, zero
      value otherwise.
    description: |
      GetClosedIssues returns the ClosedIssues field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetClosedIssues() int
    source:
      file: /src/github/github-accessors.go
      line: 4072
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 4080
  - name: GetCreator
    summary: GetCreator returns the Creator field.
    description: |
      GetCreator returns the Creator field.
    code: func (m *Milestone) GetCreator() *User
    source:
      file: /src/github/github-accessors.go
      line: 4088
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 4096
  - name: GetDueOn
    summary: GetDueOn returns the DueOn field if it's non-nil, zero value otherwise.
    description: |
      GetDueOn returns the DueOn field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetDueOn() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 4104
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4112
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 4120
  - name: GetLabelsURL
    summary: GetLabelsURL returns the LabelsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetLabelsURL returns the LabelsURL field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetLabelsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4128
  - name: GetNumber
    summary: GetNumber returns the Number field if it's non-nil, zero value otherwise.
    description: |
      GetNumber returns the Number field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetNumber() int
    source:
      file: /src/github/github-accessors.go
      line: 4136
  - name: GetOpenIssues
    summary: GetOpenIssues returns the OpenIssues field if it's non-nil, zero value
      otherwise.
    description: |
      GetOpenIssues returns the OpenIssues field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetOpenIssues() int
    source:
      file: /src/github/github-accessors.go
      line: 4144
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 4152
  - name: GetTitle
    summary: GetTitle returns the Title field if it's non-nil, zero value otherwise.
    description: |
      GetTitle returns the Title field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetTitle() string
    source:
      file: /src/github/github-accessors.go
      line: 4160
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4176
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (m *Milestone) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 4168
  - name: String
    summary: ""
    description: ""
    code: func (m Milestone) String() string
    source:
      file: /src/github/issues_milestones.go
      line: 33
  source:
    file: /src/github/issues_milestones.go
    line: 15
- name: MilestoneEvent
  summary: MilestoneEvent is triggered when a milestone is created, closed, opened,
    edited, or deleted.
  description: |
    MilestoneEvent is triggered when a milestone is created, closed, opened, edited, or deleted. The Webhook event name is "milestone".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#milestoneevent
  code: "type MilestoneEvent struct {\n\t// Action is the action that was performed.
    Possible values are:\n\t// \"created\", \"closed\", \"opened\", \"edited\", \"deleted\"\n\tAction\t\t*string\t\t`json:\"action,omitempty\"`\n\tMilestone\t*Milestone\t`json:\"milestone,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tChanges\t\t*EditChange\t`json:\"changes,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tOrg\t\t*Organization\t`json:\"organization,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (m *MilestoneEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 4184
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (m *MilestoneEvent) GetChanges() *EditChange
    source:
      file: /src/github/github-accessors.go
      line: 4192
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (m *MilestoneEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 4200
  - name: GetMilestone
    summary: GetMilestone returns the Milestone field.
    description: |
      GetMilestone returns the Milestone field.
    code: func (m *MilestoneEvent) GetMilestone() *Milestone
    source:
      file: /src/github/github-accessors.go
      line: 4208
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (m *MilestoneEvent) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 4216
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (m *MilestoneEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 4224
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (m *MilestoneEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 4232
  source:
    file: /src/github/event_types.go
    line: 329
- name: MilestoneListOptions
  summary: MilestoneListOptions specifies the optional parameters to the IssuesService.ListMilestones
    method.
  description: |
    MilestoneListOptions specifies the optional parameters to the IssuesService.ListMilestones method.
  code: "type MilestoneListOptions struct {\n\t// State filters milestones based on
    their state. Possible values are:\n\t// open, closed, all. Default is \"open\".\n\tState\tstring\t`url:\"state,omitempty\"`\n\n\t//
    Sort specifies how to sort milestones. Possible values are: due_on, completeness.\n\t//
    Default value is \"due_on\".\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\t//
    Direction in which to sort milestones. Possible values are: asc, desc.\n\t// Default
    is \"asc\".\n\tDirection\tstring\t`url:\"direction,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/issues_milestones.go
    line: 39
- name: MilestoneStats
  summary: MilestoneStats represents the number of total, open and close milestones.
  description: |
    MilestoneStats represents the number of total, open and close milestones.
  code: "type MilestoneStats struct {\n\tTotalMilestones\t\t*int\t`json:\"total_milestones,omitempty\"`\n\tOpenMilestones\t\t*int\t`json:\"open_milestones,omitempty\"`\n\tClosedMilestones\t*int\t`json:\"closed_milestones,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetClosedMilestones
    summary: GetClosedMilestones returns the ClosedMilestones field if it's non-nil,
      zero value otherwise.
    description: |
      GetClosedMilestones returns the ClosedMilestones field if it's non-nil, zero value otherwise.
    code: func (m *MilestoneStats) GetClosedMilestones() int
    source:
      file: /src/github/github-accessors.go
      line: 4240
  - name: GetOpenMilestones
    summary: GetOpenMilestones returns the OpenMilestones field if it's non-nil, zero
      value otherwise.
    description: |
      GetOpenMilestones returns the OpenMilestones field if it's non-nil, zero value otherwise.
    code: func (m *MilestoneStats) GetOpenMilestones() int
    source:
      file: /src/github/github-accessors.go
      line: 4248
  - name: GetTotalMilestones
    summary: GetTotalMilestones returns the TotalMilestones field if it's non-nil,
      zero value otherwise.
    description: |
      GetTotalMilestones returns the TotalMilestones field if it's non-nil, zero value otherwise.
    code: func (m *MilestoneStats) GetTotalMilestones() int
    source:
      file: /src/github/github-accessors.go
      line: 4256
  - name: String
    summary: ""
    description: ""
    code: func (s MilestoneStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 61
  source:
    file: /src/github/admin_stats.go
    line: 55
- name: NewPullRequest
  summary: NewPullRequest represents a new pull request to be created.
  description: |
    NewPullRequest represents a new pull request to be created.
  code: "type NewPullRequest struct {\n\tTitle\t\t\t*string\t`json:\"title,omitempty\"`\n\tHead\t\t\t*string\t`json:\"head,omitempty\"`\n\tBase\t\t\t*string\t`json:\"base,omitempty\"`\n\tBody\t\t\t*string\t`json:\"body,omitempty\"`\n\tIssue\t\t\t*int\t`json:\"issue,omitempty\"`\n\tMaintainerCanModify\t*bool\t`json:\"maintainer_can_modify,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBase
    summary: GetBase returns the Base field if it's non-nil, zero value otherwise.
    description: |
      GetBase returns the Base field if it's non-nil, zero value otherwise.
    code: func (n *NewPullRequest) GetBase() string
    source:
      file: /src/github/github-accessors.go
      line: 4264
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (n *NewPullRequest) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 4272
  - name: GetHead
    summary: GetHead returns the Head field if it's non-nil, zero value otherwise.
    description: |
      GetHead returns the Head field if it's non-nil, zero value otherwise.
    code: func (n *NewPullRequest) GetHead() string
    source:
      file: /src/github/github-accessors.go
      line: 4280
  - name: GetIssue
    summary: GetIssue returns the Issue field if it's non-nil, zero value otherwise.
    description: |
      GetIssue returns the Issue field if it's non-nil, zero value otherwise.
    code: func (n *NewPullRequest) GetIssue() int
    source:
      file: /src/github/github-accessors.go
      line: 4288
  - name: GetMaintainerCanModify
    summary: GetMaintainerCanModify returns the MaintainerCanModify field if it's
      non-nil, zero value otherwise.
    description: |
      GetMaintainerCanModify returns the MaintainerCanModify field if it's non-nil, zero value otherwise.
    code: func (n *NewPullRequest) GetMaintainerCanModify() bool
    source:
      file: /src/github/github-accessors.go
      line: 4296
  - name: GetTitle
    summary: GetTitle returns the Title field if it's non-nil, zero value otherwise.
    description: |
      GetTitle returns the Title field if it's non-nil, zero value otherwise.
    code: func (n *NewPullRequest) GetTitle() string
    source:
      file: /src/github/github-accessors.go
      line: 4304
  source:
    file: /src/github/pulls.go
    line: 169
- name: NewTeam
  summary: NewTeam represents a team to be created or modified.
  description: |
    NewTeam represents a team to be created or modified.
  code: "type NewTeam struct {\n\tName\t\tstring\t\t`json:\"name\"`\t// Name of the
    team. (Required.)\n\tDescription\t*string\t\t`json:\"description,omitempty\"`\n\tMaintainers\t[]string\t`json:\"maintainers,omitempty\"`\n\tRepoNames\t[]string\t`json:\"repo_names,omitempty\"`\n\tParentTeamID\t*int\t\t`json:\"parent_team_id,omitempty\"`\n\n\t//
    Deprecated: Permission is deprecated when creating or editing a team in an org\n\t//
    using the new GitHub permission model. It no longer identifies the\n\t// permission
    a team has on its repos, but only specifies the default\n\t// permission a repo
    is initially added with. Avoid confusion by\n\t// specifying a permission value
    when calling AddTeamRepo.\n\tPermission\t*string\t`json:\"permission,omitempty\"`\n\n\t//
    Privacy identifies the level of privacy this team should have.\n\t// Possible
    values are:\n\t//     secret - only visible to organization owners and members
    of this team\n\t//     closed - visible to all members of this organization\n\t//
    Default is \"secret\".\n\tPrivacy\t*string\t`json:\"privacy,omitempty\"`\n\n\t//
    LDAPDN may be used in GitHub Enterprise when the team membership\n\t// is synchronized
    with LDAP.\n\tLDAPDN\t*string\t`json:\"ldap_dn,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (n *NewTeam) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 4312
  - name: GetLDAPDN
    summary: GetLDAPDN returns the LDAPDN field if it's non-nil, zero value otherwise.
    description: |
      GetLDAPDN returns the LDAPDN field if it's non-nil, zero value otherwise.
    code: func (n *NewTeam) GetLDAPDN() string
    source:
      file: /src/github/github-accessors.go
      line: 4320
  - name: GetParentTeamID
    summary: GetParentTeamID returns the ParentTeamID field if it's non-nil, zero
      value otherwise.
    description: |
      GetParentTeamID returns the ParentTeamID field if it's non-nil, zero value otherwise.
    code: func (n *NewTeam) GetParentTeamID() int
    source:
      file: /src/github/github-accessors.go
      line: 4328
  - name: GetPermission
    summary: GetPermission returns the Permission field if it's non-nil, zero value
      otherwise.
    description: |
      GetPermission returns the Permission field if it's non-nil, zero value otherwise.
    code: func (n *NewTeam) GetPermission() string
    source:
      file: /src/github/github-accessors.go
      line: 4336
  - name: GetPrivacy
    summary: GetPrivacy returns the Privacy field if it's non-nil, zero value otherwise.
    description: |
      GetPrivacy returns the Privacy field if it's non-nil, zero value otherwise.
    code: func (n *NewTeam) GetPrivacy() string
    source:
      file: /src/github/github-accessors.go
      line: 4344
  - name: String
    summary: ""
    description: ""
    code: func (s NewTeam) String() string
    source:
      file: /src/github/orgs_teams.go
      line: 141
  source:
    file: /src/github/orgs_teams.go
    line: 115
- name: Notification
  summary: Notification identifies a GitHub notification for a user.
  description: |
    Notification identifies a GitHub notification for a user.
  code: "type Notification struct {\n\tID\t\t*string\t\t\t`json:\"id,omitempty\"`\n\tRepository\t*Repository\t\t`json:\"repository,omitempty\"`\n\tSubject\t\t*NotificationSubject\t`json:\"subject,omitempty\"`\n\n\t//
    Reason identifies the event that triggered the notification.\n\t//\n\t// GitHub
    API docs: https://developer.github.com/v3/activity/notifications/#notification-reasons\n\tReason\t*string\t`json:\"reason,omitempty\"`\n\n\tUnread\t\t*bool\t\t`json:\"unread,omitempty\"`\n\tUpdatedAt\t*time.Time\t`json:\"updated_at,omitempty\"`\n\tLastReadAt\t*time.Time\t`json:\"last_read_at,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (n *Notification) GetID() string
    source:
      file: /src/github/github-accessors.go
      line: 4352
  - name: GetLastReadAt
    summary: GetLastReadAt returns the LastReadAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetLastReadAt returns the LastReadAt field if it's non-nil, zero value otherwise.
    code: func (n *Notification) GetLastReadAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 4360
  - name: GetReason
    summary: GetReason returns the Reason field if it's non-nil, zero value otherwise.
    description: |
      GetReason returns the Reason field if it's non-nil, zero value otherwise.
    code: func (n *Notification) GetReason() string
    source:
      file: /src/github/github-accessors.go
      line: 4368
  - name: GetRepository
    summary: GetRepository returns the Repository field.
    description: |
      GetRepository returns the Repository field.
    code: func (n *Notification) GetRepository() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 4376
  - name: GetSubject
    summary: GetSubject returns the Subject field.
    description: |
      GetSubject returns the Subject field.
    code: func (n *Notification) GetSubject() *NotificationSubject
    source:
      file: /src/github/github-accessors.go
      line: 4384
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (n *Notification) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4408
  - name: GetUnread
    summary: GetUnread returns the Unread field if it's non-nil, zero value otherwise.
    description: |
      GetUnread returns the Unread field if it's non-nil, zero value otherwise.
    code: func (n *Notification) GetUnread() bool
    source:
      file: /src/github/github-accessors.go
      line: 4392
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (n *Notification) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 4400
  source:
    file: /src/github/activity_notifications.go
    line: 15
- name: NotificationListOptions
  summary: NotificationListOptions specifies the optional parameters to the ActivityService.ListNotifications
    method.
  description: |
    NotificationListOptions specifies the optional parameters to the ActivityService.ListNotifications method.
  code: "type NotificationListOptions struct {\n\tAll\t\tbool\t\t`url:\"all,omitempty\"`\n\tParticipating\tbool\t\t`url:\"participating,omitempty\"`\n\tSince\t\ttime.Time\t`url:\"since,omitempty\"`\n\tBefore\t\ttime.Time\t`url:\"before,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/activity_notifications.go
    line: 41
- name: NotificationSubject
  summary: NotificationSubject identifies the subject of a notification.
  description: |
    NotificationSubject identifies the subject of a notification.
  code: "type NotificationSubject struct {\n\tTitle\t\t\t*string\t`json:\"title,omitempty\"`\n\tURL\t\t\t*string\t`json:\"url,omitempty\"`\n\tLatestCommentURL\t*string\t`json:\"latest_comment_url,omitempty\"`\n\tType\t\t\t*string\t`json:\"type,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetLatestCommentURL
    summary: GetLatestCommentURL returns the LatestCommentURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetLatestCommentURL returns the LatestCommentURL field if it's non-nil, zero value otherwise.
    code: func (n *NotificationSubject) GetLatestCommentURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4416
  - name: GetTitle
    summary: GetTitle returns the Title field if it's non-nil, zero value otherwise.
    description: |
      GetTitle returns the Title field if it's non-nil, zero value otherwise.
    code: func (n *NotificationSubject) GetTitle() string
    source:
      file: /src/github/github-accessors.go
      line: 4424
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (n *NotificationSubject) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 4432
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (n *NotificationSubject) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4440
  source:
    file: /src/github/activity_notifications.go
    line: 32
- name: OrgBlockEvent
  summary: OrgBlockEvent is triggered when an organization blocks or unblocks a user.
  description: |
    OrgBlockEvent is triggered when an organization blocks or unblocks a user. The Webhook event name is "org_block".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#orgblockevent
  code: "type OrgBlockEvent struct {\n\t// Action is the action that was performed.\n\t//
    Can be \"blocked\" or \"unblocked\".\n\tAction\t\t*string\t\t`json:\"action,omitempty\"`\n\tBlockedUser\t*User\t\t`json:\"blocked_user,omitempty\"`\n\tOrganization\t*Organization\t`json:\"organization,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (o *OrgBlockEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 4744
  - name: GetBlockedUser
    summary: GetBlockedUser returns the BlockedUser field.
    description: |
      GetBlockedUser returns the BlockedUser field.
    code: func (o *OrgBlockEvent) GetBlockedUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 4752
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (o *OrgBlockEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 4760
  - name: GetOrganization
    summary: GetOrganization returns the Organization field.
    description: |
      GetOrganization returns the Organization field.
    code: func (o *OrgBlockEvent) GetOrganization() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 4768
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (o *OrgBlockEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 4776
  source:
    file: /src/github/event_types.go
    line: 369
- name: OrgStats
  summary: OrgStats represents the number of total, disabled organizations and the
    team and team member count.
  description: |
    OrgStats represents the number of total, disabled organizations and the team and team member count.
  code: "type OrgStats struct {\n\tTotalOrgs\t\t*int\t`json:\"total_orgs,omitempty\"`\n\tDisabledOrgs\t\t*int\t`json:\"disabled_orgs,omitempty\"`\n\tTotalTeams\t\t*int\t`json:\"total_teams,omitempty\"`\n\tTotalTeamMembers\t*int\t`json:\"total_team_members,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDisabledOrgs
    summary: GetDisabledOrgs returns the DisabledOrgs field if it's non-nil, zero
      value otherwise.
    description: |
      GetDisabledOrgs returns the DisabledOrgs field if it's non-nil, zero value otherwise.
    code: func (o *OrgStats) GetDisabledOrgs() int
    source:
      file: /src/github/github-accessors.go
      line: 4784
  - name: GetTotalOrgs
    summary: GetTotalOrgs returns the TotalOrgs field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalOrgs returns the TotalOrgs field if it's non-nil, zero value otherwise.
    code: func (o *OrgStats) GetTotalOrgs() int
    source:
      file: /src/github/github-accessors.go
      line: 4792
  - name: GetTotalTeamMembers
    summary: GetTotalTeamMembers returns the TotalTeamMembers field if it's non-nil,
      zero value otherwise.
    description: |
      GetTotalTeamMembers returns the TotalTeamMembers field if it's non-nil, zero value otherwise.
    code: func (o *OrgStats) GetTotalTeamMembers() int
    source:
      file: /src/github/github-accessors.go
      line: 4800
  - name: GetTotalTeams
    summary: GetTotalTeams returns the TotalTeams field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalTeams returns the TotalTeams field if it's non-nil, zero value otherwise.
    code: func (o *OrgStats) GetTotalTeams() int
    source:
      file: /src/github/github-accessors.go
      line: 4808
  - name: String
    summary: ""
    description: ""
    code: func (s OrgStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 74
  source:
    file: /src/github/admin_stats.go
    line: 67
- name: Organization
  summary: Organization represents a GitHub organization account.
  description: |
    Organization represents a GitHub organization account.
  code: "type Organization struct {\n\tLogin\t\t\t*string\t\t`json:\"login,omitempty\"`\n\tID\t\t\t*int\t\t`json:\"id,omitempty\"`\n\tAvatarURL\t\t*string\t\t`json:\"avatar_url,omitempty\"`\n\tHTMLURL\t\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tName\t\t\t*string\t\t`json:\"name,omitempty\"`\n\tCompany\t\t\t*string\t\t`json:\"company,omitempty\"`\n\tBlog\t\t\t*string\t\t`json:\"blog,omitempty\"`\n\tLocation\t\t*string\t\t`json:\"location,omitempty\"`\n\tEmail\t\t\t*string\t\t`json:\"email,omitempty\"`\n\tDescription\t\t*string\t\t`json:\"description,omitempty\"`\n\tPublicRepos\t\t*int\t\t`json:\"public_repos,omitempty\"`\n\tPublicGists\t\t*int\t\t`json:\"public_gists,omitempty\"`\n\tFollowers\t\t*int\t\t`json:\"followers,omitempty\"`\n\tFollowing\t\t*int\t\t`json:\"following,omitempty\"`\n\tCreatedAt\t\t*time.Time\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t\t*time.Time\t`json:\"updated_at,omitempty\"`\n\tTotalPrivateRepos\t*int\t\t`json:\"total_private_repos,omitempty\"`\n\tOwnedPrivateRepos\t*int\t\t`json:\"owned_private_repos,omitempty\"`\n\tPrivateGists\t\t*int\t\t`json:\"private_gists,omitempty\"`\n\tDiskUsage\t\t*int\t\t`json:\"disk_usage,omitempty\"`\n\tCollaborators\t\t*int\t\t`json:\"collaborators,omitempty\"`\n\tBillingEmail\t\t*string\t\t`json:\"billing_email,omitempty\"`\n\tType\t\t\t*string\t\t`json:\"type,omitempty\"`\n\tPlan\t\t\t*Plan\t\t`json:\"plan,omitempty\"`\n\n\t//
    API URLs\n\tURL\t\t\t*string\t`json:\"url,omitempty\"`\n\tEventsURL\t\t*string\t`json:\"events_url,omitempty\"`\n\tHooksURL\t\t*string\t`json:\"hooks_url,omitempty\"`\n\tIssuesURL\t\t*string\t`json:\"issues_url,omitempty\"`\n\tMembersURL\t\t*string\t`json:\"members_url,omitempty\"`\n\tPublicMembersURL\t*string\t`json:\"public_members_url,omitempty\"`\n\tReposURL\t\t*string\t`json:\"repos_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAvatarURL
    summary: GetAvatarURL returns the AvatarURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetAvatarURL returns the AvatarURL field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetAvatarURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4448
  - name: GetBillingEmail
    summary: GetBillingEmail returns the BillingEmail field if it's non-nil, zero
      value otherwise.
    description: |
      GetBillingEmail returns the BillingEmail field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetBillingEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 4456
  - name: GetBlog
    summary: GetBlog returns the Blog field if it's non-nil, zero value otherwise.
    description: |
      GetBlog returns the Blog field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetBlog() string
    source:
      file: /src/github/github-accessors.go
      line: 4464
  - name: GetCollaborators
    summary: GetCollaborators returns the Collaborators field if it's non-nil, zero
      value otherwise.
    description: |
      GetCollaborators returns the Collaborators field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetCollaborators() int
    source:
      file: /src/github/github-accessors.go
      line: 4472
  - name: GetCompany
    summary: GetCompany returns the Company field if it's non-nil, zero value otherwise.
    description: |
      GetCompany returns the Company field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetCompany() string
    source:
      file: /src/github/github-accessors.go
      line: 4480
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 4488
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 4496
  - name: GetDiskUsage
    summary: GetDiskUsage returns the DiskUsage field if it's non-nil, zero value
      otherwise.
    description: |
      GetDiskUsage returns the DiskUsage field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetDiskUsage() int
    source:
      file: /src/github/github-accessors.go
      line: 4504
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 4512
  - name: GetEventsURL
    summary: GetEventsURL returns the EventsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetEventsURL returns the EventsURL field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4520
  - name: GetFollowers
    summary: GetFollowers returns the Followers field if it's non-nil, zero value
      otherwise.
    description: |
      GetFollowers returns the Followers field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetFollowers() int
    source:
      file: /src/github/github-accessors.go
      line: 4528
  - name: GetFollowing
    summary: GetFollowing returns the Following field if it's non-nil, zero value
      otherwise.
    description: |
      GetFollowing returns the Following field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetFollowing() int
    source:
      file: /src/github/github-accessors.go
      line: 4536
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4552
  - name: GetHooksURL
    summary: GetHooksURL returns the HooksURL field if it's non-nil, zero value otherwise.
    description: |
      GetHooksURL returns the HooksURL field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetHooksURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4544
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 4560
  - name: GetIssuesURL
    summary: GetIssuesURL returns the IssuesURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetIssuesURL returns the IssuesURL field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetIssuesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4568
  - name: GetLocation
    summary: GetLocation returns the Location field if it's non-nil, zero value otherwise.
    description: |
      GetLocation returns the Location field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetLocation() string
    source:
      file: /src/github/github-accessors.go
      line: 4576
  - name: GetLogin
    summary: GetLogin returns the Login field if it's non-nil, zero value otherwise.
    description: |
      GetLogin returns the Login field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetLogin() string
    source:
      file: /src/github/github-accessors.go
      line: 4584
  - name: GetMembersURL
    summary: GetMembersURL returns the MembersURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetMembersURL returns the MembersURL field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetMembersURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4592
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 4600
  - name: GetOwnedPrivateRepos
    summary: GetOwnedPrivateRepos returns the OwnedPrivateRepos field if it's non-nil,
      zero value otherwise.
    description: |
      GetOwnedPrivateRepos returns the OwnedPrivateRepos field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetOwnedPrivateRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 4608
  - name: GetPlan
    summary: GetPlan returns the Plan field.
    description: |
      GetPlan returns the Plan field.
    code: func (o *Organization) GetPlan() *Plan
    source:
      file: /src/github/github-accessors.go
      line: 4616
  - name: GetPrivateGists
    summary: GetPrivateGists returns the PrivateGists field if it's non-nil, zero
      value otherwise.
    description: |
      GetPrivateGists returns the PrivateGists field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetPrivateGists() int
    source:
      file: /src/github/github-accessors.go
      line: 4624
  - name: GetPublicGists
    summary: GetPublicGists returns the PublicGists field if it's non-nil, zero value
      otherwise.
    description: |
      GetPublicGists returns the PublicGists field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetPublicGists() int
    source:
      file: /src/github/github-accessors.go
      line: 4632
  - name: GetPublicMembersURL
    summary: GetPublicMembersURL returns the PublicMembersURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetPublicMembersURL returns the PublicMembersURL field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetPublicMembersURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4640
  - name: GetPublicRepos
    summary: GetPublicRepos returns the PublicRepos field if it's non-nil, zero value
      otherwise.
    description: |
      GetPublicRepos returns the PublicRepos field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetPublicRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 4648
  - name: GetReposURL
    summary: GetReposURL returns the ReposURL field if it's non-nil, zero value otherwise.
    description: |
      GetReposURL returns the ReposURL field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetReposURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4656
  - name: GetTotalPrivateRepos
    summary: GetTotalPrivateRepos returns the TotalPrivateRepos field if it's non-nil,
      zero value otherwise.
    description: |
      GetTotalPrivateRepos returns the TotalPrivateRepos field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetTotalPrivateRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 4664
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 4672
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4688
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (o *Organization) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 4680
  - name: String
    summary: ""
    description: ""
    code: func (o Organization) String() string
    source:
      file: /src/github/orgs.go
      line: 57
  source:
    file: /src/github/orgs.go
    line: 21
- name: OrganizationAddTeamMembershipOptions
  summary: OrganizationAddTeamMembershipOptions does stuff specifies the optional
    parameters to the OrganizationsService.AddTeamMembership method.
  description: |
    OrganizationAddTeamMembershipOptions does stuff specifies the optional parameters to the OrganizationsService.AddTeamMembership method.
  code: "type OrganizationAddTeamMembershipOptions struct {\n\t// Role specifies the
    role the user should have in the team. Possible\n\t// values are:\n\t//     member
    - a normal member of the team\n\t//     maintainer - a team maintainer. Able to
    add/remove other team\n\t//                  members, promote other team members
    to team\n\t//                  maintainer, and edit the team’s name and description\n\t//\n\t//
    Default value is \"member\".\n\tRole string `json:\"role,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/orgs_teams.go
    line: 429
- name: OrganizationAddTeamRepoOptions
  summary: OrganizationAddTeamRepoOptions specifies the optional parameters to the
    OrganizationsService.AddTeamRepo method.
  description: |
    OrganizationAddTeamRepoOptions specifies the optional parameters to the OrganizationsService.AddTeamRepo method.
  code: "type OrganizationAddTeamRepoOptions struct {\n\t// Permission specifies the
    permission to grant the team on this repository.\n\t// Possible values are:\n\t//
    \    pull - team members can pull, but not push to or administer this repository\n\t//
    \    push - team members can pull and push, but not administer this repository\n\t//
    \    admin - team members can pull, push and administer this repository\n\t//\n\t//
    If not specified, the team's permission attribute will be used.\n\tPermission
    string `json:\"permission,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/orgs_teams.go
    line: 339
- name: OrganizationEvent
  summary: OrganizationEvent is triggered when a user is added, removed, or invited
    to an organization.
  description: |
    OrganizationEvent is triggered when a user is added, removed, or invited to an organization. Events of this type are not visible in timelines. These events are only used to trigger organization hooks. Webhook event name is "organization".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#organizationevent
  code: "type OrganizationEvent struct {\n\t// Action is the action that was performed.\n\t//
    Can be one of \"member_added\", \"member_removed\", or \"member_invited\".\n\tAction\t*string\t`json:\"action,omitempty\"`\n\n\t//
    Invitaion is the invitation for the user or email if the action is \"member_invited\".\n\tInvitation\t*Invitation\t`json:\"invitation,omitempty\"`\n\n\t//
    Membership is the membership between the user and the organization.\n\t// Not
    present when the action is \"member_invited\".\n\tMembership\t*Membership\t`json:\"membership,omitempty\"`\n\n\tOrganization\t*Organization\t`json:\"organization,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (o *OrganizationEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 4696
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (o *OrganizationEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 4704
  - name: GetInvitation
    summary: GetInvitation returns the Invitation field.
    description: |
      GetInvitation returns the Invitation field.
    code: func (o *OrganizationEvent) GetInvitation() *Invitation
    source:
      file: /src/github/github-accessors.go
      line: 4712
  - name: GetMembership
    summary: GetMembership returns the Membership field.
    description: |
      GetMembership returns the Membership field.
    code: func (o *OrganizationEvent) GetMembership() *Membership
    source:
      file: /src/github/github-accessors.go
      line: 4720
  - name: GetOrganization
    summary: GetOrganization returns the Organization field.
    description: |
      GetOrganization returns the Organization field.
    code: func (o *OrganizationEvent) GetOrganization() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 4728
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (o *OrganizationEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 4736
  source:
    file: /src/github/event_types.go
    line: 348
- name: OrganizationListTeamMembersOptions
  summary: OrganizationListTeamMembersOptions specifies the optional parameters to
    the OrganizationsService.ListTeamMembers method.
  description: |
    OrganizationListTeamMembersOptions specifies the optional parameters to the OrganizationsService.ListTeamMembers method.
  code: "type OrganizationListTeamMembersOptions struct {\n\t// Role filters members
    returned by their role in the team. Possible\n\t// values are \"all\", \"member\",
    \"maintainer\". Default is \"all\".\n\tRole\tstring\t`url:\"role,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/orgs_teams.go
    line: 206
- name: OrganizationsListOptions
  summary: OrganizationsListOptions specifies the optional parameters to the OrganizationsService.ListAll
    method.
  description: |
    OrganizationsListOptions specifies the optional parameters to the OrganizationsService.ListAll method.
  code: "type OrganizationsListOptions struct {\n\t// Since filters Organizations
    by ID.\n\tSince\tint\t`url:\"since,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/orgs.go
    line: 75
- name: OrganizationsService
  summary: OrganizationsService provides access to the organization related functions
    in the GitHub API.
  description: |
    OrganizationsService provides access to the organization related functions in the GitHub API.

    GitHub API docs: https://developer.github.com/v3/orgs/
  code: type OrganizationsService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: AddTeamMembership
    summary: AddTeamMembership adds or invites a user to a team.
    description: |
      AddTeamMembership adds or invites a user to a team.

      In order to add a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with.

      If the user is already a part of the team's organization (meaning they're on at least one other team in the organization), this endpoint will add the user to the team.

      If the user is completely unaffiliated with the team's organization (meaning they're on none of the organization's teams), this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#add-team-membership
    code: func (s *OrganizationsService) AddTeamMembership(ctx context.Context, team
      int, user string, opt *OrganizationAddTeamMembershipOptions) (*Membership, *Response,
      error)
    source:
      file: /src/github/orgs_teams.go
      line: 459
  - name: AddTeamRepo
    summary: AddTeamRepo adds a repository to be managed by the specified team.
    description: |
      AddTeamRepo adds a repository to be managed by the specified team. The specified repository must be owned by the organization to which the team belongs, or a direct fork of a repository owned by the organization.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#add-team-repo
    code: func (s *OrganizationsService) AddTeamRepo(ctx context.Context, team int,
      owner string, repo string, opt *OrganizationAddTeamRepoOptions) (*Response,
      error)
    source:
      file: /src/github/orgs_teams.go
      line: 355
  - name: BlockUser
    summary: BlockUser blocks specified user from an organization.
    description: |
      BlockUser blocks specified user from an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/blocking/#block-a-user
    code: func (s *OrganizationsService) BlockUser(ctx context.Context, org string,
      user string) (*Response, error)
    source:
      file: /src/github/orgs_users_blocking.go
      line: 62
  - name: ConcealMembership
    summary: ConcealMembership conceals a user's membership in an organization.
    description: |
      ConcealMembership conceals a user's membership in an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#conceal-a-users-membership
    code: func (s *OrganizationsService) ConcealMembership(ctx context.Context, org,
      user string) (*Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 161
  - name: CreateHook
    summary: CreateHook creates a Hook for the specified org.
    description: |
      CreateHook creates a Hook for the specified org. Name and Config are required fields.

      GitHub API docs: https://developer.github.com/v3/orgs/hooks/#create-a-hook
    code: func (s *OrganizationsService) CreateHook(ctx context.Context, org string,
      hook *Hook) (*Hook, *Response, error)
    source:
      file: /src/github/orgs_hooks.go
      line: 55
  - name: CreateProject
    summary: CreateProject creates a GitHub Project for the specified organization.
    description: |
      CreateProject creates a GitHub Project for the specified organization.

      GitHub API docs: https://developer.github.com/v3/projects/#create-an-organization-project
    code: func (s *OrganizationsService) CreateProject(ctx context.Context, org string,
      opt *ProjectOptions) (*Project, *Response, error)
    source:
      file: /src/github/orgs_projects.go
      line: 43
  - name: CreateTeam
    summary: CreateTeam creates a new team within an organization.
    description: |
      CreateTeam creates a new team within an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#create-team
    code: func (s *OrganizationsService) CreateTeam(ctx context.Context, org string,
      team *NewTeam) (*Team, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 148
  - name: DeleteHook
    summary: DeleteHook deletes a specified Hook.
    description: |
      DeleteHook deletes a specified Hook.

      GitHub API docs: https://developer.github.com/v3/orgs/hooks/#delete-a-hook
    code: func (s *OrganizationsService) DeleteHook(ctx context.Context, org string,
      id int) (*Response, error)
    source:
      file: /src/github/orgs_hooks.go
      line: 100
  - name: DeleteTeam
    summary: DeleteTeam deletes a team.
    description: |
      DeleteTeam deletes a team.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#delete-team
    code: func (s *OrganizationsService) DeleteTeam(ctx context.Context, team int)
      (*Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 192
  - name: Edit
    summary: Edit an organization.
    description: |
      Edit an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/#edit-an-organization
    code: func (s *OrganizationsService) Edit(ctx context.Context, name string, org
      *Organization) (*Organization, *Response, error)
    source:
      file: /src/github/orgs.go
      line: 179
  - name: EditHook
    summary: EditHook updates a specified Hook.
    description: |
      EditHook updates a specified Hook.

      GitHub API docs: https://developer.github.com/v3/orgs/hooks/#edit-a-hook
    code: func (s *OrganizationsService) EditHook(ctx context.Context, org string,
      id int, hook *Hook) (*Hook, *Response, error)
    source:
      file: /src/github/orgs_hooks.go
      line: 74
  - name: EditOrgMembership
    summary: EditOrgMembership edits the membership for user in specified organization.
    description: |
      EditOrgMembership edits the membership for user in specified organization. Passing an empty string for user will edit the membership for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership GitHub API docs: https://developer.github.com/v3/orgs/members/#edit-your-organization-membership
    code: func (s *OrganizationsService) EditOrgMembership(ctx context.Context, user,
      org string, membership *Membership) (*Membership, *Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 240
  - name: EditTeam
    summary: EditTeam edits a team.
    description: |
      EditTeam edits a team.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#edit-team
    code: func (s *OrganizationsService) EditTeam(ctx context.Context, id int, team
      *NewTeam) (*Team, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 170
  - name: Get
    summary: Get fetches an organization by name.
    description: |
      Get fetches an organization by name.

      GitHub API docs: https://developer.github.com/v3/orgs/#get-an-organization
    code: func (s *OrganizationsService) Get(ctx context.Context, org string) (*Organization,
      *Response, error)
    source:
      file: /src/github/orgs.go
      line: 141
  - name: GetByID
    summary: GetByID fetches an organization.
    description: |
      GetByID fetches an organization.

      Note: GetByID uses the undocumented GitHub API endpoint /organizations/:id.
    code: func (s *OrganizationsService) GetByID(ctx context.Context, id int) (*Organization,
      *Response, error)
    source:
      file: /src/github/orgs.go
      line: 160
  - name: GetHook
    summary: GetHook returns a single specified Hook.
    description: |
      GetHook returns a single specified Hook.

      GitHub API docs: https://developer.github.com/v3/orgs/hooks/#get-single-hook
    code: func (s *OrganizationsService) GetHook(ctx context.Context, org string,
      id int) (*Hook, *Response, error)
    source:
      file: /src/github/orgs_hooks.go
      line: 40
  - name: GetOrgMembership
    summary: GetOrgMembership gets the membership for a user in a specified organization.
    description: |
      GetOrgMembership gets the membership for a user in a specified organization. Passing an empty string for user will get the membership for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#get-organization-membership https://developer.github.com/v3/orgs/members/#get-your-organization-membership
    code: func (s *OrganizationsService) GetOrgMembership(ctx context.Context, user,
      org string) (*Membership, *Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 212
  - name: GetTeam
    summary: GetTeam fetches a team by ID.
    description: |
      GetTeam fetches a team by ID.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#get-team
    code: func (s *OrganizationsService) GetTeam(ctx context.Context, team int) (*Team,
      *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 95
  - name: GetTeamMembership
    summary: GetTeamMembership returns the membership status for a user in a team.
    description: |
      GetTeamMembership returns the membership status for a user in a team.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#get-team-membership
    code: func (s *OrganizationsService) GetTeamMembership(ctx context.Context, team
      int, user string) (*Membership, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 409
  - name: IsBlocked
    summary: IsBlocked reports whether specified user is blocked from an organization.
    description: |
      IsBlocked reports whether specified user is blocked from an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/blocking/#check-whether-a-user-is-blocked-from-an-organization
    code: func (s *OrganizationsService) IsBlocked(ctx context.Context, org string,
      user string) (bool, *Response, error)
    source:
      file: /src/github/orgs_users_blocking.go
      line: 43
  - name: IsMember
    summary: IsMember checks if a user is a member of an organization.
    description: |
      IsMember checks if a user is a member of an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#check-membership
    code: func (s *OrganizationsService) IsMember(ctx context.Context, org, user string)
      (bool, *Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 104
  - name: IsPublicMember
    summary: IsPublicMember checks if a user is a public member of an organization.
    description: |
      IsPublicMember checks if a user is a public member of an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#check-public-membership
    code: func (s *OrganizationsService) IsPublicMember(ctx context.Context, org,
      user string) (bool, *Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 119
  - name: IsTeamMember
    summary: IsTeamMember checks if a user is a member of the specified team.
    description: |
      IsTeamMember checks if a user is a member of the specified team.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#get-team-member

      Deprecated: This API has been marked as deprecated in the Github API docs, OrganizationsService.GetTeamMembership method should be used instead.
    code: func (s *OrganizationsService) IsTeamMember(ctx context.Context, team int,
      user string) (bool, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 273
  - name: IsTeamRepo
    summary: IsTeamRepo checks if a team manages the specified repository.
    description: |
      IsTeamRepo checks if a team manages the specified repository. If the repository is managed by team, a Repository is returned which includes the permissions team has for that repo.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#check-if-a-team-manages-a-repository
    code: func (s *OrganizationsService) IsTeamRepo(ctx context.Context, team int,
      owner string, repo string) (*Repository, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 318
  - name: List
    summary: List the organizations for a user.
    description: |
      List the organizations for a user. Passing the empty string will list organizations for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/orgs/#list-user-organizations
    code: func (s *OrganizationsService) List(ctx context.Context, user string, opt
      *ListOptions) ([]*Organization, *Response, error)
    source:
      file: /src/github/orgs.go
      line: 112
  - name: ListAll
    summary: ListAll lists all organizations, in the order that they were created
      on GitHub.
    description: |
      ListAll lists all organizations, in the order that they were created on GitHub.

      Note: Pagination is powered exclusively by the since parameter. To continue listing the next set of organizations, use the ID of the last-returned organization as the opts.Since parameter for the next call.

      GitHub API docs: https://developer.github.com/v3/orgs/#list-all-organizations
    code: func (s *OrganizationsService) ListAll(ctx context.Context, opt *OrganizationsListOptions)
      ([]*Organization, *Response, error)
    source:
      file: /src/github/orgs.go
      line: 89
  - name: ListBlockedUsers
    summary: ListBlockedUsers lists all the users blocked by an organization.
    description: |
      ListBlockedUsers lists all the users blocked by an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/blocking/#list-blocked-users
    code: func (s *OrganizationsService) ListBlockedUsers(ctx context.Context, org
      string, opt *ListOptions) ([]*User, *Response, error)
    source:
      file: /src/github/orgs_users_blocking.go
      line: 16
  - name: ListChildTeams
    summary: ListChildTeams lists child teams for a team.
    description: |
      ListChildTeams lists child teams for a team.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#list-child-teams
    code: func (s *OrganizationsService) ListChildTeams(ctx context.Context, teamID
      int, opt *ListOptions) ([]*Team, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 217
  - name: ListHooks
    summary: ListHooks lists all Hooks for the specified organization.
    description: |
      ListHooks lists all Hooks for the specified organization.

      GitHub API docs: https://developer.github.com/v3/orgs/hooks/#list-hooks
    code: func (s *OrganizationsService) ListHooks(ctx context.Context, org string,
      opt *ListOptions) ([]*Hook, *Response, error)
    source:
      file: /src/github/orgs_hooks.go
      line: 16
  - name: ListMembers
    summary: ListMembers lists the members for an organization.
    description: |
      ListMembers lists the members for an organization. If the authenticated user is an owner of the organization, this will return both concealed and public members, otherwise it will only return public members.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#members-list
    code: func (s *OrganizationsService) ListMembers(ctx context.Context, org string,
      opt *ListMembersOptions) ([]*User, *Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 75
  - name: ListOrgMemberships
    summary: ListOrgMemberships lists the organization memberships for the authenticated
      user.
    description: |
      ListOrgMemberships lists the organization memberships for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#list-your-organization-memberships
    code: func (s *OrganizationsService) ListOrgMemberships(ctx context.Context, opt
      *ListOrgMembershipsOptions) ([]*Membership, *Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 184
  - name: ListOutsideCollaborators
    summary: ListOutsideCollaborators lists outside collaborators of organization's
      repositories.
    description: |
      ListOutsideCollaborators lists outside collaborators of organization's repositories. This will only work if the authenticated user is an owner of the organization.

      Warning: The API may change without advance notice during the preview period. Preview features are not supported for production use.

      GitHub API docs: https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators
    code: func (s *OrganizationsService) ListOutsideCollaborators(ctx context.Context,
      org string, opt *ListOutsideCollaboratorsOptions) ([]*User, *Response, error)
    source:
      file: /src/github/orgs_outside_collaborators.go
      line: 31
  - name: ListPendingOrgInvitations
    summary: ListPendingOrgInvitations returns a list of pending invitations.
    description: |
      ListPendingOrgInvitations returns a list of pending invitations.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations
    code: func (s *OrganizationsService) ListPendingOrgInvitations(ctx context.Context,
      org string, opt *ListOptions) ([]*Invitation, *Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 281
  - name: ListPendingTeamInvitations
    summary: ListPendingTeamInvitations get pending invitaion list in team.
    description: |
      ListPendingTeamInvitations get pending invitaion list in team. Warning: The API may change without advance notice during the preview period. Preview features are not supported for production use.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#list-pending-team-invitations
    code: func (s *OrganizationsService) ListPendingTeamInvitations(ctx context.Context,
      team int, opt *ListOptions) ([]*Invitation, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 493
  - name: ListProjects
    summary: ListProjects lists the projects for an organization.
    description: |
      ListProjects lists the projects for an organization.

      GitHub API docs: https://developer.github.com/v3/projects/#list-organization-projects
    code: func (s *OrganizationsService) ListProjects(ctx context.Context, org string,
      opt *ProjectListOptions) ([]*Project, *Response, error)
    source:
      file: /src/github/orgs_projects.go
      line: 16
  - name: ListTeamMembers
    summary: ListTeamMembers lists all of the users who are members of the specified
      team.
    description: |
      ListTeamMembers lists all of the users who are members of the specified team.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#list-team-members
    code: func (s *OrganizationsService) ListTeamMembers(ctx context.Context, team
      int, opt *OrganizationListTeamMembersOptions) ([]*User, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 244
  - name: ListTeamRepos
    summary: ListTeamRepos lists the repositories that the specified team has access
      to.
    description: |
      ListTeamRepos lists the repositories that the specified team has access to.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#list-team-repos
    code: func (s *OrganizationsService) ListTeamRepos(ctx context.Context, team int,
      opt *ListOptions) ([]*Repository, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 288
  - name: ListTeams
    summary: ListTeams lists all of the teams for an organization.
    description: |
      ListTeams lists all of the teams for an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#list-teams
    code: func (s *OrganizationsService) ListTeams(ctx context.Context, org string,
      opt *ListOptions) ([]*Team, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 68
  - name: ListUserTeams
    summary: 'ListUserTeams lists a user''s teams GitHub API docs: https://developer.github.com/v3/orgs/teams/#list-user-teams'
    description: |
      ListUserTeams lists a user's teams GitHub API docs: https://developer.github.com/v3/orgs/teams/#list-user-teams
    code: func (s *OrganizationsService) ListUserTeams(ctx context.Context, opt *ListOptions)
      ([]*Team, *Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 382
  - name: PingHook
    summary: PingHook triggers a 'ping' event to be sent to the Hook.
    description: |
      PingHook triggers a 'ping' event to be sent to the Hook.

      GitHub API docs: https://developer.github.com/v3/orgs/hooks/#ping-a-hook
    code: func (s *OrganizationsService) PingHook(ctx context.Context, org string,
      id int) (*Response, error)
    source:
      file: /src/github/orgs_hooks.go
      line: 88
  - name: PublicizeMembership
    summary: PublicizeMembership publicizes a user's membership in an organization.
    description: |
      PublicizeMembership publicizes a user's membership in an organization. (A user cannot publicize the membership for another user.)

      GitHub API docs: https://developer.github.com/v3/orgs/members/#publicize-a-users-membership
    code: func (s *OrganizationsService) PublicizeMembership(ctx context.Context,
      org, user string) (*Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 148
  - name: RemoveMember
    summary: RemoveMember removes a user from all teams of an organization.
    description: |
      RemoveMember removes a user from all teams of an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#remove-a-member
    code: func (s *OrganizationsService) RemoveMember(ctx context.Context, org, user
      string) (*Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 134
  - name: RemoveOrgMembership
    summary: RemoveOrgMembership removes user from the specified organization.
    description: |
      RemoveOrgMembership removes user from the specified organization. If the user has been invited to the organization, this will cancel their invitation.

      GitHub API docs: https://developer.github.com/v3/orgs/members/#remove-organization-membership
    code: func (s *OrganizationsService) RemoveOrgMembership(ctx context.Context,
      user, org string) (*Response, error)
    source:
      file: /src/github/orgs_members.go
      line: 268
  - name: RemoveTeamMembership
    summary: RemoveTeamMembership removes a user from a team.
    description: |
      RemoveTeamMembership removes a user from a team.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#remove-team-membership
    code: func (s *OrganizationsService) RemoveTeamMembership(ctx context.Context,
      team int, user string) (*Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 478
  - name: RemoveTeamRepo
    summary: RemoveTeamRepo removes a repository from being managed by the specified
      team.
    description: |
      RemoveTeamRepo removes a repository from being managed by the specified team. Note that this does not delete the repository, it just removes it from the team.

      GitHub API docs: https://developer.github.com/v3/orgs/teams/#remove-team-repo
    code: func (s *OrganizationsService) RemoveTeamRepo(ctx context.Context, team
      int, owner string, repo string) (*Response, error)
    source:
      file: /src/github/orgs_teams.go
      line: 370
  - name: UnblockUser
    summary: UnblockUser unblocks specified user from an organization.
    description: |
      UnblockUser unblocks specified user from an organization.

      GitHub API docs: https://developer.github.com/v3/orgs/blocking/#unblock-a-user
    code: func (s *OrganizationsService) UnblockUser(ctx context.Context, org string,
      user string) (*Response, error)
    source:
      file: /src/github/orgs_users_blocking.go
      line: 79
  source:
    file: /src/github/orgs.go
    line: 18
- name: Page
  summary: Page represents a single Wiki page.
  description: |
    Page represents a single Wiki page.
  code: "type Page struct {\n\tPageName\t*string\t`json:\"page_name,omitempty\"`\n\tTitle\t\t*string\t`json:\"title,omitempty\"`\n\tSummary\t\t*string\t`json:\"summary,omitempty\"`\n\tAction\t\t*string\t`json:\"action,omitempty\"`\n\tSHA\t\t*string\t`json:\"sha,omitempty\"`\n\tHTMLURL\t\t*string\t`json:\"html_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (p *Page) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 4816
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (p *Page) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4824
  - name: GetPageName
    summary: GetPageName returns the PageName field if it's non-nil, zero value otherwise.
    description: |
      GetPageName returns the PageName field if it's non-nil, zero value otherwise.
    code: func (p *Page) GetPageName() string
    source:
      file: /src/github/github-accessors.go
      line: 4832
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (p *Page) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 4840
  - name: GetSummary
    summary: GetSummary returns the Summary field if it's non-nil, zero value otherwise.
    description: |
      GetSummary returns the Summary field if it's non-nil, zero value otherwise.
    code: func (p *Page) GetSummary() string
    source:
      file: /src/github/github-accessors.go
      line: 4848
  - name: GetTitle
    summary: GetTitle returns the Title field if it's non-nil, zero value otherwise.
    description: |
      GetTitle returns the Title field if it's non-nil, zero value otherwise.
    code: func (p *Page) GetTitle() string
    source:
      file: /src/github/github-accessors.go
      line: 4856
  source:
    file: /src/github/event_types.go
    line: 111
- name: PageBuildEvent
  summary: PageBuildEvent represents an attempted build of a GitHub Pages site, whether
    successful or not.
  description: |
    PageBuildEvent represents an attempted build of a GitHub Pages site, whether successful or not. The Webhook event name is "page_build".

    This event is triggered on push to a GitHub Pages enabled branch (gh-pages for project pages, master for user and organization pages).

    Events of this type are not visible in timelines, they are only used to trigger hooks.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#pagebuildevent
  code: "type PageBuildEvent struct {\n\tBuild\t*PagesBuild\t`json:\"build,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBuild
    summary: GetBuild returns the Build field.
    description: |
      GetBuild returns the Build field.
    code: func (p *PageBuildEvent) GetBuild() *PagesBuild
    source:
      file: /src/github/github-accessors.go
      line: 4864
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (p *PageBuildEvent) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 4872
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *PageBuildEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 4880
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *PageBuildEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 4888
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (p *PageBuildEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 4896
  source:
    file: /src/github/event_types.go
    line: 391
- name: PageStats
  summary: PageStats represents the total number of github pages.
  description: |
    PageStats represents the total number of github pages.
  code: "type PageStats struct {\n\tTotalPages *int `json:\"total_pages,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetTotalPages
    summary: GetTotalPages returns the TotalPages field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalPages returns the TotalPages field if it's non-nil, zero value otherwise.
    code: func (p *PageStats) GetTotalPages() int
    source:
      file: /src/github/github-accessors.go
      line: 5016
  - name: String
    summary: ""
    description: ""
    code: func (s PageStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 96
  source:
    file: /src/github/admin_stats.go
    line: 92
- name: Pages
  summary: Pages represents a GitHub Pages site configuration.
  description: |
    Pages represents a GitHub Pages site configuration.
  code: "type Pages struct {\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tStatus\t\t*string\t`json:\"status,omitempty\"`\n\tCNAME\t\t*string\t`json:\"cname,omitempty\"`\n\tCustom404\t*bool\t`json:\"custom_404,omitempty\"`\n\tHTMLURL\t\t*string\t`json:\"html_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCNAME
    summary: GetCNAME returns the CNAME field if it's non-nil, zero value otherwise.
    description: |
      GetCNAME returns the CNAME field if it's non-nil, zero value otherwise.
    code: func (p *Pages) GetCNAME() string
    source:
      file: /src/github/github-accessors.go
      line: 4904
  - name: GetCustom404
    summary: GetCustom404 returns the Custom404 field if it's non-nil, zero value
      otherwise.
    description: |
      GetCustom404 returns the Custom404 field if it's non-nil, zero value otherwise.
    code: func (p *Pages) GetCustom404() bool
    source:
      file: /src/github/github-accessors.go
      line: 4912
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (p *Pages) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4920
  - name: GetStatus
    summary: GetStatus returns the Status field if it's non-nil, zero value otherwise.
    description: |
      GetStatus returns the Status field if it's non-nil, zero value otherwise.
    code: func (p *Pages) GetStatus() string
    source:
      file: /src/github/github-accessors.go
      line: 4928
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (p *Pages) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 4936
  source:
    file: /src/github/repos_pages.go
    line: 14
- name: PagesBuild
  summary: PagesBuild represents the build information for a GitHub Pages site.
  description: |
    PagesBuild represents the build information for a GitHub Pages site.
  code: "type PagesBuild struct {\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tStatus\t\t*string\t\t`json:\"status,omitempty\"`\n\tError\t\t*PagesError\t`json:\"error,omitempty\"`\n\tPusher\t\t*User\t\t`json:\"pusher,omitempty\"`\n\tCommit\t\t*string\t\t`json:\"commit,omitempty\"`\n\tDuration\t*int\t\t`json:\"duration,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t`json:\"updated_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCommit
    summary: GetCommit returns the Commit field if it's non-nil, zero value otherwise.
    description: |
      GetCommit returns the Commit field if it's non-nil, zero value otherwise.
    code: func (p *PagesBuild) GetCommit() string
    source:
      file: /src/github/github-accessors.go
      line: 4944
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (p *PagesBuild) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 4952
  - name: GetDuration
    summary: GetDuration returns the Duration field if it's non-nil, zero value otherwise.
    description: |
      GetDuration returns the Duration field if it's non-nil, zero value otherwise.
    code: func (p *PagesBuild) GetDuration() int
    source:
      file: /src/github/github-accessors.go
      line: 4960
  - name: GetError
    summary: GetError returns the Error field.
    description: |
      GetError returns the Error field.
    code: func (p *PagesBuild) GetError() *PagesError
    source:
      file: /src/github/github-accessors.go
      line: 4968
  - name: GetPusher
    summary: GetPusher returns the Pusher field.
    description: |
      GetPusher returns the Pusher field.
    code: func (p *PagesBuild) GetPusher() *User
    source:
      file: /src/github/github-accessors.go
      line: 4976
  - name: GetStatus
    summary: GetStatus returns the Status field if it's non-nil, zero value otherwise.
    description: |
      GetStatus returns the Status field if it's non-nil, zero value otherwise.
    code: func (p *PagesBuild) GetStatus() string
    source:
      file: /src/github/github-accessors.go
      line: 4984
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (p *PagesBuild) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5000
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (p *PagesBuild) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 4992
  source:
    file: /src/github/repos_pages.go
    line: 28
- name: PagesError
  summary: PagesError represents a build error for a GitHub Pages site.
  description: |
    PagesError represents a build error for a GitHub Pages site.
  code: "type PagesError struct {\n\tMessage *string `json:\"message,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetMessage
    summary: GetMessage returns the Message field if it's non-nil, zero value otherwise.
    description: |
      GetMessage returns the Message field if it's non-nil, zero value otherwise.
    code: func (p *PagesError) GetMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 5008
  source:
    file: /src/github/repos_pages.go
    line: 23
- name: PingEvent
  summary: PingEvent is triggered when a Webhook is added to GitHub.
  description: |
    PingEvent is triggered when a Webhook is added to GitHub.

    GitHub API docs: https://developer.github.com/webhooks/#ping-event
  code: "type PingEvent struct {\n\t// Random string of GitHub zen.\n\tZen\t*string\t`json:\"zen,omitempty\"`\n\t//
    The ID of the webhook that triggered the ping.\n\tHookID\t*int\t`json:\"hook_id,omitempty\"`\n\t//
    The webhook configuration.\n\tHook\t\t*Hook\t\t`json:\"hook,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetHook
    summary: GetHook returns the Hook field.
    description: |
      GetHook returns the Hook field.
    code: func (p *PingEvent) GetHook() *Hook
    source:
      file: /src/github/github-accessors.go
      line: 5024
  - name: GetHookID
    summary: GetHookID returns the HookID field if it's non-nil, zero value otherwise.
    description: |
      GetHookID returns the HookID field if it's non-nil, zero value otherwise.
    code: func (p *PingEvent) GetHookID() int
    source:
      file: /src/github/github-accessors.go
      line: 5032
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *PingEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 5040
  - name: GetZen
    summary: GetZen returns the Zen field if it's non-nil, zero value otherwise.
    description: |
      GetZen returns the Zen field if it's non-nil, zero value otherwise.
    code: func (p *PingEvent) GetZen() string
    source:
      file: /src/github/github-accessors.go
      line: 5048
  source:
    file: /src/github/event_types.go
    line: 404
- name: Plan
  summary: Plan represents the payment plan for an account.
  description: |
    Plan represents the payment plan for an account. See plans at https://github.com/plans.
  code: "type Plan struct {\n\tName\t\t*string\t`json:\"name,omitempty\"`\n\tSpace\t\t*int\t`json:\"space,omitempty\"`\n\tCollaborators\t*int\t`json:\"collaborators,omitempty\"`\n\tPrivateRepos\t*int\t`json:\"private_repos,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCollaborators
    summary: GetCollaborators returns the Collaborators field if it's non-nil, zero
      value otherwise.
    description: |
      GetCollaborators returns the Collaborators field if it's non-nil, zero value otherwise.
    code: func (p *Plan) GetCollaborators() int
    source:
      file: /src/github/github-accessors.go
      line: 5056
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (p *Plan) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 5064
  - name: GetPrivateRepos
    summary: GetPrivateRepos returns the PrivateRepos field if it's non-nil, zero
      value otherwise.
    description: |
      GetPrivateRepos returns the PrivateRepos field if it's non-nil, zero value otherwise.
    code: func (p *Plan) GetPrivateRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 5072
  - name: GetSpace
    summary: GetSpace returns the Space field if it's non-nil, zero value otherwise.
    description: |
      GetSpace returns the Space field if it's non-nil, zero value otherwise.
    code: func (p *Plan) GetSpace() int
    source:
      file: /src/github/github-accessors.go
      line: 5080
  - name: String
    summary: ""
    description: ""
    code: func (p Plan) String() string
    source:
      file: /src/github/orgs.go
      line: 69
  source:
    file: /src/github/orgs.go
    line: 62
- name: Project
  summary: Project represents a GitHub Project.
  description: |
    Project represents a GitHub Project.
  code: "type Project struct {\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tOwnerURL\t*string\t\t`json:\"owner_url,omitempty\"`\n\tName\t\t*string\t\t`json:\"name,omitempty\"`\n\tBody\t\t*string\t\t`json:\"body,omitempty\"`\n\tNumber\t\t*int\t\t`json:\"number,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t`json:\"updated_at,omitempty\"`\n\n\t//
    The User object that generated the project.\n\tCreator\t*User\t`json:\"creator,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (p *Project) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 5088
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (p *Project) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 5096
  - name: GetCreator
    summary: GetCreator returns the Creator field.
    description: |
      GetCreator returns the Creator field.
    code: func (p *Project) GetCreator() *User
    source:
      file: /src/github/github-accessors.go
      line: 5104
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (p *Project) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 5112
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (p *Project) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 5120
  - name: GetNumber
    summary: GetNumber returns the Number field if it's non-nil, zero value otherwise.
    description: |
      GetNumber returns the Number field if it's non-nil, zero value otherwise.
    code: func (p *Project) GetNumber() int
    source:
      file: /src/github/github-accessors.go
      line: 5128
  - name: GetOwnerURL
    summary: GetOwnerURL returns the OwnerURL field if it's non-nil, zero value otherwise.
    description: |
      GetOwnerURL returns the OwnerURL field if it's non-nil, zero value otherwise.
    code: func (p *Project) GetOwnerURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5136
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (p *Project) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5152
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (p *Project) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 5144
  - name: String
    summary: ""
    description: ""
    code: func (p Project) String() string
    source:
      file: /src/github/projects.go
      line: 34
  source:
    file: /src/github/projects.go
    line: 20
- name: ProjectCard
  summary: ProjectCard represents a card in a column of a GitHub Project.
  description: |
    ProjectCard represents a card in a column of a GitHub Project.

    GitHub API docs: https://developer.github.com/v3/projects/cards/#get-a-project-card
  code: "type ProjectCard struct {\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tColumnURL\t*string\t\t`json:\"column_url,omitempty\"`\n\tContentURL\t*string\t\t`json:\"content_url,omitempty\"`\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tNote\t\t*string\t\t`json:\"note,omitempty\"`\n\tCreator\t\t*User\t\t`json:\"creator,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t`json:\"updated_at,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tColumnID\t*int\t`json:\"column_id,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetColumnID
    summary: GetColumnID returns the ColumnID field if it's non-nil, zero value otherwise.
    description: |
      GetColumnID returns the ColumnID field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCard) GetColumnID() int
    source:
      file: /src/github/github-accessors.go
      line: 5160
  - name: GetColumnURL
    summary: GetColumnURL returns the ColumnURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetColumnURL returns the ColumnURL field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCard) GetColumnURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5168
  - name: GetContentURL
    summary: GetContentURL returns the ContentURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetContentURL returns the ContentURL field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCard) GetContentURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5176
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCard) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 5184
  - name: GetCreator
    summary: GetCreator returns the Creator field.
    description: |
      GetCreator returns the Creator field.
    code: func (p *ProjectCard) GetCreator() *User
    source:
      file: /src/github/github-accessors.go
      line: 5192
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCard) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 5200
  - name: GetNote
    summary: GetNote returns the Note field if it's non-nil, zero value otherwise.
    description: |
      GetNote returns the Note field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCard) GetNote() string
    source:
      file: /src/github/github-accessors.go
      line: 5208
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCard) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5224
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCard) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 5216
  source:
    file: /src/github/projects.go
    line: 269
- name: ProjectCardChange
  summary: ProjectCardChange represents the changes when a project card has been edited.
  description: |
    ProjectCardChange represents the changes when a project card has been edited.
  code: "type ProjectCardChange struct {\n\tNote *struct {\n\t\tFrom *string `json:\"from,omitempty\"`\n\t}
    `json:\"note,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/event_types.go
    line: 155
- name: ProjectCardEvent
  summary: ProjectCardEvent is triggered when a project card is created, updated,
    moved, converted to an issue, or deleted.
  description: |
    ProjectCardEvent is triggered when a project card is created, updated, moved, converted to an issue, or deleted. The webhook event name is "project_card".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#projectcardevent
  code: "type ProjectCardEvent struct {\n\tAction\t\t*string\t\t\t`json:\"action,omitempty\"`\n\tChanges\t\t*ProjectCardChange\t`json:\"changes,omitempty\"`\n\tAfterID\t\t*int\t\t\t`json:\"after_id,omitempty\"`\n\tProjectCard\t*ProjectCard\t\t`json:\"project_card,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tOrg\t\t*Organization\t`json:\"organization,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCardEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 5232
  - name: GetAfterID
    summary: GetAfterID returns the AfterID field if it's non-nil, zero value otherwise.
    description: |
      GetAfterID returns the AfterID field if it's non-nil, zero value otherwise.
    code: func (p *ProjectCardEvent) GetAfterID() int
    source:
      file: /src/github/github-accessors.go
      line: 5240
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (p *ProjectCardEvent) GetChanges() *ProjectCardChange
    source:
      file: /src/github/github-accessors.go
      line: 5248
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *ProjectCardEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 5256
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (p *ProjectCardEvent) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 5264
  - name: GetProjectCard
    summary: GetProjectCard returns the ProjectCard field.
    description: |
      GetProjectCard returns the ProjectCard field.
    code: func (p *ProjectCardEvent) GetProjectCard() *ProjectCard
    source:
      file: /src/github/github-accessors.go
      line: 5272
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *ProjectCardEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 5280
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (p *ProjectCardEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 5288
  source:
    file: /src/github/event_types.go
    line: 434
- name: ProjectCardMoveOptions
  summary: ProjectCardMoveOptions specifies the parameters to the ProjectsService.MoveProjectCard
    method.
  description: |
    ProjectCardMoveOptions specifies the parameters to the ProjectsService.MoveProjectCard method.
  code: "type ProjectCardMoveOptions struct {\n\t// Position can be one of \"top\",
    \"bottom\", or \"after:<card-id>\", where\n\t// <card-id> is the ID of a card
    in the same project.\n\tPosition\tstring\t`json:\"position\"`\n\t// ColumnID is
    the ID of a column in the same project. Note that ColumnID\n\t// is required when
    using Position \"after:<card-id>\" when that card is in\n\t// another column;
    otherwise it is optional.\n\tColumnID\tint\t`json:\"column_id,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/projects.go
    line: 407
- name: ProjectCardOptions
  summary: ProjectCardOptions specifies the parameters to the ProjectsService.CreateProjectCard
    and ProjectsService.UpdateProjectCard methods.
  description: |
    ProjectCardOptions specifies the parameters to the ProjectsService.CreateProjectCard and ProjectsService.UpdateProjectCard methods.
  code: "type ProjectCardOptions struct {\n\t// The note of the card. Note and ContentID
    are mutually exclusive.\n\tNote\tstring\t`json:\"note,omitempty\"`\n\t// The ID
    (not Number) of the Issue to associate with this card.\n\t// Note and ContentID
    are mutually exclusive.\n\tContentID\tint\t`json:\"content_id,omitempty\"`\n\t//
    The type of content to associate with this card. Possible values are: \"Issue\".\n\tContentType\tstring\t`json:\"content_type,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/projects.go
    line: 335
- name: ProjectChange
  summary: ProjectChange represents the changes when a project has been edited.
  description: |
    ProjectChange represents the changes when a project has been edited.
  code: "type ProjectChange struct {\n\tName\t*struct {\n\t\tFrom *string `json:\"from,omitempty\"`\n\t}\t`json:\"name,omitempty\"`\n\tBody\t*struct
    {\n\t\tFrom *string `json:\"from,omitempty\"`\n\t}\t`json:\"body,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/event_types.go
    line: 145
- name: ProjectColumn
  summary: ProjectColumn represents a column of a GitHub Project.
  description: |
    ProjectColumn represents a column of a GitHub Project.

    GitHub API docs: https://developer.github.com/v3/repos/projects/
  code: "type ProjectColumn struct {\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tName\t\t*string\t\t`json:\"name,omitempty\"`\n\tProjectURL\t*string\t\t`json:\"project_url,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t`json:\"updated_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (p *ProjectColumn) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 5296
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (p *ProjectColumn) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 5304
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (p *ProjectColumn) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 5312
  - name: GetProjectURL
    summary: GetProjectURL returns the ProjectURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetProjectURL returns the ProjectURL field if it's non-nil, zero value otherwise.
    code: func (p *ProjectColumn) GetProjectURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5320
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (p *ProjectColumn) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 5328
  source:
    file: /src/github/projects.go
    line: 117
- name: ProjectColumnChange
  summary: ProjectColumnChange represents the changes when a project column has been
    edited.
  description: |
    ProjectColumnChange represents the changes when a project column has been edited.
  code: "type ProjectColumnChange struct {\n\tName *struct {\n\t\tFrom *string `json:\"from,omitempty\"`\n\t}
    `json:\"name,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/event_types.go
    line: 162
- name: ProjectColumnEvent
  summary: ProjectColumnEvent is triggered when a project column is created, updated,
    moved, or deleted.
  description: |
    ProjectColumnEvent is triggered when a project column is created, updated, moved, or deleted. The webhook event name is "project_column".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#projectcolumnevent
  code: "type ProjectColumnEvent struct {\n\tAction\t\t*string\t\t\t`json:\"action,omitempty\"`\n\tChanges\t\t*ProjectColumnChange\t`json:\"changes,omitempty\"`\n\tAfterID\t\t*int\t\t\t`json:\"after_id,omitempty\"`\n\tProjectColumn\t*ProjectColumn\t\t`json:\"project_column,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tOrg\t\t*Organization\t`json:\"organization,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (p *ProjectColumnEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 5336
  - name: GetAfterID
    summary: GetAfterID returns the AfterID field if it's non-nil, zero value otherwise.
    description: |
      GetAfterID returns the AfterID field if it's non-nil, zero value otherwise.
    code: func (p *ProjectColumnEvent) GetAfterID() int
    source:
      file: /src/github/github-accessors.go
      line: 5344
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (p *ProjectColumnEvent) GetChanges() *ProjectColumnChange
    source:
      file: /src/github/github-accessors.go
      line: 5352
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *ProjectColumnEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 5360
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (p *ProjectColumnEvent) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 5368
  - name: GetProjectColumn
    summary: GetProjectColumn returns the ProjectColumn field.
    description: |
      GetProjectColumn returns the ProjectColumn field.
    code: func (p *ProjectColumnEvent) GetProjectColumn() *ProjectColumn
    source:
      file: /src/github/github-accessors.go
      line: 5376
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *ProjectColumnEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 5384
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (p *ProjectColumnEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 5392
  source:
    file: /src/github/event_types.go
    line: 451
- name: ProjectColumnMoveOptions
  summary: ProjectColumnMoveOptions specifies the parameters to the ProjectsService.MoveProjectColumn
    method.
  description: |
    ProjectColumnMoveOptions specifies the parameters to the ProjectsService.MoveProjectColumn method.
  code: "type ProjectColumnMoveOptions struct {\n\t// Position can be one of \"first\",
    \"last\", or \"after:<column-id>\", where\n\t// <column-id> is the ID of a column
    in the same project. (Required.)\n\tPosition string `json:\"position\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/projects.go
    line: 244
- name: ProjectColumnOptions
  summary: ProjectColumnOptions specifies the parameters to the ProjectsService.CreateProjectColumn
    and ProjectsService.UpdateProjectColumn methods.
  description: |
    ProjectColumnOptions specifies the parameters to the ProjectsService.CreateProjectColumn and ProjectsService.UpdateProjectColumn methods.
  code: "type ProjectColumnOptions struct {\n\t// The name of the project column.
    (Required for creation and update.)\n\tName string `json:\"name\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/projects.go
    line: 177
- name: ProjectEvent
  summary: ProjectEvent is triggered when project is created, modified or deleted.
  description: |
    ProjectEvent is triggered when project is created, modified or deleted. The webhook event name is "project".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#projectevent
  code: "type ProjectEvent struct {\n\tAction\t*string\t\t`json:\"action,omitempty\"`\n\tChanges\t*ProjectChange\t`json:\"changes,omitempty\"`\n\tProject\t*Project\t`json:\"project,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tOrg\t\t*Organization\t`json:\"organization,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (p *ProjectEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 5400
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (p *ProjectEvent) GetChanges() *ProjectChange
    source:
      file: /src/github/github-accessors.go
      line: 5408
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *ProjectEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 5416
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (p *ProjectEvent) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 5424
  - name: GetProject
    summary: GetProject returns the Project field.
    description: |
      GetProject returns the Project field.
    code: func (p *ProjectEvent) GetProject() *Project
    source:
      file: /src/github/github-accessors.go
      line: 5432
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *ProjectEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 5440
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (p *ProjectEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 5448
  source:
    file: /src/github/event_types.go
    line: 418
- name: ProjectListOptions
  summary: ProjectListOptions specifies the optional parameters to the OrganizationsService.ListProjects
    and RepositoriesService.ListProjects methods.
  description: |
    ProjectListOptions specifies the optional parameters to the OrganizationsService.ListProjects and RepositoriesService.ListProjects methods.
  code: "type ProjectListOptions struct {\n\t// Indicates the state of the projects
    to return. Can be either open, closed, or all. Default: open\n\tState\tstring\t`url:\"state,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos_projects.go
    line: 15
- name: ProjectOptions
  summary: ProjectOptions specifies the parameters to the RepositoriesService.CreateProject
    and ProjectsService.UpdateProject methods.
  description: |
    ProjectOptions specifies the parameters to the RepositoriesService.CreateProject and ProjectsService.UpdateProject methods.
  code: "type ProjectOptions struct {\n\t// The name of the project. (Required for
    creation; optional for update.)\n\tName\tstring\t`json:\"name,omitempty\"`\n\t//
    The body of the project. (Optional.)\n\tBody\tstring\t`json:\"body,omitempty\"`\n\n\t//
    State of the project. Either \"open\" or \"closed\". (Optional.)\n\tState\tstring\t`json:\"state,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/projects.go
    line: 63
- name: ProjectsService
  summary: ProjectsService provides access to the projects functions in the GitHub
    API.
  description: |
    ProjectsService provides access to the projects functions in the GitHub API.

    GitHub API docs: https://developer.github.com/v3/projects/
  code: type ProjectsService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: CreateProjectCard
    summary: CreateProjectCard creates a card in the specified column of a GitHub
      Project.
    description: |
      CreateProjectCard creates a card in the specified column of a GitHub Project.

      GitHub API docs: https://developer.github.com/v3/projects/cards/#create-a-project-card
    code: func (s *ProjectsService) CreateProjectCard(ctx context.Context, columnID
      int, opt *ProjectCardOptions) (*ProjectCard, *Response, error)
    source:
      file: /src/github/projects.go
      line: 348
  - name: CreateProjectColumn
    summary: CreateProjectColumn creates a column for the specified (by number) project.
    description: |
      CreateProjectColumn creates a column for the specified (by number) project.

      GitHub API docs: https://developer.github.com/v3/projects/columns/#create-a-project-column
    code: func (s *ProjectsService) CreateProjectColumn(ctx context.Context, projectID
      int, opt *ProjectColumnOptions) (*ProjectColumn, *Response, error)
    source:
      file: /src/github/projects.go
      line: 185
  - name: DeleteProject
    summary: DeleteProject deletes a GitHub Project from a repository.
    description: |
      DeleteProject deletes a GitHub Project from a repository.

      GitHub API docs: https://developer.github.com/v3/projects/#delete-a-project
    code: func (s *ProjectsService) DeleteProject(ctx context.Context, id int) (*Response,
      error)
    source:
      file: /src/github/projects.go
      line: 101
  - name: DeleteProjectCard
    summary: DeleteProjectCard deletes a card from a GitHub Project.
    description: |
      DeleteProjectCard deletes a card from a GitHub Project.

      GitHub API docs: https://developer.github.com/v3/projects/cards/#delete-a-project-card
    code: func (s *ProjectsService) DeleteProjectCard(ctx context.Context, cardID
      int) (*Response, error)
    source:
      file: /src/github/projects.go
      line: 392
  - name: DeleteProjectColumn
    summary: DeleteProjectColumn deletes a column from a GitHub Project.
    description: |
      DeleteProjectColumn deletes a column from a GitHub Project.

      GitHub API docs: https://developer.github.com/v3/projects/columns/#delete-a-project-column
    code: func (s *ProjectsService) DeleteProjectColumn(ctx context.Context, columnID
      int) (*Response, error)
    source:
      file: /src/github/projects.go
      line: 229
  - name: GetProject
    summary: GetProject gets a GitHub Project for a repo.
    description: |
      GetProject gets a GitHub Project for a repo.

      GitHub API docs: https://developer.github.com/v3/projects/#get-a-project
    code: func (s *ProjectsService) GetProject(ctx context.Context, id int) (*Project,
      *Response, error)
    source:
      file: /src/github/projects.go
      line: 41
  - name: GetProjectCard
    summary: GetProjectCard gets a card in a column of a GitHub Project.
    description: |
      GetProjectCard gets a card in a column of a GitHub Project.

      GitHub API docs: https://developer.github.com/v3/projects/cards/#get-a-project-card
    code: func (s *ProjectsService) GetProjectCard(ctx context.Context, columnID int)
      (*ProjectCard, *Response, error)
    source:
      file: /src/github/projects.go
      line: 313
  - name: GetProjectColumn
    summary: GetProjectColumn gets a column of a GitHub Project for a repo.
    description: |
      GetProjectColumn gets a column of a GitHub Project for a repo.

      GitHub API docs: https://developer.github.com/v3/projects/columns/#get-a-project-column
    code: func (s *ProjectsService) GetProjectColumn(ctx context.Context, id int)
      (*ProjectColumn, *Response, error)
    source:
      file: /src/github/projects.go
      line: 155
  - name: ListProjectCards
    summary: ListProjectCards lists the cards in a column of a GitHub Project.
    description: |
      ListProjectCards lists the cards in a column of a GitHub Project.

      GitHub API docs: https://developer.github.com/v3/projects/cards/#list-project-cards
    code: func (s *ProjectsService) ListProjectCards(ctx context.Context, columnID
      int, opt *ListOptions) ([]*ProjectCard, *Response, error)
    source:
      file: /src/github/projects.go
      line: 286
  - name: ListProjectColumns
    summary: ListProjectColumns lists the columns of a GitHub Project for a repo.
    description: |
      ListProjectColumns lists the columns of a GitHub Project for a repo.

      GitHub API docs: https://developer.github.com/v3/projects/columns/#list-project-columns
    code: func (s *ProjectsService) ListProjectColumns(ctx context.Context, projectID
      int, opt *ListOptions) ([]*ProjectColumn, *Response, error)
    source:
      file: /src/github/projects.go
      line: 128
  - name: MoveProjectCard
    summary: MoveProjectCard moves a card within a GitHub Project.
    description: |
      MoveProjectCard moves a card within a GitHub Project.

      GitHub API docs: https://developer.github.com/v3/projects/cards/#move-a-project-card
    code: func (s *ProjectsService) MoveProjectCard(ctx context.Context, cardID int,
      opt *ProjectCardMoveOptions) (*Response, error)
    source:
      file: /src/github/projects.go
      line: 420
  - name: MoveProjectColumn
    summary: MoveProjectColumn moves a column within a GitHub Project.
    description: |
      MoveProjectColumn moves a column within a GitHub Project.

      GitHub API docs: https://developer.github.com/v3/projects/columns/#move-a-project-column
    code: func (s *ProjectsService) MoveProjectColumn(ctx context.Context, columnID
      int, opt *ProjectColumnMoveOptions) (*Response, error)
    source:
      file: /src/github/projects.go
      line: 253
  - name: UpdateProject
    summary: UpdateProject updates a repository project.
    description: |
      UpdateProject updates a repository project.

      GitHub API docs: https://developer.github.com/v3/projects/#update-a-project
    code: func (s *ProjectsService) UpdateProject(ctx context.Context, id int, opt
      *ProjectOptions) (*Project, *Response, error)
    source:
      file: /src/github/projects.go
      line: 79
  - name: UpdateProjectCard
    summary: UpdateProjectCard updates a card of a GitHub Project.
    description: |
      UpdateProjectCard updates a card of a GitHub Project.

      GitHub API docs: https://developer.github.com/v3/projects/cards/#update-a-project-card
    code: func (s *ProjectsService) UpdateProjectCard(ctx context.Context, cardID
      int, opt *ProjectCardOptions) (*ProjectCard, *Response, error)
    source:
      file: /src/github/projects.go
      line: 370
  - name: UpdateProjectColumn
    summary: UpdateProjectColumn updates a column of a GitHub Project.
    description: |
      UpdateProjectColumn updates a column of a GitHub Project.

      GitHub API docs: https://developer.github.com/v3/projects/columns/#update-a-project-column
    code: func (s *ProjectsService) UpdateProjectColumn(ctx context.Context, columnID
      int, opt *ProjectColumnOptions) (*ProjectColumn, *Response, error)
    source:
      file: /src/github/projects.go
      line: 207
  source:
    file: /src/github/projects.go
    line: 17
- name: Protection
  summary: Protection represents a repository branch's protection.
  description: |
    Protection represents a repository branch's protection.
  code: "type Protection struct {\n\tRequiredStatusChecks\t\t*RequiredStatusChecks\t\t`json:\"required_status_checks\"`\n\tRequiredPullRequestReviews\t*PullRequestReviewsEnforcement\t`json:\"required_pull_request_reviews\"`\n\tEnforceAdmins\t\t\t*AdminEnforcement\t\t`json:\"enforce_admins\"`\n\tRestrictions\t\t\t*BranchRestrictions\t\t`json:\"restrictions\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetEnforceAdmins
    summary: GetEnforceAdmins returns the EnforceAdmins field.
    description: |
      GetEnforceAdmins returns the EnforceAdmins field.
    code: func (p *Protection) GetEnforceAdmins() *AdminEnforcement
    source:
      file: /src/github/github-accessors.go
      line: 5456
  - name: GetRequiredPullRequestReviews
    summary: GetRequiredPullRequestReviews returns the RequiredPullRequestReviews
      field.
    description: |
      GetRequiredPullRequestReviews returns the RequiredPullRequestReviews field.
    code: func (p *Protection) GetRequiredPullRequestReviews() *PullRequestReviewsEnforcement
    source:
      file: /src/github/github-accessors.go
      line: 5464
  - name: GetRequiredStatusChecks
    summary: GetRequiredStatusChecks returns the RequiredStatusChecks field.
    description: |
      GetRequiredStatusChecks returns the RequiredStatusChecks field.
    code: func (p *Protection) GetRequiredStatusChecks() *RequiredStatusChecks
    source:
      file: /src/github/github-accessors.go
      line: 5472
  - name: GetRestrictions
    summary: GetRestrictions returns the Restrictions field.
    description: |
      GetRestrictions returns the Restrictions field.
    code: func (p *Protection) GetRestrictions() *BranchRestrictions
    source:
      file: /src/github/github-accessors.go
      line: 5480
  source:
    file: /src/github/repos.go
    line: 537
- name: ProtectionRequest
  summary: ProtectionRequest represents a request to create/edit a branch's protection.
  description: |
    ProtectionRequest represents a request to create/edit a branch's protection.
  code: "type ProtectionRequest struct {\n\tRequiredStatusChecks\t\t*RequiredStatusChecks\t\t\t`json:\"required_status_checks\"`\n\tRequiredPullRequestReviews\t*PullRequestReviewsEnforcementRequest\t`json:\"required_pull_request_reviews\"`\n\tEnforceAdmins\t\t\tbool\t\t\t\t\t`json:\"enforce_admins\"`\n\tRestrictions\t\t\t*BranchRestrictionsRequest\t\t`json:\"restrictions\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetRequiredPullRequestReviews
    summary: GetRequiredPullRequestReviews returns the RequiredPullRequestReviews
      field.
    description: |
      GetRequiredPullRequestReviews returns the RequiredPullRequestReviews field.
    code: func (p *ProtectionRequest) GetRequiredPullRequestReviews() *PullRequestReviewsEnforcementRequest
    source:
      file: /src/github/github-accessors.go
      line: 5488
  - name: GetRequiredStatusChecks
    summary: GetRequiredStatusChecks returns the RequiredStatusChecks field.
    description: |
      GetRequiredStatusChecks returns the RequiredStatusChecks field.
    code: func (p *ProtectionRequest) GetRequiredStatusChecks() *RequiredStatusChecks
    source:
      file: /src/github/github-accessors.go
      line: 5496
  - name: GetRestrictions
    summary: GetRestrictions returns the Restrictions field.
    description: |
      GetRestrictions returns the Restrictions field.
    code: func (p *ProtectionRequest) GetRestrictions() *BranchRestrictionsRequest
    source:
      file: /src/github/github-accessors.go
      line: 5504
  source:
    file: /src/github/repos.go
    line: 545
- name: PublicEvent
  summary: PublicEvent is triggered when a private repository is open sourced.
  description: |
    PublicEvent is triggered when a private repository is open sourced. According to GitHub: "Without a doubt: the best GitHub event." The Webhook event name is "public".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#publicevent
  code: "type PublicEvent struct {\n\t// The following fields are only populated by
    Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *PublicEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 5512
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *PublicEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 5520
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (p *PublicEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 5528
  source:
    file: /src/github/event_types.go
    line: 469
- name: PullRequest
  summary: PullRequest represents a GitHub pull request on a repository.
  description: |
    PullRequest represents a GitHub pull request on a repository.
  code: "type PullRequest struct {\n\tID\t\t\t*int\t\t`json:\"id,omitempty\"`\n\tNumber\t\t\t*int\t\t`json:\"number,omitempty\"`\n\tState\t\t\t*string\t\t`json:\"state,omitempty\"`\n\tTitle\t\t\t*string\t\t`json:\"title,omitempty\"`\n\tBody\t\t\t*string\t\t`json:\"body,omitempty\"`\n\tCreatedAt\t\t*time.Time\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t\t*time.Time\t`json:\"updated_at,omitempty\"`\n\tClosedAt\t\t*time.Time\t`json:\"closed_at,omitempty\"`\n\tMergedAt\t\t*time.Time\t`json:\"merged_at,omitempty\"`\n\tUser\t\t\t*User\t\t`json:\"user,omitempty\"`\n\tMerged\t\t\t*bool\t\t`json:\"merged,omitempty\"`\n\tMergeable\t\t*bool\t\t`json:\"mergeable,omitempty\"`\n\tMergedBy\t\t*User\t\t`json:\"merged_by,omitempty\"`\n\tMergeCommitSHA\t\t*string\t\t`json:\"merge_commit_sha,omitempty\"`\n\tComments\t\t*int\t\t`json:\"comments,omitempty\"`\n\tCommits\t\t\t*int\t\t`json:\"commits,omitempty\"`\n\tAdditions\t\t*int\t\t`json:\"additions,omitempty\"`\n\tDeletions\t\t*int\t\t`json:\"deletions,omitempty\"`\n\tChangedFiles\t\t*int\t\t`json:\"changed_files,omitempty\"`\n\tURL\t\t\t*string\t\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tIssueURL\t\t*string\t\t`json:\"issue_url,omitempty\"`\n\tStatusesURL\t\t*string\t\t`json:\"statuses_url,omitempty\"`\n\tDiffURL\t\t\t*string\t\t`json:\"diff_url,omitempty\"`\n\tPatchURL\t\t*string\t\t`json:\"patch_url,omitempty\"`\n\tReviewCommentsURL\t*string\t\t`json:\"review_comments_url,omitempty\"`\n\tReviewCommentURL\t*string\t\t`json:\"review_comment_url,omitempty\"`\n\tAssignee\t\t*User\t\t`json:\"assignee,omitempty\"`\n\tAssignees\t\t[]*User\t\t`json:\"assignees,omitempty\"`\n\tMilestone\t\t*Milestone\t`json:\"milestone,omitempty\"`\n\tMaintainerCanModify\t*bool\t\t`json:\"maintainer_can_modify,omitempty\"`\n\tAuthorAssociation\t*string\t\t`json:\"author_association,omitempty\"`\n\n\tHead\t*PullRequestBranch\t`json:\"head,omitempty\"`\n\tBase\t*PullRequestBranch\t`json:\"base,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAdditions
    summary: GetAdditions returns the Additions field if it's non-nil, zero value
      otherwise.
    description: |
      GetAdditions returns the Additions field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetAdditions() int
    source:
      file: /src/github/github-accessors.go
      line: 5536
  - name: GetAssignee
    summary: GetAssignee returns the Assignee field.
    description: |
      GetAssignee returns the Assignee field.
    code: func (p *PullRequest) GetAssignee() *User
    source:
      file: /src/github/github-accessors.go
      line: 5544
  - name: GetAuthorAssociation
    summary: GetAuthorAssociation returns the AuthorAssociation field if it's non-nil,
      zero value otherwise.
    description: |
      GetAuthorAssociation returns the AuthorAssociation field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetAuthorAssociation() string
    source:
      file: /src/github/github-accessors.go
      line: 5552
  - name: GetBase
    summary: GetBase returns the Base field.
    description: |
      GetBase returns the Base field.
    code: func (p *PullRequest) GetBase() *PullRequestBranch
    source:
      file: /src/github/github-accessors.go
      line: 5560
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 5568
  - name: GetChangedFiles
    summary: GetChangedFiles returns the ChangedFiles field if it's non-nil, zero
      value otherwise.
    description: |
      GetChangedFiles returns the ChangedFiles field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetChangedFiles() int
    source:
      file: /src/github/github-accessors.go
      line: 5576
  - name: GetClosedAt
    summary: GetClosedAt returns the ClosedAt field if it's non-nil, zero value otherwise.
    description: |
      GetClosedAt returns the ClosedAt field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetClosedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 5584
  - name: GetComments
    summary: GetComments returns the Comments field if it's non-nil, zero value otherwise.
    description: |
      GetComments returns the Comments field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetComments() int
    source:
      file: /src/github/github-accessors.go
      line: 5592
  - name: GetCommits
    summary: GetCommits returns the Commits field if it's non-nil, zero value otherwise.
    description: |
      GetCommits returns the Commits field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetCommits() int
    source:
      file: /src/github/github-accessors.go
      line: 5600
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 5608
  - name: GetDeletions
    summary: GetDeletions returns the Deletions field if it's non-nil, zero value
      otherwise.
    description: |
      GetDeletions returns the Deletions field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetDeletions() int
    source:
      file: /src/github/github-accessors.go
      line: 5616
  - name: GetDiffURL
    summary: GetDiffURL returns the DiffURL field if it's non-nil, zero value otherwise.
    description: |
      GetDiffURL returns the DiffURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetDiffURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5624
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5640
  - name: GetHead
    summary: GetHead returns the Head field.
    description: |
      GetHead returns the Head field.
    code: func (p *PullRequest) GetHead() *PullRequestBranch
    source:
      file: /src/github/github-accessors.go
      line: 5632
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 5648
  - name: GetIssueURL
    summary: GetIssueURL returns the IssueURL field if it's non-nil, zero value otherwise.
    description: |
      GetIssueURL returns the IssueURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetIssueURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5656
  - name: GetMaintainerCanModify
    summary: GetMaintainerCanModify returns the MaintainerCanModify field if it's
      non-nil, zero value otherwise.
    description: |
      GetMaintainerCanModify returns the MaintainerCanModify field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetMaintainerCanModify() bool
    source:
      file: /src/github/github-accessors.go
      line: 5664
  - name: GetMergeCommitSHA
    summary: GetMergeCommitSHA returns the MergeCommitSHA field if it's non-nil, zero
      value otherwise.
    description: |
      GetMergeCommitSHA returns the MergeCommitSHA field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetMergeCommitSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 5680
  - name: GetMergeable
    summary: GetMergeable returns the Mergeable field if it's non-nil, zero value
      otherwise.
    description: |
      GetMergeable returns the Mergeable field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetMergeable() bool
    source:
      file: /src/github/github-accessors.go
      line: 5672
  - name: GetMerged
    summary: GetMerged returns the Merged field if it's non-nil, zero value otherwise.
    description: |
      GetMerged returns the Merged field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetMerged() bool
    source:
      file: /src/github/github-accessors.go
      line: 5688
  - name: GetMergedAt
    summary: GetMergedAt returns the MergedAt field if it's non-nil, zero value otherwise.
    description: |
      GetMergedAt returns the MergedAt field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetMergedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 5696
  - name: GetMergedBy
    summary: GetMergedBy returns the MergedBy field.
    description: |
      GetMergedBy returns the MergedBy field.
    code: func (p *PullRequest) GetMergedBy() *User
    source:
      file: /src/github/github-accessors.go
      line: 5704
  - name: GetMilestone
    summary: GetMilestone returns the Milestone field.
    description: |
      GetMilestone returns the Milestone field.
    code: func (p *PullRequest) GetMilestone() *Milestone
    source:
      file: /src/github/github-accessors.go
      line: 5712
  - name: GetNumber
    summary: GetNumber returns the Number field if it's non-nil, zero value otherwise.
    description: |
      GetNumber returns the Number field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetNumber() int
    source:
      file: /src/github/github-accessors.go
      line: 5720
  - name: GetPatchURL
    summary: GetPatchURL returns the PatchURL field if it's non-nil, zero value otherwise.
    description: |
      GetPatchURL returns the PatchURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetPatchURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5728
  - name: GetReviewCommentURL
    summary: GetReviewCommentURL returns the ReviewCommentURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetReviewCommentURL returns the ReviewCommentURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetReviewCommentURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5744
  - name: GetReviewCommentsURL
    summary: GetReviewCommentsURL returns the ReviewCommentsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetReviewCommentsURL returns the ReviewCommentsURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetReviewCommentsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5736
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 5752
  - name: GetStatusesURL
    summary: GetStatusesURL returns the StatusesURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetStatusesURL returns the StatusesURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetStatusesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5760
  - name: GetTitle
    summary: GetTitle returns the Title field if it's non-nil, zero value otherwise.
    description: |
      GetTitle returns the Title field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetTitle() string
    source:
      file: /src/github/github-accessors.go
      line: 5768
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5784
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (p *PullRequest) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 5776
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (p *PullRequest) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 5792
  - name: String
    summary: ""
    description: ""
    code: func (p PullRequest) String() string
    source:
      file: /src/github/pulls.go
      line: 60
  source:
    file: /src/github/pulls.go
    line: 22
- name: PullRequestBranch
  summary: PullRequestBranch represents a base or head branch in a GitHub pull request.
  description: |
    PullRequestBranch represents a base or head branch in a GitHub pull request.
  code: "type PullRequestBranch struct {\n\tLabel\t*string\t\t`json:\"label,omitempty\"`\n\tRef\t*string\t\t`json:\"ref,omitempty\"`\n\tSHA\t*string\t\t`json:\"sha,omitempty\"`\n\tRepo\t*Repository\t`json:\"repo,omitempty\"`\n\tUser\t*User\t\t`json:\"user,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetLabel
    summary: GetLabel returns the Label field if it's non-nil, zero value otherwise.
    description: |
      GetLabel returns the Label field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestBranch) GetLabel() string
    source:
      file: /src/github/github-accessors.go
      line: 5800
  - name: GetRef
    summary: GetRef returns the Ref field if it's non-nil, zero value otherwise.
    description: |
      GetRef returns the Ref field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestBranch) GetRef() string
    source:
      file: /src/github/github-accessors.go
      line: 5808
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *PullRequestBranch) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 5816
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestBranch) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 5824
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (p *PullRequestBranch) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 5832
  source:
    file: /src/github/pulls.go
    line: 65
- name: PullRequestComment
  summary: PullRequestComment represents a comment left on a pull request.
  description: |
    PullRequestComment represents a comment left on a pull request.
  code: "type PullRequestComment struct {\n\tID\t\t\t*int\t\t`json:\"id,omitempty\"`\n\tInReplyTo\t\t*int\t\t`json:\"in_reply_to,omitempty\"`\n\tBody\t\t\t*string\t\t`json:\"body,omitempty\"`\n\tPath\t\t\t*string\t\t`json:\"path,omitempty\"`\n\tDiffHunk\t\t*string\t\t`json:\"diff_hunk,omitempty\"`\n\tPosition\t\t*int\t\t`json:\"position,omitempty\"`\n\tOriginalPosition\t*int\t\t`json:\"original_position,omitempty\"`\n\tCommitID\t\t*string\t\t`json:\"commit_id,omitempty\"`\n\tOriginalCommitID\t*string\t\t`json:\"original_commit_id,omitempty\"`\n\tUser\t\t\t*User\t\t`json:\"user,omitempty\"`\n\tReactions\t\t*Reactions\t`json:\"reactions,omitempty\"`\n\tCreatedAt\t\t*time.Time\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t\t*time.Time\t`json:\"updated_at,omitempty\"`\n\tURL\t\t\t*string\t\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tPullRequestURL\t\t*string\t\t`json:\"pull_request_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 5840
  - name: GetCommitID
    summary: GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    description: |
      GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetCommitID() string
    source:
      file: /src/github/github-accessors.go
      line: 5848
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 5856
  - name: GetDiffHunk
    summary: GetDiffHunk returns the DiffHunk field if it's non-nil, zero value otherwise.
    description: |
      GetDiffHunk returns the DiffHunk field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetDiffHunk() string
    source:
      file: /src/github/github-accessors.go
      line: 5864
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5872
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 5880
  - name: GetInReplyTo
    summary: GetInReplyTo returns the InReplyTo field if it's non-nil, zero value
      otherwise.
    description: |
      GetInReplyTo returns the InReplyTo field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetInReplyTo() int
    source:
      file: /src/github/github-accessors.go
      line: 5888
  - name: GetOriginalCommitID
    summary: GetOriginalCommitID returns the OriginalCommitID field if it's non-nil,
      zero value otherwise.
    description: |
      GetOriginalCommitID returns the OriginalCommitID field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetOriginalCommitID() string
    source:
      file: /src/github/github-accessors.go
      line: 5896
  - name: GetOriginalPosition
    summary: GetOriginalPosition returns the OriginalPosition field if it's non-nil,
      zero value otherwise.
    description: |
      GetOriginalPosition returns the OriginalPosition field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetOriginalPosition() int
    source:
      file: /src/github/github-accessors.go
      line: 5904
  - name: GetPath
    summary: GetPath returns the Path field if it's non-nil, zero value otherwise.
    description: |
      GetPath returns the Path field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetPath() string
    source:
      file: /src/github/github-accessors.go
      line: 5912
  - name: GetPosition
    summary: GetPosition returns the Position field if it's non-nil, zero value otherwise.
    description: |
      GetPosition returns the Position field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetPosition() int
    source:
      file: /src/github/github-accessors.go
      line: 5920
  - name: GetPullRequestURL
    summary: GetPullRequestURL returns the PullRequestURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetPullRequestURL returns the PullRequestURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetPullRequestURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5928
  - name: GetReactions
    summary: GetReactions returns the Reactions field.
    description: |
      GetReactions returns the Reactions field.
    code: func (p *PullRequestComment) GetReactions() *Reactions
    source:
      file: /src/github/github-accessors.go
      line: 5936
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 5952
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestComment) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 5944
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (p *PullRequestComment) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 5960
  - name: String
    summary: ""
    description: ""
    code: func (p PullRequestComment) String() string
    source:
      file: /src/github/pulls_comments.go
      line: 34
  source:
    file: /src/github/pulls_comments.go
    line: 15
- name: PullRequestEvent
  summary: PullRequestEvent is triggered when a pull request is assigned, unassigned,
    labeled, unlabeled, opened, closed, reopened, or synchronized.
  description: |
    PullRequestEvent is triggered when a pull request is assigned, unassigned, labeled, unlabeled, opened, closed, reopened, or synchronized. The Webhook event name is "pull_request".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#pullrequestevent
  code: "type PullRequestEvent struct {\n\t// Action is the action that was performed.
    Possible values are:\n\t// \"assigned\", \"unassigned\", \"review_requested\",
    \"review_request_removed\", \"labeled\", \"unlabeled\",\n\t// \"opened\", \"closed\",
    \"reopened\", \"synchronize\", \"edited\".\n\t// If the action is \"closed\" and
    the merged key is false,\n\t// the pull request was closed with unmerged commits.
    If the action is \"closed\"\n\t// and the merged key is true, the pull request
    was merged.\n\tAction\t\t*string\t\t`json:\"action,omitempty\"`\n\tNumber\t\t*int\t\t`json:\"number,omitempty\"`\n\tPullRequest\t*PullRequest\t`json:\"pull_request,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tChanges\t\t\t*EditChange\t`json:\"changes,omitempty\"`\n\tRequestedReviewers\t[]*User\t\t`json:\"requested_reviewers,omitempty\"`\t//
    Populated in \"review_requested\", \"review_request_removed\" event deliveries.\n\tRepo\t\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 5968
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (p *PullRequestEvent) GetChanges() *EditChange
    source:
      file: /src/github/github-accessors.go
      line: 5976
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *PullRequestEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 5984
  - name: GetNumber
    summary: GetNumber returns the Number field if it's non-nil, zero value otherwise.
    description: |
      GetNumber returns the Number field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestEvent) GetNumber() int
    source:
      file: /src/github/github-accessors.go
      line: 5992
  - name: GetPullRequest
    summary: GetPullRequest returns the PullRequest field.
    description: |
      GetPullRequest returns the PullRequest field.
    code: func (p *PullRequestEvent) GetPullRequest() *PullRequest
    source:
      file: /src/github/github-accessors.go
      line: 6000
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *PullRequestEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 6008
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (p *PullRequestEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 6016
  source:
    file: /src/github/event_types.go
    line: 481
- name: PullRequestLinks
  summary: PullRequestLinks object is added to the Issue object when it's an issue
    included in the IssueCommentEvent webhook payload, if the webhook is fired by
    a comment on a PR.
  description: |
    PullRequestLinks object is added to the Issue object when it's an issue included in the IssueCommentEvent webhook payload, if the webhook is fired by a comment on a PR.
  code: "type PullRequestLinks struct {\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t*string\t`json:\"html_url,omitempty\"`\n\tDiffURL\t\t*string\t`json:\"diff_url,omitempty\"`\n\tPatchURL\t*string\t`json:\"patch_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDiffURL
    summary: GetDiffURL returns the DiffURL field if it's non-nil, zero value otherwise.
    description: |
      GetDiffURL returns the DiffURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestLinks) GetDiffURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6024
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestLinks) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6032
  - name: GetPatchURL
    summary: GetPatchURL returns the PatchURL field if it's non-nil, zero value otherwise.
    description: |
      GetPatchURL returns the PatchURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestLinks) GetPatchURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6040
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestLinks) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6048
  source:
    file: /src/github/issues.go
    line: 113
- name: PullRequestListCommentsOptions
  summary: PullRequestListCommentsOptions specifies the optional parameters to the
    PullRequestsService.ListComments method.
  description: |
    PullRequestListCommentsOptions specifies the optional parameters to the PullRequestsService.ListComments method.
  code: "type PullRequestListCommentsOptions struct {\n\t// Sort specifies how to
    sort comments. Possible values are: created, updated.\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\t//
    Direction in which to sort comments. Possible values are: asc, desc.\n\tDirection\tstring\t`url:\"direction,omitempty\"`\n\n\t//
    Since filters comments by time.\n\tSince\ttime.Time\t`url:\"since,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/pulls_comments.go
    line: 40
- name: PullRequestListOptions
  summary: PullRequestListOptions specifies the optional parameters to the PullRequestsService.List
    method.
  description: |
    PullRequestListOptions specifies the optional parameters to the PullRequestsService.List method.
  code: "type PullRequestListOptions struct {\n\t// State filters pull requests based
    on their state. Possible values are:\n\t// open, closed. Default is \"open\".\n\tState\tstring\t`url:\"state,omitempty\"`\n\n\t//
    Head filters pull requests by head user and branch name in the format of:\n\t//
    \"user:ref-name\".\n\tHead\tstring\t`url:\"head,omitempty\"`\n\n\t// Base filters
    pull requests by base branch name.\n\tBase\tstring\t`url:\"base,omitempty\"`\n\n\t//
    Sort specifies how to sort pull requests. Possible values are: created,\n\t//
    updated, popularity, long-running. Default is \"created\".\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\t//
    Direction in which to sort pull requests. Possible values are: asc, desc.\n\t//
    If Sort is \"created\" or not specified, Default is \"desc\", otherwise Default\n\t//
    is \"asc\"\n\tDirection\tstring\t`url:\"direction,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/pulls.go
    line: 75
- name: PullRequestMergeResult
  summary: PullRequestMergeResult represents the result of merging a pull request.
  description: |
    PullRequestMergeResult represents the result of merging a pull request.
  code: "type PullRequestMergeResult struct {\n\tSHA\t*string\t`json:\"sha,omitempty\"`\n\tMerged\t*bool\t`json:\"merged,omitempty\"`\n\tMessage\t*string\t`json:\"message,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetMerged
    summary: GetMerged returns the Merged field if it's non-nil, zero value otherwise.
    description: |
      GetMerged returns the Merged field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestMergeResult) GetMerged() bool
    source:
      file: /src/github/github-accessors.go
      line: 6056
  - name: GetMessage
    summary: GetMessage returns the Message field if it's non-nil, zero value otherwise.
    description: |
      GetMessage returns the Message field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestMergeResult) GetMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 6064
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestMergeResult) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 6072
  source:
    file: /src/github/pulls.go
    line: 310
- name: PullRequestOptions
  summary: PullRequestOptions lets you define how a pull request will be merged.
  description: |
    PullRequestOptions lets you define how a pull request will be merged.
  code: "type PullRequestOptions struct {\n\tCommitTitle\tstring\t// Extra detail
    to append to automatic commit message. (Optional.)\n\tSHA\t\tstring\t// SHA that
    pull request head must match to allow merge. (Optional.)\n\n\t// The merge method
    to use. Possible values include: \"merge\", \"squash\", and \"rebase\" with the
    default being merge. (Optional.)\n\tMergeMethod\tstring\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/pulls.go
    line: 317
- name: PullRequestReview
  summary: PullRequestReview represents a review of a pull request.
  description: |
    PullRequestReview represents a review of a pull request.
  code: "type PullRequestReview struct {\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tUser\t\t*User\t\t`json:\"user,omitempty\"`\n\tBody\t\t*string\t\t`json:\"body,omitempty\"`\n\tSubmittedAt\t*time.Time\t`json:\"submitted_at,omitempty\"`\n\tCommitID\t*string\t\t`json:\"commit_id,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tPullRequestURL\t*string\t\t`json:\"pull_request_url,omitempty\"`\n\tState\t\t*string\t\t`json:\"state,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReview) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 6080
  - name: GetCommitID
    summary: GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    description: |
      GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReview) GetCommitID() string
    source:
      file: /src/github/github-accessors.go
      line: 6088
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReview) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6096
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReview) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 6104
  - name: GetPullRequestURL
    summary: GetPullRequestURL returns the PullRequestURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetPullRequestURL returns the PullRequestURL field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReview) GetPullRequestURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6112
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReview) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 6120
  - name: GetSubmittedAt
    summary: GetSubmittedAt returns the SubmittedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetSubmittedAt returns the SubmittedAt field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReview) GetSubmittedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 6128
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (p *PullRequestReview) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 6136
  - name: String
    summary: ""
    description: ""
    code: func (p PullRequestReview) String() string
    source:
      file: /src/github/pulls_reviews.go
      line: 26
  source:
    file: /src/github/pulls_reviews.go
    line: 15
- name: PullRequestReviewCommentEvent
  summary: PullRequestReviewCommentEvent is triggered when a comment is created on
    a portion of the unified diff of a pull request.
  description: |
    PullRequestReviewCommentEvent is triggered when a comment is created on a portion of the unified diff of a pull request. The Webhook event name is "pull_request_review_comment".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#pullrequestreviewcommentevent
  code: "type PullRequestReviewCommentEvent struct {\n\t// Action is the action that
    was performed on the comment.\n\t// Possible values are: \"created\", \"edited\",
    \"deleted\".\n\tAction\t\t*string\t\t\t`json:\"action,omitempty\"`\n\tPullRequest\t*PullRequest\t\t`json:\"pull_request,omitempty\"`\n\tComment\t\t*PullRequestComment\t`json:\"comment,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tChanges\t\t*EditChange\t`json:\"changes,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReviewCommentEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 6144
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (p *PullRequestReviewCommentEvent) GetChanges() *EditChange
    source:
      file: /src/github/github-accessors.go
      line: 6152
  - name: GetComment
    summary: GetComment returns the Comment field.
    description: |
      GetComment returns the Comment field.
    code: func (p *PullRequestReviewCommentEvent) GetComment() *PullRequestComment
    source:
      file: /src/github/github-accessors.go
      line: 6160
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *PullRequestReviewCommentEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 6168
  - name: GetPullRequest
    summary: GetPullRequest returns the PullRequest field.
    description: |
      GetPullRequest returns the PullRequest field.
    code: func (p *PullRequestReviewCommentEvent) GetPullRequest() *PullRequest
    source:
      file: /src/github/github-accessors.go
      line: 6176
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *PullRequestReviewCommentEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 6184
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (p *PullRequestReviewCommentEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 6192
  source:
    file: /src/github/event_types.go
    line: 526
- name: PullRequestReviewDismissalRequest
  summary: PullRequestReviewDismissalRequest represents a request to dismiss a review.
  description: |
    PullRequestReviewDismissalRequest represents a request to dismiss a review.
  code: "type PullRequestReviewDismissalRequest struct {\n\tMessage *string `json:\"message,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetMessage
    summary: GetMessage returns the Message field if it's non-nil, zero value otherwise.
    description: |
      GetMessage returns the Message field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReviewDismissalRequest) GetMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 6200
  - name: String
    summary: ""
    description: ""
    code: func (r PullRequestReviewDismissalRequest) String() string
    source:
      file: /src/github/pulls_reviews.go
      line: 58
  source:
    file: /src/github/pulls_reviews.go
    line: 54
- name: PullRequestReviewEvent
  summary: PullRequestReviewEvent is triggered when a review is submitted on a pull
    request.
  description: |
    PullRequestReviewEvent is triggered when a review is submitted on a pull request. The Webhook event name is "pull_request_review".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#pullrequestreviewevent
  code: "type PullRequestReviewEvent struct {\n\t// Action is always \"submitted\".\n\tAction\t\t*string\t\t\t`json:\"action,omitempty\"`\n\tReview\t\t*PullRequestReview\t`json:\"review,omitempty\"`\n\tPullRequest\t*PullRequest\t\t`json:\"pull_request,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n\n\t//
    The following field is only present when the webhook is triggered on\n\t// a repository
    belonging to an organization.\n\tOrganization\t*Organization\t`json:\"organization,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReviewEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 6208
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *PullRequestReviewEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 6216
  - name: GetOrganization
    summary: GetOrganization returns the Organization field.
    description: |
      GetOrganization returns the Organization field.
    code: func (p *PullRequestReviewEvent) GetOrganization() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 6224
  - name: GetPullRequest
    summary: GetPullRequest returns the PullRequest field.
    description: |
      GetPullRequest returns the PullRequest field.
    code: func (p *PullRequestReviewEvent) GetPullRequest() *PullRequest
    source:
      file: /src/github/github-accessors.go
      line: 6232
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *PullRequestReviewEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 6240
  - name: GetReview
    summary: GetReview returns the Review field.
    description: |
      GetReview returns the Review field.
    code: func (p *PullRequestReviewEvent) GetReview() *PullRequestReview
    source:
      file: /src/github/github-accessors.go
      line: 6248
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (p *PullRequestReviewEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 6256
  source:
    file: /src/github/event_types.go
    line: 505
- name: PullRequestReviewRequest
  summary: PullRequestReviewRequest represents a request to create a review.
  description: |
    PullRequestReviewRequest represents a request to create a review.
  code: "type PullRequestReviewRequest struct {\n\tCommitID\t*string\t\t\t`json:\"commit_id,omitempty\"`\n\tBody\t\t*string\t\t\t`json:\"body,omitempty\"`\n\tEvent\t\t*string\t\t\t`json:\"event,omitempty\"`\n\tComments\t[]*DraftReviewComment\t`json:\"comments,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReviewRequest) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 6264
  - name: GetCommitID
    summary: GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    description: |
      GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReviewRequest) GetCommitID() string
    source:
      file: /src/github/github-accessors.go
      line: 6272
  - name: GetEvent
    summary: GetEvent returns the Event field if it's non-nil, zero value otherwise.
    description: |
      GetEvent returns the Event field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReviewRequest) GetEvent() string
    source:
      file: /src/github/github-accessors.go
      line: 6280
  - name: String
    summary: ""
    description: ""
    code: func (r PullRequestReviewRequest) String() string
    source:
      file: /src/github/pulls_reviews.go
      line: 49
  source:
    file: /src/github/pulls_reviews.go
    line: 42
- name: PullRequestReviewsEnforcement
  summary: PullRequestReviewsEnforcement represents the pull request reviews enforcement
    of a protected branch.
  description: |
    PullRequestReviewsEnforcement represents the pull request reviews enforcement of a protected branch.
  code: "type PullRequestReviewsEnforcement struct {\n\t// Specifies which users and
    teams can dismiss pull request reviews.\n\tDismissalRestrictions\tDismissalRestrictions\t`json:\"dismissal_restrictions\"`\n\t//
    Specifies if approved reviews are dismissed automatically, when a new commit is
    pushed.\n\tDismissStaleReviews\tbool\t`json:\"dismiss_stale_reviews\"`\n\t// RequireCodeOwnerReviews
    specifies if an approved review is required in pull requests including files with
    a designated code owner.\n\tRequireCodeOwnerReviews\tbool\t`json:\"require_code_owner_reviews\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 562
- name: PullRequestReviewsEnforcementRequest
  summary: PullRequestReviewsEnforcementRequest represents request to set the pull
    request review enforcement of a protected branch.
  description: |
    PullRequestReviewsEnforcementRequest represents request to set the pull request review enforcement of a protected branch. It is separate from PullRequestReviewsEnforcement above because the request structure is different from the response structure.
  code: "type PullRequestReviewsEnforcementRequest struct {\n\t// Specifies which
    users and teams should be allowed to dismiss pull request reviews. Can be nil
    to disable the restrictions.\n\tDismissalRestrictionsRequest\t*DismissalRestrictionsRequest\t`json:\"dismissal_restrictions\"`\n\t//
    Specifies if approved reviews can be dismissed automatically, when a new commit
    is pushed. (Required)\n\tDismissStaleReviews\tbool\t`json:\"dismiss_stale_reviews\"`\n\t//
    RequireCodeOwnerReviews specifies if an approved review is required in pull requests
    including files with a designated code owner.\n\tRequireCodeOwnerReviews\tbool\t`json:\"require_code_owner_reviews\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDismissalRestrictionsRequest
    summary: GetDismissalRestrictionsRequest returns the DismissalRestrictionsRequest
      field.
    description: |
      GetDismissalRestrictionsRequest returns the DismissalRestrictionsRequest field.
    code: func (p *PullRequestReviewsEnforcementRequest) GetDismissalRestrictionsRequest()
      *DismissalRestrictionsRequest
    source:
      file: /src/github/github-accessors.go
      line: 6288
  - name: MarshalJSON
    summary: MarshalJSON implements the json.Marshaler interface.
    description: |
      MarshalJSON implements the json.Marshaler interface. Converts nil value of PullRequestReviewsEnforcementRequest.DismissalRestrictionsRequest to empty array
    code: func (req PullRequestReviewsEnforcementRequest) MarshalJSON() ([]byte, error)
    source:
      file: /src/github/repos.go
      line: 585
  source:
    file: /src/github/repos.go
    line: 574
- name: PullRequestReviewsEnforcementUpdate
  summary: PullRequestReviewsEnforcementUpdate represents request to patch the pull
    request review enforcement of a protected branch.
  description: |
    PullRequestReviewsEnforcementUpdate represents request to patch the pull request review enforcement of a protected branch. It is separate from PullRequestReviewsEnforcementRequest above because the patch request does not require all fields to be initialized.
  code: "type PullRequestReviewsEnforcementUpdate struct {\n\t// Specifies which users
    and teams can dismiss pull request reviews. Can be omitted.\n\tDismissalRestrictionsRequest\t*DismissalRestrictionsRequest\t`json:\"dismissal_restrictions,omitempty\"`\n\t//
    Specifies if approved reviews can be dismissed automatically, when a new commit
    is pushed. Can be omitted.\n\tDismissStaleReviews\t*bool\t`json:\"dismiss_stale_reviews,omitempty\"`\n\t//
    RequireCodeOwnerReviews specifies if an approved review is required in pull requests
    including files with a designated code owner.\n\tRequireCodeOwnerReviews\tbool\t`json:\"require_code_owner_reviews,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDismissStaleReviews
    summary: GetDismissStaleReviews returns the DismissStaleReviews field if it's
      non-nil, zero value otherwise.
    description: |
      GetDismissStaleReviews returns the DismissStaleReviews field if it's non-nil, zero value otherwise.
    code: func (p *PullRequestReviewsEnforcementUpdate) GetDismissStaleReviews() bool
    source:
      file: /src/github/github-accessors.go
      line: 6304
  - name: GetDismissalRestrictionsRequest
    summary: GetDismissalRestrictionsRequest returns the DismissalRestrictionsRequest
      field.
    description: |
      GetDismissalRestrictionsRequest returns the DismissalRestrictionsRequest field.
    code: func (p *PullRequestReviewsEnforcementUpdate) GetDismissalRestrictionsRequest()
      *DismissalRestrictionsRequest
    source:
      file: /src/github/github-accessors.go
      line: 6296
  source:
    file: /src/github/repos.go
    line: 613
- name: PullRequestsService
  summary: PullRequestsService handles communication with the pull request related
    methods of the GitHub API.
  description: |
    PullRequestsService handles communication with the pull request related methods of the GitHub API.

    GitHub API docs: https://developer.github.com/v3/pulls/
  code: type PullRequestsService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Create
    summary: Create a new pull request on the specified repository.
    description: |
      Create a new pull request on the specified repository.

      GitHub API docs: https://developer.github.com/v3/pulls/#create-a-pull-request
    code: func (s *PullRequestsService) Create(ctx context.Context, owner string,
      repo string, pull *NewPullRequest) (*PullRequest, *Response, error)
    source:
      file: /src/github/pulls.go
      line: 181
  - name: CreateComment
    summary: CreateComment creates a new comment on the specified pull request.
    description: |
      CreateComment creates a new comment on the specified pull request.

      GitHub API docs: https://developer.github.com/v3/pulls/comments/#create-a-comment
    code: func (s *PullRequestsService) CreateComment(ctx context.Context, owner string,
      repo string, number int, comment *PullRequestComment) (*PullRequestComment,
      *Response, error)
    source:
      file: /src/github/pulls_comments.go
      line: 112
  - name: CreateReview
    summary: CreateReview creates a new review on the specified pull request.
    description: |
      CreateReview creates a new review on the specified pull request.

      TODO: Follow up with GitHub support about an issue with this method's returned error format and remove this comment once it's fixed. Read more about it here - https://github.com/google/go-github/issues/540

      GitHub API docs: https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review
    code: func (s *PullRequestsService) CreateReview(ctx context.Context, owner, repo
      string, number int, review *PullRequestReviewRequest) (*PullRequestReview, *Response,
      error)
    source:
      file: /src/github/pulls_reviews.go
      line: 173
  - name: DeleteComment
    summary: DeleteComment deletes a pull request comment.
    description: |
      DeleteComment deletes a pull request comment.

      GitHub API docs: https://developer.github.com/v3/pulls/comments/#delete-a-comment
    code: func (s *PullRequestsService) DeleteComment(ctx context.Context, owner string,
      repo string, number int) (*Response, error)
    source:
      file: /src/github/pulls_comments.go
      line: 150
  - name: DeletePendingReview
    summary: DeletePendingReview deletes the specified pull request pending review.
    description: |
      DeletePendingReview deletes the specified pull request pending review.

      TODO: Follow up with GitHub support about an issue with this method's returned error format and remove this comment once it's fixed. Read more about it here - https://github.com/google/go-github/issues/540

      GitHub API docs: https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review
    code: func (s *PullRequestsService) DeletePendingReview(ctx context.Context, owner,
      repo string, number, reviewID int) (*PullRequestReview, *Response, error)
    source:
      file: /src/github/pulls_reviews.go
      line: 121
  - name: DismissReview
    summary: DismissReview dismisses a specified review on the specified pull request.
    description: |
      DismissReview dismisses a specified review on the specified pull request.

      TODO: Follow up with GitHub support about an issue with this method's returned error format and remove this comment once it's fixed. Read more about it here - https://github.com/google/go-github/issues/540

      GitHub API docs: https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review
    code: func (s *PullRequestsService) DismissReview(ctx context.Context, owner,
      repo string, number, reviewID int, review *PullRequestReviewDismissalRequest)
      (*PullRequestReview, *Response, error)
    source:
      file: /src/github/pulls_reviews.go
      line: 221
  - name: Edit
    summary: Edit a pull request.
    description: |
      Edit a pull request. pull must not be nil.

      The following fields are editable: Title, Body, State, Base.Ref and MaintainerCanModify. Base.Ref updates the base branch of the pull request.

      GitHub API docs: https://developer.github.com/v3/pulls/#update-a-pull-request
    code: func (s *PullRequestsService) Edit(ctx context.Context, owner string, repo
      string, number int, pull *PullRequest) (*PullRequest, *Response, error)
    source:
      file: /src/github/pulls.go
      line: 212
  - name: EditComment
    summary: EditComment updates a pull request comment.
    description: |
      EditComment updates a pull request comment.

      GitHub API docs: https://developer.github.com/v3/pulls/comments/#edit-a-comment
    code: func (s *PullRequestsService) EditComment(ctx context.Context, owner string,
      repo string, number int, comment *PullRequestComment) (*PullRequestComment,
      *Response, error)
    source:
      file: /src/github/pulls_comments.go
      line: 131
  - name: Get
    summary: Get a single pull request.
    description: |
      Get a single pull request.

      GitHub API docs: https://developer.github.com/v3/pulls/#get-a-single-pull-request
    code: func (s *PullRequestsService) Get(ctx context.Context, owner string, repo
      string, number int) (*PullRequest, *Response, error)
    source:
      file: /src/github/pulls.go
      line: 126
  - name: GetComment
    summary: GetComment fetches the specified pull request comment.
    description: |
      GetComment fetches the specified pull request comment.

      GitHub API docs: https://developer.github.com/v3/pulls/comments/#get-a-single-comment
    code: func (s *PullRequestsService) GetComment(ctx context.Context, owner string,
      repo string, number int) (*PullRequestComment, *Response, error)
    source:
      file: /src/github/pulls_comments.go
      line: 90
  - name: GetRaw
    summary: GetRaw gets a single pull request in raw (diff or patch) format.
    description: |
      GetRaw gets a single pull request in raw (diff or patch) format.
    code: func (s *PullRequestsService) GetRaw(ctx context.Context, owner string,
      repo string, number int, opt RawOptions) (string, *Response, error)
    source:
      file: /src/github/pulls.go
      line: 143
  - name: GetReview
    summary: GetReview fetches the specified pull request review.
    description: |
      GetReview fetches the specified pull request review.

      TODO: Follow up with GitHub support about an issue with this method's returned error format and remove this comment once it's fixed. Read more about it here - https://github.com/google/go-github/issues/540

      GitHub API docs: https://developer.github.com/v3/pulls/reviews/#get-a-single-review
    code: func (s *PullRequestsService) GetReview(ctx context.Context, owner, repo
      string, number, reviewID int) (*PullRequestReview, *Response, error)
    source:
      file: /src/github/pulls_reviews.go
      line: 97
  - name: IsMerged
    summary: IsMerged checks if a pull request has been merged.
    description: |
      IsMerged checks if a pull request has been merged.

      GitHub API docs: https://developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged
    code: func (s *PullRequestsService) IsMerged(ctx context.Context, owner string,
      repo string, number int) (bool, *Response, error)
    source:
      file: /src/github/pulls.go
      line: 297
  - name: List
    summary: List the pull requests for the specified repository.
    description: |
      List the pull requests for the specified repository.

      GitHub API docs: https://developer.github.com/v3/pulls/#list-pull-requests
    code: func (s *PullRequestsService) List(ctx context.Context, owner string, repo
      string, opt *PullRequestListOptions) ([]*PullRequest, *Response, error)
    source:
      file: /src/github/pulls.go
      line: 102
  - name: ListComments
    summary: ListComments lists all comments on the specified pull request.
    description: |
      ListComments lists all comments on the specified pull request. Specifying a pull request number of 0 will return all comments on all pull requests for the repository.

      GitHub API docs: https://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request
    code: func (s *PullRequestsService) ListComments(ctx context.Context, owner string,
      repo string, number int, opt *PullRequestListCommentsOptions) ([]*PullRequestComment,
      *Response, error)
    source:
      file: /src/github/pulls_comments.go
      line: 58
  - name: ListCommits
    summary: ListCommits lists the commits in a pull request.
    description: |
      ListCommits lists the commits in a pull request.

      GitHub API docs: https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request
    code: func (s *PullRequestsService) ListCommits(ctx context.Context, owner string,
      repo string, number int, opt *ListOptions) ([]*RepositoryCommit, *Response,
      error)
    source:
      file: /src/github/pulls.go
      line: 246
  - name: ListFiles
    summary: ListFiles lists the files in a pull request.
    description: |
      ListFiles lists the files in a pull request.

      GitHub API docs: https://developer.github.com/v3/pulls/#list-pull-requests-files
    code: func (s *PullRequestsService) ListFiles(ctx context.Context, owner string,
      repo string, number int, opt *ListOptions) ([]*CommitFile, *Response, error)
    source:
      file: /src/github/pulls.go
      line: 273
  - name: ListReviewComments
    summary: ListReviewComments lists all the comments for the specified review.
    description: |
      ListReviewComments lists all the comments for the specified review.

      TODO: Follow up with GitHub support about an issue with this method's returned error format and remove this comment once it's fixed. Read more about it here - https://github.com/google/go-github/issues/540

      GitHub API docs: https://developer.github.com/v3/pulls/reviews/#get-comments-for-a-single-review
    code: func (s *PullRequestsService) ListReviewComments(ctx context.Context, owner,
      repo string, number, reviewID int, opt *ListOptions) ([]*PullRequestComment,
      *Response, error)
    source:
      file: /src/github/pulls_reviews.go
      line: 145
  - name: ListReviewers
    summary: ListReviewers lists reviewers whose reviews have been requested on the
      specified pull request.
    description: |
      ListReviewers lists reviewers whose reviews have been requested on the specified pull request.

      GitHub API docs: https://developer.github.com/v3/pulls/review_requests/#list-review-requests
    code: func (s *PullRequestsService) ListReviewers(ctx context.Context, owner,
      repo string, number int, opt *ListOptions) (*Reviewers, *Response, error)
    source:
      file: /src/github/pulls_reviewers.go
      line: 50
  - name: ListReviews
    summary: ListReviews lists all reviews on the specified pull request.
    description: |
      ListReviews lists all reviews on the specified pull request.

      TODO: Follow up with GitHub support about an issue with this method's returned error format and remove this comment once it's fixed. Read more about it here - https://github.com/google/go-github/issues/540

      GitHub API docs: https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request
    code: func (s *PullRequestsService) ListReviews(ctx context.Context, owner, repo
      string, number int, opt *ListOptions) ([]*PullRequestReview, *Response, error)
    source:
      file: /src/github/pulls_reviews.go
      line: 69
  - name: Merge
    summary: Merge a pull request (Merge Button™).
    description: |
      Merge a pull request (Merge Button™). commitMessage is the title for the automatic commit message.

      GitHub API docs: https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-buttontrade
    code: func (s *PullRequestsService) Merge(ctx context.Context, owner string, repo
      string, number int, commitMessage string, options *PullRequestOptions) (*PullRequestMergeResult,
      *Response, error)
    source:
      file: /src/github/pulls.go
      line: 336
  - name: RemoveReviewers
    summary: RemoveReviewers removes the review request for the provided reviewers
      for the specified pull request.
    description: |
      RemoveReviewers removes the review request for the provided reviewers for the specified pull request.

      GitHub API docs: https://developer.github.com/v3/pulls/review_requests/#delete-a-review-request
    code: func (s *PullRequestsService) RemoveReviewers(ctx context.Context, owner,
      repo string, number int, reviewers ReviewersRequest) (*Response, error)
    source:
      file: /src/github/pulls_reviewers.go
      line: 77
  - name: RequestReviewers
    summary: RequestReviewers creates a review request for the provided reviewers
      for the specified pull request.
    description: |
      RequestReviewers creates a review request for the provided reviewers for the specified pull request.

      GitHub API docs: https://developer.github.com/v3/pulls/review_requests/#create-a-review-request
    code: func (s *PullRequestsService) RequestReviewers(ctx context.Context, owner,
      repo string, number int, reviewers ReviewersRequest) (*PullRequest, *Response,
      error)
    source:
      file: /src/github/pulls_reviewers.go
      line: 28
  - name: SubmitReview
    summary: SubmitReview submits a specified review on the specified pull request.
    description: |
      SubmitReview submits a specified review on the specified pull request.

      TODO: Follow up with GitHub support about an issue with this method's returned error format and remove this comment once it's fixed. Read more about it here - https://github.com/google/go-github/issues/540

      GitHub API docs: https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review
    code: func (s *PullRequestsService) SubmitReview(ctx context.Context, owner, repo
      string, number, reviewID int, review *PullRequestReviewRequest) (*PullRequestReview,
      *Response, error)
    source:
      file: /src/github/pulls_reviews.go
      line: 197
  source:
    file: /src/github/pulls.go
    line: 19
- name: PullStats
  summary: PullStats represents the number of total, merged, mergable and unmergeable
    pull-requests.
  description: |
    PullStats represents the number of total, merged, mergable and unmergeable pull-requests.
  code: "type PullStats struct {\n\tTotalPulls\t*int\t`json:\"total_pulls,omitempty\"`\n\tMergedPulls\t*int\t`json:\"merged_pulls,omitempty\"`\n\tMergablePulls\t*int\t`json:\"mergeable_pulls,omitempty\"`\n\tUnmergablePulls\t*int\t`json:\"unmergeable_pulls,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetMergablePulls
    summary: GetMergablePulls returns the MergablePulls field if it's non-nil, zero
      value otherwise.
    description: |
      GetMergablePulls returns the MergablePulls field if it's non-nil, zero value otherwise.
    code: func (p *PullStats) GetMergablePulls() int
    source:
      file: /src/github/github-accessors.go
      line: 6312
  - name: GetMergedPulls
    summary: GetMergedPulls returns the MergedPulls field if it's non-nil, zero value
      otherwise.
    description: |
      GetMergedPulls returns the MergedPulls field if it's non-nil, zero value otherwise.
    code: func (p *PullStats) GetMergedPulls() int
    source:
      file: /src/github/github-accessors.go
      line: 6320
  - name: GetTotalPulls
    summary: GetTotalPulls returns the TotalPulls field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalPulls returns the TotalPulls field if it's non-nil, zero value otherwise.
    code: func (p *PullStats) GetTotalPulls() int
    source:
      file: /src/github/github-accessors.go
      line: 6328
  - name: GetUnmergablePulls
    summary: GetUnmergablePulls returns the UnmergablePulls field if it's non-nil,
      zero value otherwise.
    description: |
      GetUnmergablePulls returns the UnmergablePulls field if it's non-nil, zero value otherwise.
    code: func (p *PullStats) GetUnmergablePulls() int
    source:
      file: /src/github/github-accessors.go
      line: 6336
  - name: String
    summary: ""
    description: ""
    code: func (s PullStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 131
  source:
    file: /src/github/admin_stats.go
    line: 124
- name: PunchCard
  summary: PunchCard represents the number of commits made during a given hour of
    a day of the week.
  description: |
    PunchCard represents the number of commits made during a given hour of a day of the week.
  code: "type PunchCard struct {\n\tDay\t*int\t// Day of the week (0-6: =Sunday -
    Saturday).\n\tHour\t*int\t// Hour of day (0-23).\n\tCommits\t*int\t// Number of
    commits.\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCommits
    summary: GetCommits returns the Commits field if it's non-nil, zero value otherwise.
    description: |
      GetCommits returns the Commits field if it's non-nil, zero value otherwise.
    code: func (p *PunchCard) GetCommits() int
    source:
      file: /src/github/github-accessors.go
      line: 6344
  - name: GetDay
    summary: GetDay returns the Day field if it's non-nil, zero value otherwise.
    description: |
      GetDay returns the Day field if it's non-nil, zero value otherwise.
    code: func (p *PunchCard) GetDay() int
    source:
      file: /src/github/github-accessors.go
      line: 6352
  - name: GetHour
    summary: GetHour returns the Hour field if it's non-nil, zero value otherwise.
    description: |
      GetHour returns the Hour field if it's non-nil, zero value otherwise.
    code: func (p *PunchCard) GetHour() int
    source:
      file: /src/github/github-accessors.go
      line: 6360
  source:
    file: /src/github/repos_stats.go
    line: 186
- name: PushEvent
  summary: PushEvent represents a git push to a GitHub repository.
  description: |
    PushEvent represents a git push to a GitHub repository.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#pushevent
  code: "type PushEvent struct {\n\tPushID\t\t*int\t\t\t`json:\"push_id,omitempty\"`\n\tHead\t\t*string\t\t\t`json:\"head,omitempty\"`\n\tRef\t\t*string\t\t\t`json:\"ref,omitempty\"`\n\tSize\t\t*int\t\t\t`json:\"size,omitempty\"`\n\tCommits\t\t[]PushEventCommit\t`json:\"commits,omitempty\"`\n\tBefore\t\t*string\t\t\t`json:\"before,omitempty\"`\n\tDistinctSize\t*int\t\t\t`json:\"distinct_size,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tAfter\t\t*string\t\t\t`json:\"after,omitempty\"`\n\tCreated\t\t*bool\t\t\t`json:\"created,omitempty\"`\n\tDeleted\t\t*bool\t\t\t`json:\"deleted,omitempty\"`\n\tForced\t\t*bool\t\t\t`json:\"forced,omitempty\"`\n\tBaseRef\t\t*string\t\t\t`json:\"base_ref,omitempty\"`\n\tCompare\t\t*string\t\t\t`json:\"compare,omitempty\"`\n\tRepo\t\t*PushEventRepository\t`json:\"repository,omitempty\"`\n\tHeadCommit\t*PushEventCommit\t`json:\"head_commit,omitempty\"`\n\tPusher\t\t*User\t\t\t`json:\"pusher,omitempty\"`\n\tSender\t\t*User\t\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAfter
    summary: GetAfter returns the After field if it's non-nil, zero value otherwise.
    description: |
      GetAfter returns the After field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetAfter() string
    source:
      file: /src/github/github-accessors.go
      line: 6368
  - name: GetBaseRef
    summary: GetBaseRef returns the BaseRef field if it's non-nil, zero value otherwise.
    description: |
      GetBaseRef returns the BaseRef field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetBaseRef() string
    source:
      file: /src/github/github-accessors.go
      line: 6376
  - name: GetBefore
    summary: GetBefore returns the Before field if it's non-nil, zero value otherwise.
    description: |
      GetBefore returns the Before field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetBefore() string
    source:
      file: /src/github/github-accessors.go
      line: 6384
  - name: GetCompare
    summary: GetCompare returns the Compare field if it's non-nil, zero value otherwise.
    description: |
      GetCompare returns the Compare field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetCompare() string
    source:
      file: /src/github/github-accessors.go
      line: 6392
  - name: GetCreated
    summary: GetCreated returns the Created field if it's non-nil, zero value otherwise.
    description: |
      GetCreated returns the Created field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetCreated() bool
    source:
      file: /src/github/github-accessors.go
      line: 6400
  - name: GetDeleted
    summary: GetDeleted returns the Deleted field if it's non-nil, zero value otherwise.
    description: |
      GetDeleted returns the Deleted field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetDeleted() bool
    source:
      file: /src/github/github-accessors.go
      line: 6408
  - name: GetDistinctSize
    summary: GetDistinctSize returns the DistinctSize field if it's non-nil, zero
      value otherwise.
    description: |
      GetDistinctSize returns the DistinctSize field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetDistinctSize() int
    source:
      file: /src/github/github-accessors.go
      line: 6416
  - name: GetForced
    summary: GetForced returns the Forced field if it's non-nil, zero value otherwise.
    description: |
      GetForced returns the Forced field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetForced() bool
    source:
      file: /src/github/github-accessors.go
      line: 6424
  - name: GetHead
    summary: GetHead returns the Head field if it's non-nil, zero value otherwise.
    description: |
      GetHead returns the Head field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetHead() string
    source:
      file: /src/github/github-accessors.go
      line: 6432
  - name: GetHeadCommit
    summary: GetHeadCommit returns the HeadCommit field.
    description: |
      GetHeadCommit returns the HeadCommit field.
    code: func (p *PushEvent) GetHeadCommit() *PushEventCommit
    source:
      file: /src/github/github-accessors.go
      line: 6440
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (p *PushEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 6448
  - name: GetPushID
    summary: GetPushID returns the PushID field if it's non-nil, zero value otherwise.
    description: |
      GetPushID returns the PushID field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetPushID() int
    source:
      file: /src/github/github-accessors.go
      line: 6464
  - name: GetPusher
    summary: GetPusher returns the Pusher field.
    description: |
      GetPusher returns the Pusher field.
    code: func (p *PushEvent) GetPusher() *User
    source:
      file: /src/github/github-accessors.go
      line: 6456
  - name: GetRef
    summary: GetRef returns the Ref field if it's non-nil, zero value otherwise.
    description: |
      GetRef returns the Ref field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetRef() string
    source:
      file: /src/github/github-accessors.go
      line: 6472
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (p *PushEvent) GetRepo() *PushEventRepository
    source:
      file: /src/github/github-accessors.go
      line: 6480
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (p *PushEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 6488
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (p *PushEvent) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 6496
  - name: String
    summary: ""
    description: ""
    code: func (p PushEvent) String() string
    source:
      file: /src/github/event_types.go
      line: 566
  source:
    file: /src/github/event_types.go
    line: 543
- name: PushEventCommit
  summary: PushEventCommit represents a git commit in a GitHub PushEvent.
  description: |
    PushEventCommit represents a git commit in a GitHub PushEvent.
  code: "type PushEventCommit struct {\n\tMessage\t\t*string\t\t`json:\"message,omitempty\"`\n\tAuthor\t\t*CommitAuthor\t`json:\"author,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tDistinct\t*bool\t\t`json:\"distinct,omitempty\"`\n\n\t//
    The following fields are only populated by Events API.\n\tSHA\t*string\t`json:\"sha,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tID\t\t*string\t\t`json:\"id,omitempty\"`\n\tTreeID\t\t*string\t\t`json:\"tree_id,omitempty\"`\n\tTimestamp\t*Timestamp\t`json:\"timestamp,omitempty\"`\n\tCommitter\t*CommitAuthor\t`json:\"committer,omitempty\"`\n\tAdded\t\t[]string\t`json:\"added,omitempty\"`\n\tRemoved\t\t[]string\t`json:\"removed,omitempty\"`\n\tModified\t[]string\t`json:\"modified,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAuthor
    summary: GetAuthor returns the Author field.
    description: |
      GetAuthor returns the Author field.
    code: func (p *PushEventCommit) GetAuthor() *CommitAuthor
    source:
      file: /src/github/github-accessors.go
      line: 6504
  - name: GetCommitter
    summary: GetCommitter returns the Committer field.
    description: |
      GetCommitter returns the Committer field.
    code: func (p *PushEventCommit) GetCommitter() *CommitAuthor
    source:
      file: /src/github/github-accessors.go
      line: 6512
  - name: GetDistinct
    summary: GetDistinct returns the Distinct field if it's non-nil, zero value otherwise.
    description: |
      GetDistinct returns the Distinct field if it's non-nil, zero value otherwise.
    code: func (p *PushEventCommit) GetDistinct() bool
    source:
      file: /src/github/github-accessors.go
      line: 6520
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (p *PushEventCommit) GetID() string
    source:
      file: /src/github/github-accessors.go
      line: 6528
  - name: GetMessage
    summary: GetMessage returns the Message field if it's non-nil, zero value otherwise.
    description: |
      GetMessage returns the Message field if it's non-nil, zero value otherwise.
    code: func (p *PushEventCommit) GetMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 6536
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (p *PushEventCommit) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 6544
  - name: GetTimestamp
    summary: GetTimestamp returns the Timestamp field if it's non-nil, zero value
      otherwise.
    description: |
      GetTimestamp returns the Timestamp field if it's non-nil, zero value otherwise.
    code: func (p *PushEventCommit) GetTimestamp() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 6552
  - name: GetTreeID
    summary: GetTreeID returns the TreeID field if it's non-nil, zero value otherwise.
    description: |
      GetTreeID returns the TreeID field if it's non-nil, zero value otherwise.
    code: func (p *PushEventCommit) GetTreeID() string
    source:
      file: /src/github/github-accessors.go
      line: 6560
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (p *PushEventCommit) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6568
  - name: String
    summary: ""
    description: ""
    code: func (p PushEventCommit) String() string
    source:
      file: /src/github/event_types.go
      line: 590
  source:
    file: /src/github/event_types.go
    line: 571
- name: PushEventRepoOwner
  summary: PushEventRepoOwner is a basic representation of user/org in a PushEvent
    payload.
  description: |
    PushEventRepoOwner is a basic representation of user/org in a PushEvent payload.
  code: "type PushEventRepoOwner struct {\n\tName\t*string\t`json:\"name,omitempty\"`\n\tEmail\t*string\t`json:\"email,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepoOwner) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 6576
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepoOwner) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 6584
  source:
    file: /src/github/event_types.go
    line: 631
- name: PushEventRepository
  summary: PushEventRepository represents the repo object in a PushEvent payload.
  description: |
    PushEventRepository represents the repo object in a PushEvent payload.
  code: "type PushEventRepository struct {\n\tID\t\t*int\t\t\t`json:\"id,omitempty\"`\n\tName\t\t*string\t\t\t`json:\"name,omitempty\"`\n\tFullName\t*string\t\t\t`json:\"full_name,omitempty\"`\n\tOwner\t\t*PushEventRepoOwner\t`json:\"owner,omitempty\"`\n\tPrivate\t\t*bool\t\t\t`json:\"private,omitempty\"`\n\tDescription\t*string\t\t\t`json:\"description,omitempty\"`\n\tFork\t\t*bool\t\t\t`json:\"fork,omitempty\"`\n\tCreatedAt\t*Timestamp\t\t`json:\"created_at,omitempty\"`\n\tPushedAt\t*Timestamp\t\t`json:\"pushed_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t\t`json:\"updated_at,omitempty\"`\n\tHomepage\t*string\t\t\t`json:\"homepage,omitempty\"`\n\tSize\t\t*int\t\t\t`json:\"size,omitempty\"`\n\tStargazersCount\t*int\t\t\t`json:\"stargazers_count,omitempty\"`\n\tWatchersCount\t*int\t\t\t`json:\"watchers_count,omitempty\"`\n\tLanguage\t*string\t\t\t`json:\"language,omitempty\"`\n\tHasIssues\t*bool\t\t\t`json:\"has_issues,omitempty\"`\n\tHasDownloads\t*bool\t\t\t`json:\"has_downloads,omitempty\"`\n\tHasWiki\t\t*bool\t\t\t`json:\"has_wiki,omitempty\"`\n\tHasPages\t*bool\t\t\t`json:\"has_pages,omitempty\"`\n\tForksCount\t*int\t\t\t`json:\"forks_count,omitempty\"`\n\tOpenIssuesCount\t*int\t\t\t`json:\"open_issues_count,omitempty\"`\n\tDefaultBranch\t*string\t\t\t`json:\"default_branch,omitempty\"`\n\tMasterBranch\t*string\t\t\t`json:\"master_branch,omitempty\"`\n\tOrganization\t*string\t\t\t`json:\"organization,omitempty\"`\n\tURL\t\t*string\t\t\t`json:\"url,omitempty\"`\n\tArchiveURL\t*string\t\t\t`json:\"archive_url,omitempty\"`\n\tHTMLURL\t\t*string\t\t\t`json:\"html_url,omitempty\"`\n\tStatusesURL\t*string\t\t\t`json:\"statuses_url,omitempty\"`\n\tGitURL\t\t*string\t\t\t`json:\"git_url,omitempty\"`\n\tSSHURL\t\t*string\t\t\t`json:\"ssh_url,omitempty\"`\n\tCloneURL\t*string\t\t\t`json:\"clone_url,omitempty\"`\n\tSVNURL\t\t*string\t\t\t`json:\"svn_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetArchiveURL
    summary: GetArchiveURL returns the ArchiveURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetArchiveURL returns the ArchiveURL field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetArchiveURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6592
  - name: GetCloneURL
    summary: GetCloneURL returns the CloneURL field if it's non-nil, zero value otherwise.
    description: |
      GetCloneURL returns the CloneURL field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetCloneURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6600
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 6608
  - name: GetDefaultBranch
    summary: GetDefaultBranch returns the DefaultBranch field if it's non-nil, zero
      value otherwise.
    description: |
      GetDefaultBranch returns the DefaultBranch field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetDefaultBranch() string
    source:
      file: /src/github/github-accessors.go
      line: 6616
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 6624
  - name: GetFork
    summary: GetFork returns the Fork field if it's non-nil, zero value otherwise.
    description: |
      GetFork returns the Fork field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetFork() bool
    source:
      file: /src/github/github-accessors.go
      line: 6632
  - name: GetForksCount
    summary: GetForksCount returns the ForksCount field if it's non-nil, zero value
      otherwise.
    description: |
      GetForksCount returns the ForksCount field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetForksCount() int
    source:
      file: /src/github/github-accessors.go
      line: 6640
  - name: GetFullName
    summary: GetFullName returns the FullName field if it's non-nil, zero value otherwise.
    description: |
      GetFullName returns the FullName field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetFullName() string
    source:
      file: /src/github/github-accessors.go
      line: 6648
  - name: GetGitURL
    summary: GetGitURL returns the GitURL field if it's non-nil, zero value otherwise.
    description: |
      GetGitURL returns the GitURL field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetGitURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6656
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6704
  - name: GetHasDownloads
    summary: GetHasDownloads returns the HasDownloads field if it's non-nil, zero
      value otherwise.
    description: |
      GetHasDownloads returns the HasDownloads field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetHasDownloads() bool
    source:
      file: /src/github/github-accessors.go
      line: 6664
  - name: GetHasIssues
    summary: GetHasIssues returns the HasIssues field if it's non-nil, zero value
      otherwise.
    description: |
      GetHasIssues returns the HasIssues field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetHasIssues() bool
    source:
      file: /src/github/github-accessors.go
      line: 6672
  - name: GetHasPages
    summary: GetHasPages returns the HasPages field if it's non-nil, zero value otherwise.
    description: |
      GetHasPages returns the HasPages field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetHasPages() bool
    source:
      file: /src/github/github-accessors.go
      line: 6680
  - name: GetHasWiki
    summary: GetHasWiki returns the HasWiki field if it's non-nil, zero value otherwise.
    description: |
      GetHasWiki returns the HasWiki field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetHasWiki() bool
    source:
      file: /src/github/github-accessors.go
      line: 6688
  - name: GetHomepage
    summary: GetHomepage returns the Homepage field if it's non-nil, zero value otherwise.
    description: |
      GetHomepage returns the Homepage field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetHomepage() string
    source:
      file: /src/github/github-accessors.go
      line: 6696
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 6712
  - name: GetLanguage
    summary: GetLanguage returns the Language field if it's non-nil, zero value otherwise.
    description: |
      GetLanguage returns the Language field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetLanguage() string
    source:
      file: /src/github/github-accessors.go
      line: 6720
  - name: GetMasterBranch
    summary: GetMasterBranch returns the MasterBranch field if it's non-nil, zero
      value otherwise.
    description: |
      GetMasterBranch returns the MasterBranch field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetMasterBranch() string
    source:
      file: /src/github/github-accessors.go
      line: 6728
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 6736
  - name: GetOpenIssuesCount
    summary: GetOpenIssuesCount returns the OpenIssuesCount field if it's non-nil,
      zero value otherwise.
    description: |
      GetOpenIssuesCount returns the OpenIssuesCount field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetOpenIssuesCount() int
    source:
      file: /src/github/github-accessors.go
      line: 6744
  - name: GetOrganization
    summary: GetOrganization returns the Organization field if it's non-nil, zero
      value otherwise.
    description: |
      GetOrganization returns the Organization field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetOrganization() string
    source:
      file: /src/github/github-accessors.go
      line: 6752
  - name: GetOwner
    summary: GetOwner returns the Owner field.
    description: |
      GetOwner returns the Owner field.
    code: func (p *PushEventRepository) GetOwner() *PushEventRepoOwner
    source:
      file: /src/github/github-accessors.go
      line: 6760
  - name: GetPrivate
    summary: GetPrivate returns the Private field if it's non-nil, zero value otherwise.
    description: |
      GetPrivate returns the Private field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetPrivate() bool
    source:
      file: /src/github/github-accessors.go
      line: 6768
  - name: GetPushedAt
    summary: GetPushedAt returns the PushedAt field if it's non-nil, zero value otherwise.
    description: |
      GetPushedAt returns the PushedAt field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetPushedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 6776
  - name: GetSSHURL
    summary: GetSSHURL returns the SSHURL field if it's non-nil, zero value otherwise.
    description: |
      GetSSHURL returns the SSHURL field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetSSHURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6792
  - name: GetSVNURL
    summary: GetSVNURL returns the SVNURL field if it's non-nil, zero value otherwise.
    description: |
      GetSVNURL returns the SVNURL field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetSVNURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6816
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 6784
  - name: GetStargazersCount
    summary: GetStargazersCount returns the StargazersCount field if it's non-nil,
      zero value otherwise.
    description: |
      GetStargazersCount returns the StargazersCount field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetStargazersCount() int
    source:
      file: /src/github/github-accessors.go
      line: 6800
  - name: GetStatusesURL
    summary: GetStatusesURL returns the StatusesURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetStatusesURL returns the StatusesURL field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetStatusesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6808
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6832
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 6824
  - name: GetWatchersCount
    summary: GetWatchersCount returns the WatchersCount field if it's non-nil, zero
      value otherwise.
    description: |
      GetWatchersCount returns the WatchersCount field if it's non-nil, zero value otherwise.
    code: func (p *PushEventRepository) GetWatchersCount() int
    source:
      file: /src/github/github-accessors.go
      line: 6840
  source:
    file: /src/github/event_types.go
    line: 595
- name: Rate
  summary: Rate represents the rate limit for the current client.
  description: |
    Rate represents the rate limit for the current client.
  code: "type Rate struct {\n\t// The number of requests per hour the client is currently
    limited to.\n\tLimit\tint\t`json:\"limit\"`\n\n\t// The number of remaining requests
    the client can make this hour.\n\tRemaining\tint\t`json:\"remaining\"`\n\n\t//
    The time at which the current rate limit will reset.\n\tReset\tTimestamp\t`json:\"reset\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: String
    summary: ""
    description: ""
    code: func (r Rate) String() string
    source:
      file: /src/github/github.go
      line: 743
  source:
    file: /src/github/github.go
    line: 732
- name: RateLimitError
  summary: RateLimitError occurs when GitHub returns 403 Forbidden response with a
    rate limit remaining value of 0, and error message starts with "API rate limit
    exceeded for ".
  description: |
    RateLimitError occurs when GitHub returns 403 Forbidden response with a rate limit remaining value of 0, and error message starts with "API rate limit exceeded for ".
  code: "type RateLimitError struct {\n\tRate\t\tRate\t\t// Rate specifies last known
    rate limit for the client\n\tResponse\t*http.Response\t// HTTP response that caused
    this error\n\tMessage\t\tstring\t\t`json:\"message\"`\t// error message\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Error
    summary: ""
    description: ""
    code: func (r *RateLimitError) Error() string
    source:
      file: /src/github/github.go
      line: 582
  source:
    file: /src/github/github.go
    line: 576
- name: RateLimits
  summary: RateLimits represents the rate limits for the current client.
  description: |
    RateLimits represents the rate limits for the current client.
  code: "type RateLimits struct {\n\t// The rate limit for non-search API requests.
    Unauthenticated\n\t// requests are limited to 60 per hour. Authenticated requests
    are\n\t// limited to 5,000 per hour.\n\t//\n\t// GitHub API docs: https://developer.github.com/v3/#rate-limiting\n\tCore\t*Rate\t`json:\"core\"`\n\n\t//
    The rate limit for search API requests. Unauthenticated requests\n\t// are limited
    to 10 requests per minutes. Authenticated requests are\n\t// limited to 30 per
    minute.\n\t//\n\t// GitHub API docs: https://developer.github.com/v3/search/#rate-limit\n\tSearch\t*Rate\t`json:\"search\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCore
    summary: GetCore returns the Core field.
    description: |
      GetCore returns the Core field.
    code: func (r *RateLimits) GetCore() *Rate
    source:
      file: /src/github/github-accessors.go
      line: 6848
  - name: GetSearch
    summary: GetSearch returns the Search field.
    description: |
      GetSearch returns the Search field.
    code: func (r *RateLimits) GetSearch() *Rate
    source:
      file: /src/github/github-accessors.go
      line: 6856
  - name: String
    summary: ""
    description: ""
    code: func (r RateLimits) String() string
    source:
      file: /src/github/github.go
      line: 764
  source:
    file: /src/github/github.go
    line: 748
- name: RawOptions
  summary: RawOptions specifies parameters when user wants to get raw format of a
    response instead of JSON.
  description: |
    RawOptions specifies parameters when user wants to get raw format of a response instead of JSON.
  code: "type RawOptions struct {\n\tType RawType\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/github.go
    line: 189
- name: RawType
  summary: RawType represents type of raw format of a request instead of JSON.
  description: |
    RawType represents type of raw format of a request instead of JSON.
  code: type RawType uint8
  consts:
  - names: Diff
    summary: Diff format.
    description: |
      Diff format.
    code: Diff RawType = 1 + iota
    source:
      file: /src/github/github.go
      line: 182
  - names: Patch
    summary: Patch format.
    description: |
      Patch format.
    code: Patch
    source:
      file: /src/github/github.go
      line: 184
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/github.go
    line: 178
- name: Reaction
  summary: Reaction represents a GitHub reaction.
  description: |
    Reaction represents a GitHub reaction.
  code: "type Reaction struct {\n\t// ID is the Reaction ID.\n\tID\t*int\t`json:\"id,omitempty\"`\n\tUser\t*User\t`json:\"user,omitempty\"`\n\t//
    Content is the type of reaction.\n\t// Possible values are:\n\t//     \"+1\",
    \"-1\", \"laugh\", \"confused\", \"heart\", \"hooray\".\n\tContent\t*string\t`json:\"content,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetContent
    summary: GetContent returns the Content field if it's non-nil, zero value otherwise.
    description: |
      GetContent returns the Content field if it's non-nil, zero value otherwise.
    code: func (r *Reaction) GetContent() string
    source:
      file: /src/github/github-accessors.go
      line: 6864
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (r *Reaction) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 6872
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (r *Reaction) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 6880
  - name: String
    summary: ""
    description: ""
    code: func (r Reaction) String() string
    source:
      file: /src/github/reactions.go
      line: 42
  source:
    file: /src/github/reactions.go
    line: 20
- name: Reactions
  summary: Reactions represents a summary of GitHub reactions.
  description: |
    Reactions represents a summary of GitHub reactions.
  code: "type Reactions struct {\n\tTotalCount\t*int\t`json:\"total_count,omitempty\"`\n\tPlusOne\t\t*int\t`json:\"+1,omitempty\"`\n\tMinusOne\t*int\t`json:\"-1,omitempty\"`\n\tLaugh\t\t*int\t`json:\"laugh,omitempty\"`\n\tConfused\t*int\t`json:\"confused,omitempty\"`\n\tHeart\t\t*int\t`json:\"heart,omitempty\"`\n\tHooray\t\t*int\t`json:\"hooray,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetConfused
    summary: GetConfused returns the Confused field if it's non-nil, zero value otherwise.
    description: |
      GetConfused returns the Confused field if it's non-nil, zero value otherwise.
    code: func (r *Reactions) GetConfused() int
    source:
      file: /src/github/github-accessors.go
      line: 6888
  - name: GetHeart
    summary: GetHeart returns the Heart field if it's non-nil, zero value otherwise.
    description: |
      GetHeart returns the Heart field if it's non-nil, zero value otherwise.
    code: func (r *Reactions) GetHeart() int
    source:
      file: /src/github/github-accessors.go
      line: 6896
  - name: GetHooray
    summary: GetHooray returns the Hooray field if it's non-nil, zero value otherwise.
    description: |
      GetHooray returns the Hooray field if it's non-nil, zero value otherwise.
    code: func (r *Reactions) GetHooray() int
    source:
      file: /src/github/github-accessors.go
      line: 6904
  - name: GetLaugh
    summary: GetLaugh returns the Laugh field if it's non-nil, zero value otherwise.
    description: |
      GetLaugh returns the Laugh field if it's non-nil, zero value otherwise.
    code: func (r *Reactions) GetLaugh() int
    source:
      file: /src/github/github-accessors.go
      line: 6912
  - name: GetMinusOne
    summary: GetMinusOne returns the MinusOne field if it's non-nil, zero value otherwise.
    description: |
      GetMinusOne returns the MinusOne field if it's non-nil, zero value otherwise.
    code: func (r *Reactions) GetMinusOne() int
    source:
      file: /src/github/github-accessors.go
      line: 6920
  - name: GetPlusOne
    summary: GetPlusOne returns the PlusOne field if it's non-nil, zero value otherwise.
    description: |
      GetPlusOne returns the PlusOne field if it's non-nil, zero value otherwise.
    code: func (r *Reactions) GetPlusOne() int
    source:
      file: /src/github/github-accessors.go
      line: 6928
  - name: GetTotalCount
    summary: GetTotalCount returns the TotalCount field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalCount returns the TotalCount field if it's non-nil, zero value otherwise.
    code: func (r *Reactions) GetTotalCount() int
    source:
      file: /src/github/github-accessors.go
      line: 6936
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *Reactions) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6944
  source:
    file: /src/github/reactions.go
    line: 31
- name: ReactionsService
  summary: ReactionsService provides access to the reactions-related functions in
    the GitHub API.
  description: |
    ReactionsService provides access to the reactions-related functions in the GitHub API.

    GitHub API docs: https://developer.github.com/v3/reactions/
  code: type ReactionsService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: CreateCommentReaction
    summary: CreateCommentReaction creates a reaction for a commit comment.
    description: |
      CreateCommentReaction creates a reaction for a commit comment. Note that if you have already created a reaction of type content, the previously created reaction will be returned with Status: 200 OK.

      GitHub API docs: https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
    code: func (s ReactionsService) CreateCommentReaction(ctx context.Context, owner,
      repo string, id int, content string) (*Reaction, *Response, error)
    source:
      file: /src/github/reactions.go
      line: 78
  - name: CreateIssueCommentReaction
    summary: CreateIssueCommentReaction creates a reaction for an issue comment.
    description: |
      CreateIssueCommentReaction creates a reaction for an issue comment. Note that if you have already created a reaction of type content, the previously created reaction will be returned with Status: 200 OK.

      GitHub API docs: https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
    code: func (s ReactionsService) CreateIssueCommentReaction(ctx context.Context,
      owner, repo string, id int, content string) (*Reaction, *Response, error)
    source:
      file: /src/github/reactions.go
      line: 184
  - name: CreateIssueReaction
    summary: CreateIssueReaction creates a reaction for an issue.
    description: |
      CreateIssueReaction creates a reaction for an issue. Note that if you have already created a reaction of type content, the previously created reaction will be returned with Status: 200 OK.

      GitHub API docs: https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
    code: func (s ReactionsService) CreateIssueReaction(ctx context.Context, owner,
      repo string, number int, content string) (*Reaction, *Response, error)
    source:
      file: /src/github/reactions.go
      line: 131
  - name: CreatePullRequestCommentReaction
    summary: CreatePullRequestCommentReaction creates a reaction for a pull request
      review comment.
    description: |
      CreatePullRequestCommentReaction creates a reaction for a pull request review comment. Note that if you have already created a reaction of type content, the previously created reaction will be returned with Status: 200 OK.

      GitHub API docs: https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
    code: func (s ReactionsService) CreatePullRequestCommentReaction(ctx context.Context,
      owner, repo string, id int, content string) (*Reaction, *Response, error)
    source:
      file: /src/github/reactions.go
      line: 237
  - name: DeleteReaction
    summary: DeleteReaction deletes a reaction.
    description: |
      DeleteReaction deletes a reaction.

      GitHub API docs: https://developer.github.com/v3/reaction/reactions/#delete-a-reaction-archive
    code: func (s *ReactionsService) DeleteReaction(ctx context.Context, id int) (*Response,
      error)
    source:
      file: /src/github/reactions.go
      line: 261
  - name: ListCommentReactions
    summary: ListCommentReactions lists the reactions for a commit comment.
    description: |
      ListCommentReactions lists the reactions for a commit comment.

      GitHub API docs: https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment
    code: func (s *ReactionsService) ListCommentReactions(ctx context.Context, owner,
      repo string, id int, opt *ListOptions) ([]*Reaction, *Response, error)
    source:
      file: /src/github/reactions.go
      line: 49
  - name: ListIssueCommentReactions
    summary: ListIssueCommentReactions lists the reactions for an issue comment.
    description: |
      ListIssueCommentReactions lists the reactions for an issue comment.

      GitHub API docs: https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
    code: func (s *ReactionsService) ListIssueCommentReactions(ctx context.Context,
      owner, repo string, id int, opt *ListOptions) ([]*Reaction, *Response, error)
    source:
      file: /src/github/reactions.go
      line: 155
  - name: ListIssueReactions
    summary: ListIssueReactions lists the reactions for an issue.
    description: |
      ListIssueReactions lists the reactions for an issue.

      GitHub API docs: https://developer.github.com/v3/reactions/#list-reactions-for-an-issue
    code: func (s *ReactionsService) ListIssueReactions(ctx context.Context, owner,
      repo string, number int, opt *ListOptions) ([]*Reaction, *Response, error)
    source:
      file: /src/github/reactions.go
      line: 102
  - name: ListPullRequestCommentReactions
    summary: ListPullRequestCommentReactions lists the reactions for a pull request
      review comment.
    description: |
      ListPullRequestCommentReactions lists the reactions for a pull request review comment.

      GitHub API docs: https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
    code: func (s *ReactionsService) ListPullRequestCommentReactions(ctx context.Context,
      owner, repo string, id int, opt *ListOptions) ([]*Reaction, *Response, error)
    source:
      file: /src/github/reactions.go
      line: 208
  source:
    file: /src/github/reactions.go
    line: 17
- name: Reference
  summary: Reference represents a GitHub reference.
  description: |
    Reference represents a GitHub reference.
  code: "type Reference struct {\n\tRef\t*string\t\t`json:\"ref\"`\n\tURL\t*string\t\t`json:\"url\"`\n\tObject\t*GitObject\t`json:\"object\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetObject
    summary: GetObject returns the Object field.
    description: |
      GetObject returns the Object field.
    code: func (r *Reference) GetObject() *GitObject
    source:
      file: /src/github/github-accessors.go
      line: 6952
  - name: GetRef
    summary: GetRef returns the Ref field if it's non-nil, zero value otherwise.
    description: |
      GetRef returns the Ref field if it's non-nil, zero value otherwise.
    code: func (r *Reference) GetRef() string
    source:
      file: /src/github/github-accessors.go
      line: 6960
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *Reference) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6968
  - name: String
    summary: ""
    description: ""
    code: func (r Reference) String() string
    source:
      file: /src/github/git_refs.go
      line: 23
  source:
    file: /src/github/git_refs.go
    line: 17
- name: ReferenceListOptions
  summary: ReferenceListOptions specifies optional parameters to the GitService.ListRefs
    method.
  description: |
    ReferenceListOptions specifies optional parameters to the GitService.ListRefs method.
  code: "type ReferenceListOptions struct {\n\tType\tstring\t`url:\"-\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/git_refs.go
    line: 124
- name: ReleaseAsset
  summary: ReleaseAsset represents a GitHub release asset in a repository.
  description: |
    ReleaseAsset represents a GitHub release asset in a repository.
  code: "type ReleaseAsset struct {\n\tID\t\t\t*int\t\t`json:\"id,omitempty\"`\n\tURL\t\t\t*string\t\t`json:\"url,omitempty\"`\n\tName\t\t\t*string\t\t`json:\"name,omitempty\"`\n\tLabel\t\t\t*string\t\t`json:\"label,omitempty\"`\n\tState\t\t\t*string\t\t`json:\"state,omitempty\"`\n\tContentType\t\t*string\t\t`json:\"content_type,omitempty\"`\n\tSize\t\t\t*int\t\t`json:\"size,omitempty\"`\n\tDownloadCount\t\t*int\t\t`json:\"download_count,omitempty\"`\n\tCreatedAt\t\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t\t*Timestamp\t`json:\"updated_at,omitempty\"`\n\tBrowserDownloadURL\t*string\t\t`json:\"browser_download_url,omitempty\"`\n\tUploader\t\t*User\t\t`json:\"uploader,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBrowserDownloadURL
    summary: GetBrowserDownloadURL returns the BrowserDownloadURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetBrowserDownloadURL returns the BrowserDownloadURL field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetBrowserDownloadURL() string
    source:
      file: /src/github/github-accessors.go
      line: 6976
  - name: GetContentType
    summary: GetContentType returns the ContentType field if it's non-nil, zero value
      otherwise.
    description: |
      GetContentType returns the ContentType field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetContentType() string
    source:
      file: /src/github/github-accessors.go
      line: 6984
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 6992
  - name: GetDownloadCount
    summary: GetDownloadCount returns the DownloadCount field if it's non-nil, zero
      value otherwise.
    description: |
      GetDownloadCount returns the DownloadCount field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetDownloadCount() int
    source:
      file: /src/github/github-accessors.go
      line: 7000
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 7008
  - name: GetLabel
    summary: GetLabel returns the Label field if it's non-nil, zero value otherwise.
    description: |
      GetLabel returns the Label field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetLabel() string
    source:
      file: /src/github/github-accessors.go
      line: 7016
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 7024
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 7032
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 7040
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7064
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseAsset) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 7048
  - name: GetUploader
    summary: GetUploader returns the Uploader field.
    description: |
      GetUploader returns the Uploader field.
    code: func (r *ReleaseAsset) GetUploader() *User
    source:
      file: /src/github/github-accessors.go
      line: 7056
  - name: String
    summary: ""
    description: ""
    code: func (r ReleaseAsset) String() string
    source:
      file: /src/github/repos_releases.go
      line: 61
  source:
    file: /src/github/repos_releases.go
    line: 46
- name: ReleaseEvent
  summary: ReleaseEvent is triggered when a release is published.
  description: |
    ReleaseEvent is triggered when a release is published. The Webhook event name is "release".

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#releaseevent
  code: "type ReleaseEvent struct {\n\t// Action is the action that was performed.
    Possible value is: \"published\".\n\tAction\t*string\t\t\t`json:\"action,omitempty\"`\n\tRelease\t*RepositoryRelease\t`json:\"release,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (r *ReleaseEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 7072
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (r *ReleaseEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 7080
  - name: GetRelease
    summary: GetRelease returns the Release field.
    description: |
      GetRelease returns the Release field.
    code: func (r *ReleaseEvent) GetRelease() *RepositoryRelease
    source:
      file: /src/github/github-accessors.go
      line: 7088
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (r *ReleaseEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 7096
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (r *ReleaseEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 7104
  source:
    file: /src/github/event_types.go
    line: 640
- name: Rename
  summary: Rename contains details for 'renamed' events.
  description: |
    Rename contains details for 'renamed' events.
  code: "type Rename struct {\n\tFrom\t*string\t`json:\"from,omitempty\"`\n\tTo\t*string\t`json:\"to,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetFrom
    summary: GetFrom returns the From field if it's non-nil, zero value otherwise.
    description: |
      GetFrom returns the From field if it's non-nil, zero value otherwise.
    code: func (r *Rename) GetFrom() string
    source:
      file: /src/github/github-accessors.go
      line: 7112
  - name: GetTo
    summary: GetTo returns the To field if it's non-nil, zero value otherwise.
    description: |
      GetTo returns the To field if it's non-nil, zero value otherwise.
    code: func (r *Rename) GetTo() string
    source:
      file: /src/github/github-accessors.go
      line: 7120
  - name: String
    summary: ""
    description: ""
    code: func (r Rename) String() string
    source:
      file: /src/github/issues_events.go
      line: 149
  source:
    file: /src/github/issues_events.go
    line: 144
- name: RepoStats
  summary: RepoStats represents the number of total, root, fork, organization repositories
    together with the total number of pushes and wikis.
  description: |
    RepoStats represents the number of total, root, fork, organization repositories together with the total number of pushes and wikis.
  code: "type RepoStats struct {\n\tTotalRepos\t*int\t`json:\"total_repos,omitempty\"`\n\tRootRepos\t*int\t`json:\"root_repos,omitempty\"`\n\tForkRepos\t*int\t`json:\"fork_repos,omitempty\"`\n\tOrgRepos\t*int\t`json:\"org_repos,omitempty\"`\n\tTotalPushes\t*int\t`json:\"total_pushes,omitempty\"`\n\tTotalWikis\t*int\t`json:\"total_wikis,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetForkRepos
    summary: GetForkRepos returns the ForkRepos field if it's non-nil, zero value
      otherwise.
    description: |
      GetForkRepos returns the ForkRepos field if it's non-nil, zero value otherwise.
    code: func (r *RepoStats) GetForkRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 8488
  - name: GetOrgRepos
    summary: GetOrgRepos returns the OrgRepos field if it's non-nil, zero value otherwise.
    description: |
      GetOrgRepos returns the OrgRepos field if it's non-nil, zero value otherwise.
    code: func (r *RepoStats) GetOrgRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 8496
  - name: GetRootRepos
    summary: GetRootRepos returns the RootRepos field if it's non-nil, zero value
      otherwise.
    description: |
      GetRootRepos returns the RootRepos field if it's non-nil, zero value otherwise.
    code: func (r *RepoStats) GetRootRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 8504
  - name: GetTotalPushes
    summary: GetTotalPushes returns the TotalPushes field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalPushes returns the TotalPushes field if it's non-nil, zero value otherwise.
    code: func (r *RepoStats) GetTotalPushes() int
    source:
      file: /src/github/github-accessors.go
      line: 8512
  - name: GetTotalRepos
    summary: GetTotalRepos returns the TotalRepos field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalRepos returns the TotalRepos field if it's non-nil, zero value otherwise.
    code: func (r *RepoStats) GetTotalRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 8520
  - name: GetTotalWikis
    summary: GetTotalWikis returns the TotalWikis field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalWikis returns the TotalWikis field if it's non-nil, zero value otherwise.
    code: func (r *RepoStats) GetTotalWikis() int
    source:
      file: /src/github/github-accessors.go
      line: 8528
  - name: String
    summary: ""
    description: ""
    code: func (s RepoStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 146
  source:
    file: /src/github/admin_stats.go
    line: 137
- name: RepoStatus
  summary: RepoStatus represents the status of a repository at a particular reference.
  description: |
    RepoStatus represents the status of a repository at a particular reference.
  code: "type RepoStatus struct {\n\tID\t*int\t`json:\"id,omitempty\"`\n\tURL\t*string\t`json:\"url,omitempty\"`\n\n\t//
    State is the current state of the repository. Possible values are:\n\t// pending,
    success, error, or failure.\n\tState\t*string\t`json:\"state,omitempty\"`\n\n\t//
    TargetURL is the URL of the page representing this status. It will be\n\t// linked
    from the GitHub UI to allow users to see the source of the status.\n\tTargetURL\t*string\t`json:\"target_url,omitempty\"`\n\n\t//
    Description is a short high level summary of the status.\n\tDescription\t*string\t`json:\"description,omitempty\"`\n\n\t//
    A string label to differentiate this status from the statuses of other systems.\n\tContext\t*string\t`json:\"context,omitempty\"`\n\n\tCreator\t\t*User\t\t`json:\"creator,omitempty\"`\n\tCreatedAt\t*time.Time\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*time.Time\t`json:\"updated_at,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetContext
    summary: GetContext returns the Context field if it's non-nil, zero value otherwise.
    description: |
      GetContext returns the Context field if it's non-nil, zero value otherwise.
    code: func (r *RepoStatus) GetContext() string
    source:
      file: /src/github/github-accessors.go
      line: 8536
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (r *RepoStatus) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 8544
  - name: GetCreator
    summary: GetCreator returns the Creator field.
    description: |
      GetCreator returns the Creator field.
    code: func (r *RepoStatus) GetCreator() *User
    source:
      file: /src/github/github-accessors.go
      line: 8552
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (r *RepoStatus) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 8560
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (r *RepoStatus) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 8568
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (r *RepoStatus) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 8576
  - name: GetTargetURL
    summary: GetTargetURL returns the TargetURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetTargetURL returns the TargetURL field if it's non-nil, zero value otherwise.
    code: func (r *RepoStatus) GetTargetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8584
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *RepoStatus) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8600
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (r *RepoStatus) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 8592
  - name: String
    summary: ""
    description: ""
    code: func (r RepoStatus) String() string
    source:
      file: /src/github/repos_statuses.go
      line: 38
  source:
    file: /src/github/repos_statuses.go
    line: 15
- name: RepositoriesSearchResult
  summary: RepositoriesSearchResult represents the result of a repositories search.
  description: |
    RepositoriesSearchResult represents the result of a repositories search.
  code: "type RepositoriesSearchResult struct {\n\tTotal\t\t\t*int\t\t`json:\"total_count,omitempty\"`\n\tIncompleteResults\t*bool\t\t`json:\"incomplete_results,omitempty\"`\n\tRepositories\t\t[]Repository\t`json:\"items,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetIncompleteResults
    summary: GetIncompleteResults returns the IncompleteResults field if it's non-nil,
      zero value otherwise.
    description: |
      GetIncompleteResults returns the IncompleteResults field if it's non-nil, zero value otherwise.
    code: func (r *RepositoriesSearchResult) GetIncompleteResults() bool
    source:
      file: /src/github/github-accessors.go
      line: 7128
  - name: GetTotal
    summary: GetTotal returns the Total field if it's non-nil, zero value otherwise.
    description: |
      GetTotal returns the Total field if it's non-nil, zero value otherwise.
    code: func (r *RepositoriesSearchResult) GetTotal() int
    source:
      file: /src/github/github-accessors.go
      line: 7136
  source:
    file: /src/github/search.go
    line: 52
- name: RepositoriesService
  summary: RepositoriesService handles communication with the repository related methods
    of the GitHub API.
  description: |
    RepositoriesService handles communication with the repository related methods of the GitHub API.

    GitHub API docs: https://developer.github.com/v3/repos/
  code: type RepositoriesService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: AddAdminEnforcement
    summary: AddAdminEnforcement adds admin enforcement to a protected branch.
    description: |
      AddAdminEnforcement adds admin enforcement to a protected branch. It requires admin access and branch protection to be enabled.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#add-admin-enforcement-of-protected-branch
    code: func (s *RepositoriesService) AddAdminEnforcement(ctx context.Context, owner,
      repo, branch string) (*AdminEnforcement, *Response, error)
    source:
      file: /src/github/repos.go
      line: 953
  - name: AddCollaborator
    summary: AddCollaborator sends an invitation to the specified GitHub user to become
      a collaborator to the given repo.
    description: |
      AddCollaborator sends an invitation to the specified GitHub user to become a collaborator to the given repo.

      GitHub API docs: https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator
    code: func (s *RepositoriesService) AddCollaborator(ctx context.Context, owner,
      repo, user string, opt *RepositoryAddCollaboratorOptions) (*Response, error)
    source:
      file: /src/github/repos_collaborators.go
      line: 116
  - name: CompareCommits
    summary: CompareCommits compares a range of commits with each other.
    description: |
      CompareCommits compares a range of commits with each other. todo: support media formats - https://github.com/google/go-github/issues/6

      GitHub API docs: https://developer.github.com/v3/repos/commits/index.html#compare-two-commits
    code: func (s *RepositoriesService) CompareCommits(ctx context.Context, owner,
      repo string, base, head string) (*CommitsComparison, *Response, error)
    source:
      file: /src/github/repos_commits.go
      line: 222
  - name: Create
    summary: Create a new repository.
    description: |
      Create a new repository. If an organization is specified, the new repository will be created under that org. If the empty string is specified, it will be created for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/repos/#create
    code: func (s *RepositoriesService) Create(ctx context.Context, org string, repo
      *Repository) (*Repository, *Response, error)
    source:
      file: /src/github/repos.go
      line: 267
  - name: CreateComment
    summary: CreateComment creates a comment for the given commit.
    description: |
      CreateComment creates a comment for the given commit. Note: GitHub allows for comments to be created for non-existing files and positions.

      GitHub API docs: https://developer.github.com/v3/repos/comments/#create-a-commit-comment
    code: func (s *RepositoriesService) CreateComment(ctx context.Context, owner,
      repo, sha string, comment *RepositoryComment) (*RepositoryComment, *Response,
      error)
    source:
      file: /src/github/repos_comments.go
      line: 94
  - name: CreateDeployment
    summary: CreateDeployment creates a new deployment for a repository.
    description: |
      CreateDeployment creates a new deployment for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/deployments/#create-a-deployment
    code: func (s *RepositoriesService) CreateDeployment(ctx context.Context, owner,
      repo string, request *DeploymentRequest) (*Deployment, *Response, error)
    source:
      file: /src/github/repos_deployments.go
      line: 109
  - name: CreateDeploymentStatus
    summary: CreateDeploymentStatus creates a new status for a deployment.
    description: |
      CreateDeploymentStatus creates a new status for a deployment.

      GitHub API docs: https://developer.github.com/v3/repos/deployments/#create-a-deployment-status
    code: func (s *RepositoriesService) CreateDeploymentStatus(ctx context.Context,
      owner, repo string, deployment int, request *DeploymentStatusRequest) (*DeploymentStatus,
      *Response, error)
    source:
      file: /src/github/repos_deployments.go
      line: 204
  - name: CreateFile
    summary: CreateFile creates a new file in a repository at the given path and returns
      the commit and file metadata.
    description: |
      CreateFile creates a new file in a repository at the given path and returns the commit and file metadata.

      GitHub API docs: https://developer.github.com/v3/repos/contents/#create-a-file
    code: func (s *RepositoriesService) CreateFile(ctx context.Context, owner, repo,
      path string, opt *RepositoryContentFileOptions) (*RepositoryContentResponse,
      *Response, error)
    source:
      file: /src/github/repos_contents.go
      line: 174
  - name: CreateFork
    summary: CreateFork creates a fork of the specified repository.
    description: |
      CreateFork creates a fork of the specified repository.

      This method might return an *AcceptedError and a status code of 202. This is because this is the status that GitHub returns to signify that it is now computing creating the fork in a background task. A follow up request, after a delay of a second or so, should result in a successful request.

      GitHub API docs: https://developer.github.com/v3/repos/forks/#create-a-fork
    code: func (s *RepositoriesService) CreateFork(ctx context.Context, owner, repo
      string, opt *RepositoryCreateForkOptions) (*Repository, *Response, error)
    source:
      file: /src/github/repos_forks.go
      line: 66
  - name: CreateHook
    summary: CreateHook creates a Hook for the specified repository.
    description: |
      CreateHook creates a Hook for the specified repository. Name and Config are required fields.

      GitHub API docs: https://developer.github.com/v3/repos/hooks/#create-a-hook
    code: func (s *RepositoriesService) CreateHook(ctx context.Context, owner, repo
      string, hook *Hook) (*Hook, *Response, error)
    source:
      file: /src/github/repos_hooks.go
      line: 90
  - name: CreateKey
    summary: CreateKey adds a deploy key for a repository.
    description: |
      CreateKey adds a deploy key for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/keys/#create
    code: func (s *RepositoriesService) CreateKey(ctx context.Context, owner string,
      repo string, key *Key) (*Key, *Response, error)
    source:
      file: /src/github/repos_keys.go
      line: 62
  - name: CreateProject
    summary: CreateProject creates a GitHub Project for the specified repository.
    description: |
      CreateProject creates a GitHub Project for the specified repository.

      GitHub API docs: https://developer.github.com/v3/projects/#create-a-repository-project
    code: func (s *RepositoriesService) CreateProject(ctx context.Context, owner,
      repo string, opt *ProjectOptions) (*Project, *Response, error)
    source:
      file: /src/github/repos_projects.go
      line: 52
  - name: CreateRelease
    summary: CreateRelease adds a new release for a repository.
    description: |
      CreateRelease adds a new release for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#create-a-release
    code: func (s *RepositoriesService) CreateRelease(ctx context.Context, owner,
      repo string, release *RepositoryRelease) (*RepositoryRelease, *Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 129
  - name: CreateStatus
    summary: CreateStatus creates a new status for a repository at the specified reference.
    description: |
      CreateStatus creates a new status for a repository at the specified reference. Ref can be a SHA, a branch name, or a tag name.

      GitHub API docs: https://developer.github.com/v3/repos/statuses/#create-a-status
    code: func (s *RepositoriesService) CreateStatus(ctx context.Context, owner, repo,
      ref string, status *RepoStatus) (*RepoStatus, *Response, error)
    source:
      file: /src/github/repos_statuses.go
      line: 71
  - name: Delete
    summary: Delete a repository.
    description: |
      Delete a repository.

      GitHub API docs: https://developer.github.com/v3/repos/#delete-a-repository
    code: func (s *RepositoriesService) Delete(ctx context.Context, owner, repo string)
      (*Response, error)
    source:
      file: /src/github/repos.go
      line: 380
  - name: DeleteComment
    summary: DeleteComment deletes a single comment from a repository.
    description: |
      DeleteComment deletes a single comment from a repository.

      GitHub API docs: https://developer.github.com/v3/repos/comments/#delete-a-commit-comment
    code: func (s *RepositoriesService) DeleteComment(ctx context.Context, owner,
      repo string, id int) (*Response, error)
    source:
      file: /src/github/repos_comments.go
      line: 154
  - name: DeleteFile
    summary: DeleteFile deletes a file from a repository and returns the commit.
    description: |
      DeleteFile deletes a file from a repository and returns the commit. Requires the blob SHA of the file to be deleted.

      GitHub API docs: https://developer.github.com/v3/repos/contents/#delete-a-file
    code: func (s *RepositoriesService) DeleteFile(ctx context.Context, owner, repo,
      path string, opt *RepositoryContentFileOptions) (*RepositoryContentResponse,
      *Response, error)
    source:
      file: /src/github/repos_contents.go
      line: 210
  - name: DeleteHook
    summary: DeleteHook deletes a specified Hook.
    description: |
      DeleteHook deletes a specified Hook.

      GitHub API docs: https://developer.github.com/v3/repos/hooks/#delete-a-hook
    code: func (s *RepositoriesService) DeleteHook(ctx context.Context, owner, repo
      string, id int) (*Response, error)
    source:
      file: /src/github/repos_hooks.go
      line: 161
  - name: DeleteInvitation
    summary: DeleteInvitation deletes a repository invitation.
    description: |
      DeleteInvitation deletes a repository invitation.

      GitHub API docs: https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation
    code: func (s *RepositoriesService) DeleteInvitation(ctx context.Context, owner,
      repo string, invitationID int) (*Response, error)
    source:
      file: /src/github/repos_invitations.go
      line: 58
  - name: DeleteKey
    summary: DeleteKey deletes a deploy key.
    description: |
      DeleteKey deletes a deploy key.

      GitHub API docs: https://developer.github.com/v3/repos/keys/#delete
    code: func (s *RepositoriesService) DeleteKey(ctx context.Context, owner string,
      repo string, id int) (*Response, error)
    source:
      file: /src/github/repos_keys.go
      line: 102
  - name: DeleteRelease
    summary: DeleteRelease delete a single release from a repository.
    description: |
      DeleteRelease delete a single release from a repository.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#delete-a-release
    code: func (s *RepositoriesService) DeleteRelease(ctx context.Context, owner,
      repo string, id int) (*Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 167
  - name: DeleteReleaseAsset
    summary: DeleteReleaseAsset delete a single release asset from a repository.
    description: |
      DeleteReleaseAsset delete a single release asset from a repository.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#delete-a-release-asset
    code: func (s *RepositoriesService) DeleteReleaseAsset(ctx context.Context, owner,
      repo string, id int) (*Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 286
  - name: DisableDismissalRestrictions
    summary: DisableDismissalRestrictions disables dismissal restrictions of a protected
      branch.
    description: |
      DisableDismissalRestrictions disables dismissal restrictions of a protected branch. It requires admin access and branch protection to be enabled.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch
    code: func (s *RepositoriesService) DisableDismissalRestrictions(ctx context.Context,
      owner, repo, branch string) (*PullRequestReviewsEnforcement, *Response, error)
    source:
      file: /src/github/repos.go
      line: 887
  - name: DownloadContents
    summary: DownloadContents returns an io.ReadCloser that reads the contents of
      the specified file.
    description: |
      DownloadContents returns an io.ReadCloser that reads the contents of the specified file. This function will work with files of any size, as opposed to GetContents which is limited to 1 Mb files. It is the caller's responsibility to close the ReadCloser.
    code: func (s *RepositoriesService) DownloadContents(ctx context.Context, owner,
      repo, filepath string, opt *RepositoryContentGetOptions) (io.ReadCloser, error)
    source:
      file: /src/github/repos_contents.go
      line: 113
  - name: DownloadReleaseAsset
    summary: DownloadReleaseAsset downloads a release asset or returns a redirect
      URL.
    description: |
      DownloadReleaseAsset downloads a release asset or returns a redirect URL.

      DownloadReleaseAsset returns an io.ReadCloser that reads the contents of the specified release asset. It is the caller's responsibility to close the ReadCloser. If a redirect is returned, the redirect URL will be returned as a string instead of the io.ReadCloser. Exactly one of rc and redirectURL will be zero.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#get-a-single-release-asset
    code: func (s *RepositoriesService) DownloadReleaseAsset(ctx context.Context,
      owner, repo string, id int) (rc io.ReadCloser, redirectURL string, err error)
    source:
      file: /src/github/repos_releases.go
      line: 227
  - name: Edit
    summary: Edit updates a repository.
    description: |
      Edit updates a repository.

      GitHub API docs: https://developer.github.com/v3/repos/#edit
    code: func (s *RepositoriesService) Edit(ctx context.Context, owner, repo string,
      repository *Repository) (*Repository, *Response, error)
    source:
      file: /src/github/repos.go
      line: 361
  - name: EditHook
    summary: EditHook updates a specified Hook.
    description: |
      EditHook updates a specified Hook.

      GitHub API docs: https://developer.github.com/v3/repos/hooks/#edit-a-hook
    code: func (s *RepositoriesService) EditHook(ctx context.Context, owner, repo
      string, id int, hook *Hook) (*Hook, *Response, error)
    source:
      file: /src/github/repos_hooks.go
      line: 147
  - name: EditKey
    summary: EditKey edits a deploy key.
    description: |
      EditKey edits a deploy key.

      GitHub API docs: https://developer.github.com/v3/repos/keys/#edit
    code: func (s *RepositoriesService) EditKey(ctx context.Context, owner string,
      repo string, id int, key *Key) (*Key, *Response, error)
    source:
      file: /src/github/repos_keys.go
      line: 82
  - name: EditRelease
    summary: EditRelease edits a repository release.
    description: |
      EditRelease edits a repository release.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#edit-a-release
    code: func (s *RepositoriesService) EditRelease(ctx context.Context, owner, repo
      string, id int, release *RepositoryRelease) (*RepositoryRelease, *Response,
      error)
    source:
      file: /src/github/repos_releases.go
      line: 148
  - name: EditReleaseAsset
    summary: EditReleaseAsset edits a repository release asset.
    description: |
      EditReleaseAsset edits a repository release asset.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#edit-a-release-asset
    code: func (s *RepositoriesService) EditReleaseAsset(ctx context.Context, owner,
      repo string, id int, release *ReleaseAsset) (*ReleaseAsset, *Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 267
  - name: Get
    summary: Get fetches a repository.
    description: |
      Get fetches a repository.

      GitHub API docs: https://developer.github.com/v3/repos/#get
    code: func (s *RepositoriesService) Get(ctx context.Context, owner, repo string)
      (*Repository, *Response, error)
    source:
      file: /src/github/repos.go
      line: 292
  - name: GetAdminEnforcement
    summary: GetAdminEnforcement gets admin enforcement information of a protected
      branch.
    description: |
      GetAdminEnforcement gets admin enforcement information of a protected branch.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch
    code: func (s *RepositoriesService) GetAdminEnforcement(ctx context.Context, owner,
      repo, branch string) (*AdminEnforcement, *Response, error)
    source:
      file: /src/github/repos.go
      line: 930
  - name: GetArchiveLink
    summary: GetArchiveLink returns an URL to download a tarball or zipball archive
      for a repository.
    description: |
      GetArchiveLink returns an URL to download a tarball or zipball archive for a repository. The archiveFormat can be specified by either the github.Tarball or github.Zipball constant.

      GitHub API docs: https://developer.github.com/v3/repos/contents/#get-archive-link
    code: func (s *RepositoriesService) GetArchiveLink(ctx context.Context, owner,
      repo string, archiveformat archiveFormat, opt *RepositoryContentGetOptions)
      (*url.URL, *Response, error)
    source:
      file: /src/github/repos_contents.go
      line: 241
  - name: GetBranch
    summary: GetBranch gets the specified branch for a repository.
    description: |
      GetBranch gets the specified branch for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/#get-branch
    code: func (s *RepositoriesService) GetBranch(ctx context.Context, owner, repo,
      branch string) (*Branch, *Response, error)
    source:
      file: /src/github/repos.go
      line: 697
  - name: GetBranchProtection
    summary: GetBranchProtection gets the protection of a given branch.
    description: |
      GetBranchProtection gets the protection of a given branch.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#get-branch-protection
    code: func (s *RepositoriesService) GetBranchProtection(ctx context.Context, owner,
      repo, branch string) (*Protection, *Response, error)
    source:
      file: /src/github/repos.go
      line: 719
  - name: GetByID
    summary: GetByID fetches a repository.
    description: |
      GetByID fetches a repository.

      Note: GetByID uses the undocumented GitHub API endpoint /repositories/:id.
    code: func (s *RepositoriesService) GetByID(ctx context.Context, id int) (*Repository,
      *Response, error)
    source:
      file: /src/github/repos.go
      line: 338
  - name: GetCodeOfConduct
    summary: GetCodeOfConduct gets the contents of a repository's code of conduct.
    description: |
      GetCodeOfConduct gets the contents of a repository's code of conduct.

      GitHub API docs: https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct
    code: func (s *RepositoriesService) GetCodeOfConduct(ctx context.Context, owner,
      repo string) (*CodeOfConduct, *Response, error)
    source:
      file: /src/github/repos.go
      line: 316
  - name: GetCombinedStatus
    summary: GetCombinedStatus returns the combined status of a repository at the
      specified reference.
    description: |
      GetCombinedStatus returns the combined status of a repository at the specified reference. ref can be a SHA, a branch name, or a tag name.

      GitHub API docs: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref
    code: func (s *RepositoriesService) GetCombinedStatus(ctx context.Context, owner,
      repo, ref string, opt *ListOptions) (*CombinedStatus, *Response, error)
    source:
      file: /src/github/repos_statuses.go
      line: 110
  - name: GetComment
    summary: GetComment gets a single comment from a repository.
    description: |
      GetComment gets a single comment from a repository.

      GitHub API docs: https://developer.github.com/v3/repos/comments/#get-a-single-commit-comment
    code: func (s *RepositoriesService) GetComment(ctx context.Context, owner, repo
      string, id int) (*RepositoryComment, *Response, error)
    source:
      file: /src/github/repos_comments.go
      line: 113
  - name: GetCommit
    summary: GetCommit fetches the specified commit, including all details about it.
    description: |
      GetCommit fetches the specified commit, including all details about it.

      GitHub API docs: https://developer.github.com/v3/repos/commits/#get-a-single-commit See also: https://developer.github.com/v3/git/commits/#get-a-single-commit provides the same functionality
    code: func (s *RepositoriesService) GetCommit(ctx context.Context, owner, repo,
      sha string) (*RepositoryCommit, *Response, error)
    source:
      file: /src/github/repos_commits.go
      line: 146
  - name: GetCommitRaw
    summary: GetCommitRaw fetches the specified commit in raw (diff or patch) format.
    description: |
      GetCommitRaw fetches the specified commit in raw (diff or patch) format.
    code: func (s *RepositoriesService) GetCommitRaw(ctx context.Context, owner string,
      repo string, sha string, opt RawOptions) (string, *Response, error)
    source:
      file: /src/github/repos_commits.go
      line: 167
  - name: GetCommitSHA1
    summary: GetCommitSHA1 gets the SHA-1 of a commit reference.
    description: |
      GetCommitSHA1 gets the SHA-1 of a commit reference. If a last-known SHA1 is supplied and no new commits have occurred, a 304 Unmodified response is returned.

      GitHub API docs: https://developer.github.com/v3/repos/commits/#get-the-sha-1-of-a-commit-reference
    code: func (s *RepositoriesService) GetCommitSHA1(ctx context.Context, owner,
      repo, ref, lastSHA string) (string, *Response, error)
    source:
      file: /src/github/repos_commits.go
      line: 196
  - name: GetCommunityHealthMetrics
    summary: GetCommunityHealthMetrics retrieves all the community health metrics
      for a repository.
    description: |
      GetCommunityHealthMetrics retrieves all the community health metrics for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/community/#retrieve-community-health-metrics
    code: func (s *RepositoriesService) GetCommunityHealthMetrics(ctx context.Context,
      owner, repo string) (*CommunityHealthMetrics, *Response, error)
    source:
      file: /src/github/repos_community_health.go
      line: 40
  - name: GetContents
    summary: GetContents can return either the metadata and content of a single file
      (when path references a file) or the metadata of all the files and/or subdirectories
      of a directory (when path references a directory).
    description: |
      GetContents can return either the metadata and content of a single file (when path references a file) or the metadata of all the files and/or subdirectories of a directory (when path references a directory). To make it easy to distinguish between both result types and to mimic the API as much as possible, both result types will be returned but only one will contain a value and the other will be nil.

      GitHub API docs: https://developer.github.com/v3/repos/contents/#get-contents
    code: func (s *RepositoriesService) GetContents(ctx context.Context, owner, repo,
      path string, opt *RepositoryContentGetOptions) (fileContent *RepositoryContent,
      directoryContent []*RepositoryContent, resp *Response, err error)
    source:
      file: /src/github/repos_contents.go
      line: 143
  - name: GetDeployment
    summary: GetDeployment returns a single deployment of a repository.
    description: |
      GetDeployment returns a single deployment of a repository.

      GitHub API docs: https://developer.github.com/v3/repos/deployments/#get-a-single-deployment
    code: func (s *RepositoriesService) GetDeployment(ctx context.Context, owner,
      repo string, deploymentID int) (*Deployment, *Response, error)
    source:
      file: /src/github/repos_deployments.go
      line: 89
  - name: GetDeploymentStatus
    summary: GetDeploymentStatus returns a single deployment status of a repository.
    description: |
      GetDeploymentStatus returns a single deployment status of a repository.

      GitHub API docs: https://developer.github.com/v3/repos/deployments/#get-a-single-deployment-status
    code: func (s *RepositoriesService) GetDeploymentStatus(ctx context.Context, owner,
      repo string, deploymentID, deploymentStatusID int) (*DeploymentStatus, *Response,
      error)
    source:
      file: /src/github/repos_deployments.go
      line: 181
  - name: GetHook
    summary: GetHook returns a single specified Hook.
    description: |
      GetHook returns a single specified Hook.

      GitHub API docs: https://developer.github.com/v3/repos/hooks/#get-single-hook
    code: func (s *RepositoriesService) GetHook(ctx context.Context, owner, repo string,
      id int) (*Hook, *Response, error)
    source:
      file: /src/github/repos_hooks.go
      line: 133
  - name: GetKey
    summary: GetKey fetches a single deploy key.
    description: |
      GetKey fetches a single deploy key.

      GitHub API docs: https://developer.github.com/v3/repos/keys/#get
    code: func (s *RepositoriesService) GetKey(ctx context.Context, owner string,
      repo string, id int) (*Key, *Response, error)
    source:
      file: /src/github/repos_keys.go
      line: 42
  - name: GetLatestPagesBuild
    summary: GetLatestPagesBuild fetches the latest build information for a GitHub
      pages site.
    description: |
      GetLatestPagesBuild fetches the latest build information for a GitHub pages site.

      GitHub API docs: https://developer.github.com/v3/repos/pages/#list-latest-pages-build
    code: func (s *RepositoriesService) GetLatestPagesBuild(ctx context.Context, owner,
      repo string) (*PagesBuild, *Response, error)
    source:
      file: /src/github/repos_pages.go
      line: 88
  - name: GetLatestRelease
    summary: GetLatestRelease fetches the latest published release for the repository.
    description: |
      GetLatestRelease fetches the latest published release for the repository.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#get-the-latest-release
    code: func (s *RepositoriesService) GetLatestRelease(ctx context.Context, owner,
      repo string) (*RepositoryRelease, *Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 99
  - name: GetPageBuild
    summary: GetPageBuild fetches the specific build information for a GitHub pages
      site.
    description: |
      GetPageBuild fetches the specific build information for a GitHub pages site.

      GitHub API docs: https://developer.github.com/v3/repos/pages/#list-a-specific-pages-build
    code: func (s *RepositoriesService) GetPageBuild(ctx context.Context, owner, repo
      string, id int) (*PagesBuild, *Response, error)
    source:
      file: /src/github/repos_pages.go
      line: 107
  - name: GetPagesInfo
    summary: GetPagesInfo fetches information about a GitHub Pages site.
    description: |
      GetPagesInfo fetches information about a GitHub Pages site.

      GitHub API docs: https://developer.github.com/v3/repos/pages/#get-information-about-a-pages-site
    code: func (s *RepositoriesService) GetPagesInfo(ctx context.Context, owner, repo
      string) (*Pages, *Response, error)
    source:
      file: /src/github/repos_pages.go
      line: 42
  - name: GetPermissionLevel
    summary: GetPermissionLevel retrieves the specific permission level a collaborator
      has for a given repository.
    description: |
      GetPermissionLevel retrieves the specific permission level a collaborator has for a given repository. GitHub API docs: https://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level
    code: func (s *RepositoriesService) GetPermissionLevel(ctx context.Context, owner,
      repo, user string) (*RepositoryPermissionLevel, *Response, error)
    source:
      file: /src/github/repos_collaborators.go
      line: 84
  - name: GetPullRequestReviewEnforcement
    summary: GetPullRequestReviewEnforcement gets pull request review enforcement
      of a protected branch.
    description: |
      GetPullRequestReviewEnforcement gets pull request review enforcement of a protected branch.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch
    code: func (s *RepositoriesService) GetPullRequestReviewEnforcement(ctx context.Context,
      owner, repo, branch string) (*PullRequestReviewsEnforcement, *Response, error)
    source:
      file: /src/github/repos.go
      line: 841
  - name: GetReadme
    summary: GetReadme gets the Readme file for the repository.
    description: |
      GetReadme gets the Readme file for the repository.

      GitHub API docs: https://developer.github.com/v3/repos/contents/#get-the-readme
    code: func (s *RepositoriesService) GetReadme(ctx context.Context, owner, repo
      string, opt *RepositoryContentGetOptions) (*RepositoryContent, *Response, error)
    source:
      file: /src/github/repos_contents.go
      line: 91
  - name: GetRelease
    summary: GetRelease fetches a single release.
    description: |
      GetRelease fetches a single release.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#get-a-single-release
    code: func (s *RepositoriesService) GetRelease(ctx context.Context, owner, repo
      string, id int) (*RepositoryRelease, *Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 91
  - name: GetReleaseAsset
    summary: GetReleaseAsset fetches a single release asset.
    description: |
      GetReleaseAsset fetches a single release asset.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#get-a-single-release-asset
    code: func (s *RepositoriesService) GetReleaseAsset(ctx context.Context, owner,
      repo string, id int) (*ReleaseAsset, *Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 203
  - name: GetReleaseByTag
    summary: GetReleaseByTag fetches a release with the specified tag.
    description: |
      GetReleaseByTag fetches a release with the specified tag.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name
    code: func (s *RepositoriesService) GetReleaseByTag(ctx context.Context, owner,
      repo, tag string) (*RepositoryRelease, *Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 107
  - name: GetRequiredStatusChecks
    summary: GetRequiredStatusChecks gets the required status checks for a given protected
      branch.
    description: |
      GetRequiredStatusChecks gets the required status checks for a given protected branch.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch
    code: func (s *RepositoriesService) GetRequiredStatusChecks(ctx context.Context,
      owner, repo, branch string) (*RequiredStatusChecks, *Response, error)
    source:
      file: /src/github/repos.go
      line: 741
  - name: IsCollaborator
    summary: IsCollaborator checks whether the specified GitHub user has collaborator
      access to the given repo.
    description: |
      IsCollaborator checks whether the specified GitHub user has collaborator access to the given repo. Note: This will return false if the user is not a collaborator OR the user is not a GitHub user.

      GitHub API docs: https://developer.github.com/v3/repos/collaborators/#get
    code: func (s *RepositoriesService) IsCollaborator(ctx context.Context, owner,
      repo, user string) (bool, *Response, error)
    source:
      file: /src/github/repos_collaborators.go
      line: 61
  - name: License
    summary: License gets the contents of a repository's license if one is detected.
    description: |
      License gets the contents of a repository's license if one is detected.

      GitHub API docs: https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license
    code: func (s *RepositoriesService) License(ctx context.Context, owner, repo string)
      (*RepositoryLicense, *Response, error)
    source:
      file: /src/github/repos.go
      line: 822
  - name: List
    summary: List the repositories for a user.
    description: |
      List the repositories for a user. Passing the empty string will list repositories for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/repos/#list-user-repositories
    code: func (s *RepositoriesService) List(ctx context.Context, user string, opt
      *RepositoryListOptions) ([]*Repository, *Response, error)
    source:
      file: /src/github/repos.go
      line: 164
  - name: ListAll
    summary: ListAll lists all GitHub repositories in the order that they were created.
    description: |
      ListAll lists all GitHub repositories in the order that they were created.

      GitHub API docs: https://developer.github.com/v3/repos/#list-all-public-repositories
    code: func (s *RepositoriesService) ListAll(ctx context.Context, opt *RepositoryListAllOptions)
      ([]*Repository, *Response, error)
    source:
      file: /src/github/repos.go
      line: 242
  - name: ListAllTopics
    summary: ListAllTopics lists topics for a repository.
    description: |
      ListAllTopics lists topics for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/#list-all-topics-for-a-repository
    code: func (s *RepositoriesService) ListAllTopics(ctx context.Context, owner,
      repo string) ([]string, *Response, error)
    source:
      file: /src/github/repos.go
      line: 996
  - name: ListBranches
    summary: ListBranches lists branches for the specified repository.
    description: |
      ListBranches lists branches for the specified repository.

      GitHub API docs: https://developer.github.com/v3/repos/#list-branches
    code: func (s *RepositoriesService) ListBranches(ctx context.Context, owner string,
      repo string, opt *ListOptions) ([]*Branch, *Response, error)
    source:
      file: /src/github/repos.go
      line: 670
  - name: ListByOrg
    summary: ListByOrg lists the repositories for an organization.
    description: |
      ListByOrg lists the repositories for an organization.

      GitHub API docs: https://developer.github.com/v3/repos/#list-organization-repositories
    code: func (s *RepositoriesService) ListByOrg(ctx context.Context, org string,
      opt *RepositoryListByOrgOptions) ([]*Repository, *Response, error)
    source:
      file: /src/github/repos.go
      line: 207
  - name: ListCodeFrequency
    summary: ListCodeFrequency returns a weekly aggregate of the number of additions
      and deletions pushed to a repository.
    description: |
      ListCodeFrequency returns a weekly aggregate of the number of additions and deletions pushed to a repository. Returned WeeklyStats will contain additions and deletions, but not total commits.

      If this is the first time these statistics are requested for the given repository, this method will return an *AcceptedError and a status code of 202. This is because this is the status that GitHub returns to signify that it is now computing the requested statistics. A follow up request, after a delay of a second or so, should result in a successful request.

      GitHub API docs: https://developer.github.com/v3/repos/statistics/#code-frequency
    code: func (s *RepositoriesService) ListCodeFrequency(ctx context.Context, owner,
      repo string) ([]*WeeklyStats, *Response, error)
    source:
      file: /src/github/repos_stats.go
      line: 115
  - name: ListCollaborators
    summary: ListCollaborators lists the GitHub users that have access to the repository.
    description: |
      ListCollaborators lists the GitHub users that have access to the repository.

      GitHub API docs: https://developer.github.com/v3/repos/collaborators/#list-collaborators
    code: func (s *RepositoriesService) ListCollaborators(ctx context.Context, owner,
      repo string, opt *ListCollaboratorsOptions) ([]*User, *Response, error)
    source:
      file: /src/github/repos_collaborators.go
      line: 32
  - name: ListComments
    summary: ListComments lists all the comments for the repository.
    description: |
      ListComments lists all the comments for the repository.

      GitHub API docs: https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository
    code: func (s *RepositoriesService) ListComments(ctx context.Context, owner, repo
      string, opt *ListOptions) ([]*RepositoryComment, *Response, error)
    source:
      file: /src/github/repos_comments.go
      line: 39
  - name: ListCommitActivity
    summary: ListCommitActivity returns the last year of commit activity grouped by
      week.
    description: |
      ListCommitActivity returns the last year of commit activity grouped by week. The days array is a group of commits per day, starting on Sunday.

      If this is the first time these statistics are requested for the given repository, this method will return an *AcceptedError and a status code of 202. This is because this is the status that GitHub returns to signify that it is now computing the requested statistics. A follow up request, after a delay of a second or so, should result in a successful request.

      GitHub API docs: https://developer.github.com/v3/repos/statistics/#commit-activity
    code: func (s *RepositoriesService) ListCommitActivity(ctx context.Context, owner,
      repo string) ([]*WeeklyCommitActivity, *Response, error)
    source:
      file: /src/github/repos_stats.go
      line: 88
  - name: ListCommitComments
    summary: ListCommitComments lists all the comments for a given commit SHA.
    description: |
      ListCommitComments lists all the comments for a given commit SHA.

      GitHub API docs: https://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit
    code: func (s *RepositoriesService) ListCommitComments(ctx context.Context, owner,
      repo, sha string, opt *ListOptions) ([]*RepositoryComment, *Response, error)
    source:
      file: /src/github/repos_comments.go
      line: 66
  - name: ListCommits
    summary: ListCommits lists the commits of a repository.
    description: |
      ListCommits lists the commits of a repository.

      GitHub API docs: https://developer.github.com/v3/repos/commits/#list
    code: func (s *RepositoriesService) ListCommits(ctx context.Context, owner, repo
      string, opt *CommitsListOptions) ([]*RepositoryCommit, *Response, error)
    source:
      file: /src/github/repos_commits.go
      line: 118
  - name: ListContributors
    summary: ListContributors lists contributors for a repository.
    description: |
      ListContributors lists contributors for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/#list-contributors
    code: func (s *RepositoriesService) ListContributors(ctx context.Context, owner
      string, repository string, opt *ListContributorsOptions) ([]*Contributor, *Response,
      error)
    source:
      file: /src/github/repos.go
      line: 424
  - name: ListContributorsStats
    summary: ListContributorsStats gets a repo's contributor list with additions,
      deletions and commit counts.
    description: |
      ListContributorsStats gets a repo's contributor list with additions, deletions and commit counts.

      If this is the first time these statistics are requested for the given repository, this method will return an *AcceptedError and a status code of 202. This is because this is the status that GitHub returns to signify that it is now computing the requested statistics. A follow up request, after a delay of a second or so, should result in a successful request.

      GitHub API docs: https://developer.github.com/v3/repos/statistics/#contributors
    code: func (s *RepositoriesService) ListContributorsStats(ctx context.Context,
      owner, repo string) ([]*ContributorStats, *Response, error)
    source:
      file: /src/github/repos_stats.go
      line: 49
  - name: ListDeploymentStatuses
    summary: ListDeploymentStatuses lists the statuses of a given deployment of a
      repository.
    description: |
      ListDeploymentStatuses lists the statuses of a given deployment of a repository.

      GitHub API docs: https://developer.github.com/v3/repos/deployments/#list-deployment-statuses
    code: func (s *RepositoriesService) ListDeploymentStatuses(ctx context.Context,
      owner, repo string, deployment int, opt *ListOptions) ([]*DeploymentStatus,
      *Response, error)
    source:
      file: /src/github/repos_deployments.go
      line: 157
  - name: ListDeployments
    summary: ListDeployments lists the deployments of a repository.
    description: |
      ListDeployments lists the deployments of a repository.

      GitHub API docs: https://developer.github.com/v3/repos/deployments/#list-deployments
    code: func (s *RepositoriesService) ListDeployments(ctx context.Context, owner,
      repo string, opt *DeploymentsListOptions) ([]*Deployment, *Response, error)
    source:
      file: /src/github/repos_deployments.go
      line: 65
  - name: ListForks
    summary: ListForks lists the forks of the specified repository.
    description: |
      ListForks lists the forks of the specified repository.

      GitHub API docs: https://developer.github.com/v3/repos/forks/#list-forks
    code: func (s *RepositoriesService) ListForks(ctx context.Context, owner, repo
      string, opt *RepositoryListForksOptions) ([]*Repository, *Response, error)
    source:
      file: /src/github/repos_forks.go
      line: 26
  - name: ListHooks
    summary: ListHooks lists all Hooks for the specified repository.
    description: |
      ListHooks lists all Hooks for the specified repository.

      GitHub API docs: https://developer.github.com/v3/repos/hooks/#list
    code: func (s *RepositoriesService) ListHooks(ctx context.Context, owner, repo
      string, opt *ListOptions) ([]*Hook, *Response, error)
    source:
      file: /src/github/repos_hooks.go
      line: 109
  - name: ListInvitations
    summary: ListInvitations lists all currently-open repository invitations.
    description: |
      ListInvitations lists all currently-open repository invitations.

      GitHub API docs: https://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository
    code: func (s *RepositoriesService) ListInvitations(ctx context.Context, owner,
      repo string, opt *ListOptions) ([]*RepositoryInvitation, *Response, error)
    source:
      file: /src/github/repos_invitations.go
      line: 31
  - name: ListKeys
    summary: ListKeys lists the deploy keys for a repository.
    description: |
      ListKeys lists the deploy keys for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/keys/#list
    code: func (s *RepositoriesService) ListKeys(ctx context.Context, owner string,
      repo string, opt *ListOptions) ([]*Key, *Response, error)
    source:
      file: /src/github/repos_keys.go
      line: 18
  - name: ListLanguages
    summary: ListLanguages lists languages for the specified repository.
    description: |
      ListLanguages lists languages for the specified repository. The returned map specifies the languages and the number of bytes of code written in that language. For example:

          {
            "C": 78769,
            "Python": 7769
          }

      GitHub API docs: https://developer.github.com/v3/repos/#list-languages
    code: func (s *RepositoriesService) ListLanguages(ctx context.Context, owner string,
      repo string) (map[string]int, *Response, error)
    source:
      file: /src/github/repos.go
      line: 455
  - name: ListPagesBuilds
    summary: ListPagesBuilds lists the builds for a GitHub Pages site.
    description: |
      ListPagesBuilds lists the builds for a GitHub Pages site.

      GitHub API docs: https://developer.github.com/v3/repos/pages/#list-pages-builds
    code: func (s *RepositoriesService) ListPagesBuilds(ctx context.Context, owner,
      repo string, opt *ListOptions) ([]*PagesBuild, *Response, error)
    source:
      file: /src/github/repos_pages.go
      line: 64
  - name: ListParticipation
    summary: ListParticipation returns the total commit counts for the 'owner' and
      total commit counts in 'all'.
    description: |
      ListParticipation returns the total commit counts for the 'owner' and total commit counts in 'all'. 'all' is everyone combined, including the 'owner' in the last 52 weeks. If you’d like to get the commit counts for non-owners, you can subtract 'all' from 'owner'.

      The array order is oldest week (index 0) to most recent week.

      If this is the first time these statistics are requested for the given repository, this method will return an *AcceptedError and a status code of 202. This is because this is the status that GitHub returns to signify that it is now computing the requested statistics. A follow up request, after a delay of a second or so, should result in a successful request.

      GitHub API docs: https://developer.github.com/v3/repos/statistics/#participation
    code: func (s *RepositoriesService) ListParticipation(ctx context.Context, owner,
      repo string) (*RepositoryParticipation, *Response, error)
    source:
      file: /src/github/repos_stats.go
      line: 168
  - name: ListProjects
    summary: ListProjects lists the projects for a repo.
    description: |
      ListProjects lists the projects for a repo.

      GitHub API docs: https://developer.github.com/v3/projects/#list-repository-projects
    code: func (s *RepositoriesService) ListProjects(ctx context.Context, owner, repo
      string, opt *ProjectListOptions) ([]*Project, *Response, error)
    source:
      file: /src/github/repos_projects.go
      line: 25
  - name: ListPunchCard
    summary: ListPunchCard returns the number of commits per hour in each day.
    description: |
      ListPunchCard returns the number of commits per hour in each day.

      If this is the first time these statistics are requested for the given repository, this method will return an *AcceptedError and a status code of 202. This is because this is the status that GitHub returns to signify that it is now computing the requested statistics. A follow up request, after a delay of a second or so, should result in a successful request.

      GitHub API docs: https://developer.github.com/v3/repos/statistics/#punch-card
    code: func (s *RepositoriesService) ListPunchCard(ctx context.Context, owner,
      repo string) ([]*PunchCard, *Response, error)
    source:
      file: /src/github/repos_stats.go
      line: 201
  - name: ListReleaseAssets
    summary: ListReleaseAssets lists the release's assets.
    description: |
      ListReleaseAssets lists the release's assets.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#list-assets-for-a-release
    code: func (s *RepositoriesService) ListReleaseAssets(ctx context.Context, owner,
      repo string, id int, opt *ListOptions) ([]*ReleaseAsset, *Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 180
  - name: ListReleases
    summary: ListReleases lists the releases for a repository.
    description: |
      ListReleases lists the releases for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository
    code: func (s *RepositoriesService) ListReleases(ctx context.Context, owner, repo
      string, opt *ListOptions) ([]*RepositoryRelease, *Response, error)
    source:
      file: /src/github/repos_releases.go
      line: 68
  - name: ListRequiredStatusChecksContexts
    summary: ListRequiredStatusChecksContexts lists the required status checks contexts
      for a given protected branch.
    description: |
      ListRequiredStatusChecksContexts lists the required status checks contexts for a given protected branch.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#list-required-status-checks-contexts-of-protected-branch
    code: func (s *RepositoriesService) ListRequiredStatusChecksContexts(ctx context.Context,
      owner, repo, branch string) (contexts []string, resp *Response, err error)
    source:
      file: /src/github/repos.go
      line: 763
  - name: ListStatuses
    summary: ListStatuses lists the statuses of a repository at the specified reference.
    description: |
      ListStatuses lists the statuses of a repository at the specified reference. ref can be a SHA, a branch name, or a tag name.

      GitHub API docs: https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref
    code: func (s *RepositoriesService) ListStatuses(ctx context.Context, owner, repo,
      ref string, opt *ListOptions) ([]*RepoStatus, *Response, error)
    source:
      file: /src/github/repos_statuses.go
      line: 46
  - name: ListTags
    summary: ListTags lists tags for the specified repository.
    description: |
      ListTags lists tags for the specified repository.

      GitHub API docs: https://developer.github.com/v3/repos/#list-tags
    code: func (s *RepositoriesService) ListTags(ctx context.Context, owner string,
      repo string, opt *ListOptions) ([]*RepositoryTag, *Response, error)
    source:
      file: /src/github/repos.go
      line: 508
  - name: ListTeams
    summary: ListTeams lists the teams for the specified repository.
    description: |
      ListTeams lists the teams for the specified repository.

      GitHub API docs: https://developer.github.com/v3/repos/#list-teams
    code: func (s *RepositoriesService) ListTeams(ctx context.Context, owner string,
      repo string, opt *ListOptions) ([]*Team, *Response, error)
    source:
      file: /src/github/repos.go
      line: 474
  - name: ListTrafficClones
    summary: ListTrafficClones get total number of clones for the last 14 days and
      breaks it down either per day or week for the last 14 days.
    description: |
      ListTrafficClones get total number of clones for the last 14 days and breaks it down either per day or week for the last 14 days.

      GitHub API docs: https://developer.github.com/v3/repos/traffic/#views
    code: func (s *RepositoriesService) ListTrafficClones(ctx context.Context, owner,
      repo string, opt *TrafficBreakdownOptions) (*TrafficClones, *Response, error)
    source:
      file: /src/github/repos_traffic.go
      line: 122
  - name: ListTrafficPaths
    summary: ListTrafficPaths list the top 10 popular content over the last 14 days.
    description: |
      ListTrafficPaths list the top 10 popular content over the last 14 days.

      GitHub API docs: https://developer.github.com/v3/repos/traffic/#list-paths
    code: func (s *RepositoriesService) ListTrafficPaths(ctx context.Context, owner,
      repo string) ([]*TrafficPath, *Response, error)
    source:
      file: /src/github/repos_traffic.go
      line: 78
  - name: ListTrafficReferrers
    summary: ListTrafficReferrers list the top 10 referrers over the last 14 days.
    description: |
      ListTrafficReferrers list the top 10 referrers over the last 14 days.

      GitHub API docs: https://developer.github.com/v3/repos/traffic/#list-referrers
    code: func (s *RepositoriesService) ListTrafficReferrers(ctx context.Context,
      owner, repo string) ([]*TrafficReferrer, *Response, error)
    source:
      file: /src/github/repos_traffic.go
      line: 58
  - name: ListTrafficViews
    summary: ListTrafficViews get total number of views for the last 14 days and breaks
      it down either per day or week.
    description: |
      ListTrafficViews get total number of views for the last 14 days and breaks it down either per day or week.

      GitHub API docs: https://developer.github.com/v3/repos/traffic/#views
    code: func (s *RepositoriesService) ListTrafficViews(ctx context.Context, owner,
      repo string, opt *TrafficBreakdownOptions) (*TrafficViews, *Response, error)
    source:
      file: /src/github/repos_traffic.go
      line: 98
  - name: Merge
    summary: Merge a branch in the specified repository.
    description: |
      Merge a branch in the specified repository.

      GitHub API docs: https://developer.github.com/v3/repos/merging/#perform-a-merge
    code: func (s *RepositoriesService) Merge(ctx context.Context, owner, repo string,
      request *RepositoryMergeRequest) (*RepositoryCommit, *Response, error)
    source:
      file: /src/github/repos_merging.go
      line: 24
  - name: PingHook
    summary: PingHook triggers a 'ping' event to be sent to the Hook.
    description: |
      PingHook triggers a 'ping' event to be sent to the Hook.

      GitHub API docs: https://developer.github.com/v3/repos/hooks/#ping-a-hook
    code: func (s *RepositoriesService) PingHook(ctx context.Context, owner, repo
      string, id int) (*Response, error)
    source:
      file: /src/github/repos_hooks.go
      line: 173
  - name: RemoveAdminEnforcement
    summary: RemoveAdminEnforcement removes admin enforcement from a protected branch.
    description: |
      RemoveAdminEnforcement removes admin enforcement from a protected branch.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#remove-admin-enforcement-of-protected-branch
    code: func (s *RepositoriesService) RemoveAdminEnforcement(ctx context.Context,
      owner, repo, branch string) (*Response, error)
    source:
      file: /src/github/repos.go
      line: 975
  - name: RemoveBranchProtection
    summary: RemoveBranchProtection removes the protection of a given branch.
    description: |
      RemoveBranchProtection removes the protection of a given branch.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#remove-branch-protection
    code: func (s *RepositoriesService) RemoveBranchProtection(ctx context.Context,
      owner, repo, branch string) (*Response, error)
    source:
      file: /src/github/repos.go
      line: 806
  - name: RemoveCollaborator
    summary: RemoveCollaborator removes the specified GitHub user as collaborator
      from the given repo.
    description: |
      RemoveCollaborator removes the specified GitHub user as collaborator from the given repo. Note: Does not return error if a valid user that is not a collaborator is removed.

      GitHub API docs: https://developer.github.com/v3/repos/collaborators/#remove-collaborator
    code: func (s *RepositoriesService) RemoveCollaborator(ctx context.Context, owner,
      repo, user string) (*Response, error)
    source:
      file: /src/github/repos_collaborators.go
      line: 133
  - name: RemovePullRequestReviewEnforcement
    summary: RemovePullRequestReviewEnforcement removes pull request enforcement of
      a protected branch.
    description: |
      RemovePullRequestReviewEnforcement removes pull request enforcement of a protected branch.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#remove-pull-request-review-enforcement-of-protected-branch
    code: func (s *RepositoriesService) RemovePullRequestReviewEnforcement(ctx context.Context,
      owner, repo, branch string) (*Response, error)
    source:
      file: /src/github/repos.go
      line: 914
  - name: ReplaceAllTopics
    summary: ReplaceAllTopics replaces topics for a repository.
    description: |
      ReplaceAllTopics replaces topics for a repository.

      GitHub API docs: https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository
    code: func (s *RepositoriesService) ReplaceAllTopics(ctx context.Context, owner,
      repo string, topics []string) ([]string, *Response, error)
    source:
      file: /src/github/repos.go
      line: 1018
  - name: RequestPageBuild
    summary: RequestPageBuild requests a build of a GitHub Pages site without needing
      to push new commit.
    description: |
      RequestPageBuild requests a build of a GitHub Pages site without needing to push new commit.

      GitHub API docs: https://developer.github.com/v3/repos/pages/#request-a-page-build
    code: func (s *RepositoriesService) RequestPageBuild(ctx context.Context, owner,
      repo string) (*PagesBuild, *Response, error)
    source:
      file: /src/github/repos_pages.go
      line: 126
  - name: TestHook
    summary: TestHook triggers a test Hook by github.
    description: |
      TestHook triggers a test Hook by github.

      GitHub API docs: https://developer.github.com/v3/repos/hooks/#test-a-push-hook
    code: func (s *RepositoriesService) TestHook(ctx context.Context, owner, repo
      string, id int) (*Response, error)
    source:
      file: /src/github/repos_hooks.go
      line: 185
  - name: Transfer
    summary: Transfer transfers a repository from one account or organization to another.
    description: |
      Transfer transfers a repository from one account or organization to another.

      This method might return an *AcceptedError and a status code of 202. This is because this is the status that GitHub returns to signify that it has now scheduled the transfer of the repository in a background task. A follow up request, after a delay of a second or so, should result in a successful request.

      GitHub API docs: https://developer.github.com/v3/repos/#transfer-a-repository
    code: func (s *RepositoriesService) Transfer(ctx context.Context, owner, repo
      string, transfer TransferRequest) (*Repository, *Response, error)
    source:
      file: /src/github/repos.go
      line: 1058
  - name: UpdateBranchProtection
    summary: UpdateBranchProtection updates the protection of a given branch.
    description: |
      UpdateBranchProtection updates the protection of a given branch.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#update-branch-protection
    code: func (s *RepositoriesService) UpdateBranchProtection(ctx context.Context,
      owner, repo, branch string, preq *ProtectionRequest) (*Protection, *Response,
      error)
    source:
      file: /src/github/repos.go
      line: 784
  - name: UpdateComment
    summary: UpdateComment updates the body of a single comment.
    description: |
      UpdateComment updates the body of a single comment.

      GitHub API docs: https://developer.github.com/v3/repos/comments/#update-a-commit-comment
    code: func (s *RepositoriesService) UpdateComment(ctx context.Context, owner,
      repo string, id int, comment *RepositoryComment) (*RepositoryComment, *Response,
      error)
    source:
      file: /src/github/repos_comments.go
      line: 135
  - name: UpdateFile
    summary: UpdateFile updates a file in a repository at the given path and returns
      the commit and file metadata.
    description: |
      UpdateFile updates a file in a repository at the given path and returns the commit and file metadata. Requires the blob SHA of the file being updated.

      GitHub API docs: https://developer.github.com/v3/repos/contents/#update-a-file
    code: func (s *RepositoriesService) UpdateFile(ctx context.Context, owner, repo,
      path string, opt *RepositoryContentFileOptions) (*RepositoryContentResponse,
      *Response, error)
    source:
      file: /src/github/repos_contents.go
      line: 192
  - name: UpdateInvitation
    summary: UpdateInvitation updates the permissions associated with a repository
      invitation.
    description: |
      UpdateInvitation updates the permissions associated with a repository invitation.

      permissions represents the permissions that the associated user will have on the repository. Possible values are: "read", "write", "admin".

      GitHub API docs: https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation
    code: func (s *RepositoriesService) UpdateInvitation(ctx context.Context, owner,
      repo string, invitationID int, permissions string) (*RepositoryInvitation, *Response,
      error)
    source:
      file: /src/github/repos_invitations.go
      line: 78
  - name: UpdatePullRequestReviewEnforcement
    summary: UpdatePullRequestReviewEnforcement patches pull request review enforcement
      of a protected branch.
    description: |
      UpdatePullRequestReviewEnforcement patches pull request review enforcement of a protected branch. It requires admin access and branch protection to be enabled.

      GitHub API docs: https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch
    code: func (s *RepositoriesService) UpdatePullRequestReviewEnforcement(ctx context.Context,
      owner, repo, branch string, patch *PullRequestReviewsEnforcementUpdate) (*PullRequestReviewsEnforcement,
      *Response, error)
    source:
      file: /src/github/repos.go
      line: 864
  - name: UploadReleaseAsset
    summary: UploadReleaseAsset creates an asset by uploading a file into a release
      repository.
    description: |
      UploadReleaseAsset creates an asset by uploading a file into a release repository. To upload assets that cannot be represented by an os.File, call NewUploadRequest directly.

      GitHub API docs: https://developer.github.com/v3/repos/releases/#upload-a-release-asset
    code: func (s *RepositoriesService) UploadReleaseAsset(ctx context.Context, owner,
      repo string, id int, opt *UploadOptions, file *os.File) (*ReleaseAsset, *Response,
      error)
    source:
      file: /src/github/repos_releases.go
      line: 300
  source:
    file: /src/github/repos.go
    line: 19
- name: Repository
  summary: Repository represents a GitHub repository.
  description: |
    Repository represents a GitHub repository.
  code: "type Repository struct {\n\tID\t\t\t*int\t\t\t`json:\"id,omitempty\"`\n\tOwner\t\t\t*User\t\t\t`json:\"owner,omitempty\"`\n\tName\t\t\t*string\t\t\t`json:\"name,omitempty\"`\n\tFullName\t\t*string\t\t\t`json:\"full_name,omitempty\"`\n\tDescription\t\t*string\t\t\t`json:\"description,omitempty\"`\n\tHomepage\t\t*string\t\t\t`json:\"homepage,omitempty\"`\n\tCodeOfConduct\t\t*CodeOfConduct\t\t`json:\"code_of_conduct,omitempty\"`\n\tDefaultBranch\t\t*string\t\t\t`json:\"default_branch,omitempty\"`\n\tMasterBranch\t\t*string\t\t\t`json:\"master_branch,omitempty\"`\n\tCreatedAt\t\t*Timestamp\t\t`json:\"created_at,omitempty\"`\n\tPushedAt\t\t*Timestamp\t\t`json:\"pushed_at,omitempty\"`\n\tUpdatedAt\t\t*Timestamp\t\t`json:\"updated_at,omitempty\"`\n\tHTMLURL\t\t\t*string\t\t\t`json:\"html_url,omitempty\"`\n\tCloneURL\t\t*string\t\t\t`json:\"clone_url,omitempty\"`\n\tGitURL\t\t\t*string\t\t\t`json:\"git_url,omitempty\"`\n\tMirrorURL\t\t*string\t\t\t`json:\"mirror_url,omitempty\"`\n\tSSHURL\t\t\t*string\t\t\t`json:\"ssh_url,omitempty\"`\n\tSVNURL\t\t\t*string\t\t\t`json:\"svn_url,omitempty\"`\n\tLanguage\t\t*string\t\t\t`json:\"language,omitempty\"`\n\tFork\t\t\t*bool\t\t\t`json:\"fork,omitempty\"`\n\tForksCount\t\t*int\t\t\t`json:\"forks_count,omitempty\"`\n\tNetworkCount\t\t*int\t\t\t`json:\"network_count,omitempty\"`\n\tOpenIssuesCount\t\t*int\t\t\t`json:\"open_issues_count,omitempty\"`\n\tStargazersCount\t\t*int\t\t\t`json:\"stargazers_count,omitempty\"`\n\tSubscribersCount\t*int\t\t\t`json:\"subscribers_count,omitempty\"`\n\tWatchersCount\t\t*int\t\t\t`json:\"watchers_count,omitempty\"`\n\tSize\t\t\t*int\t\t\t`json:\"size,omitempty\"`\n\tAutoInit\t\t*bool\t\t\t`json:\"auto_init,omitempty\"`\n\tParent\t\t\t*Repository\t\t`json:\"parent,omitempty\"`\n\tSource\t\t\t*Repository\t\t`json:\"source,omitempty\"`\n\tOrganization\t\t*Organization\t\t`json:\"organization,omitempty\"`\n\tPermissions\t\t*map[string]bool\t`json:\"permissions,omitempty\"`\n\tAllowRebaseMerge\t*bool\t\t\t`json:\"allow_rebase_merge,omitempty\"`\n\tAllowSquashMerge\t*bool\t\t\t`json:\"allow_squash_merge,omitempty\"`\n\tAllowMergeCommit\t*bool\t\t\t`json:\"allow_merge_commit,omitempty\"`\n\tTopics\t\t\t[]string\t\t`json:\"topics,omitempty\"`\n\n\t//
    Only provided when using RepositoriesService.Get while in preview\n\tLicense\t*License\t`json:\"license,omitempty\"`\n\n\t//
    Additional mutable fields when creating and editing a repository\n\tPrivate\t\t\t*bool\t`json:\"private,omitempty\"`\n\tHasIssues\t\t*bool\t`json:\"has_issues,omitempty\"`\n\tHasWiki\t\t\t*bool\t`json:\"has_wiki,omitempty\"`\n\tHasPages\t\t*bool\t`json:\"has_pages,omitempty\"`\n\tHasProjects\t\t*bool\t`json:\"has_projects,omitempty\"`\n\tHasDownloads\t\t*bool\t`json:\"has_downloads,omitempty\"`\n\tLicenseTemplate\t\t*string\t`json:\"license_template,omitempty\"`\n\tGitignoreTemplate\t*string\t`json:\"gitignore_template,omitempty\"`\n\tArchived\t\t*bool\t`json:\"archived,omitempty\"`\n\n\t//
    Creating an organization repository. Required for non-owners.\n\tTeamID\t*int\t`json:\"team_id,omitempty\"`\n\n\t//
    API URLs\n\tURL\t\t\t*string\t`json:\"url,omitempty\"`\n\tArchiveURL\t\t*string\t`json:\"archive_url,omitempty\"`\n\tAssigneesURL\t\t*string\t`json:\"assignees_url,omitempty\"`\n\tBlobsURL\t\t*string\t`json:\"blobs_url,omitempty\"`\n\tBranchesURL\t\t*string\t`json:\"branches_url,omitempty\"`\n\tCollaboratorsURL\t*string\t`json:\"collaborators_url,omitempty\"`\n\tCommentsURL\t\t*string\t`json:\"comments_url,omitempty\"`\n\tCommitsURL\t\t*string\t`json:\"commits_url,omitempty\"`\n\tCompareURL\t\t*string\t`json:\"compare_url,omitempty\"`\n\tContentsURL\t\t*string\t`json:\"contents_url,omitempty\"`\n\tContributorsURL\t\t*string\t`json:\"contributors_url,omitempty\"`\n\tDeploymentsURL\t\t*string\t`json:\"deployments_url,omitempty\"`\n\tDownloadsURL\t\t*string\t`json:\"downloads_url,omitempty\"`\n\tEventsURL\t\t*string\t`json:\"events_url,omitempty\"`\n\tForksURL\t\t*string\t`json:\"forks_url,omitempty\"`\n\tGitCommitsURL\t\t*string\t`json:\"git_commits_url,omitempty\"`\n\tGitRefsURL\t\t*string\t`json:\"git_refs_url,omitempty\"`\n\tGitTagsURL\t\t*string\t`json:\"git_tags_url,omitempty\"`\n\tHooksURL\t\t*string\t`json:\"hooks_url,omitempty\"`\n\tIssueCommentURL\t\t*string\t`json:\"issue_comment_url,omitempty\"`\n\tIssueEventsURL\t\t*string\t`json:\"issue_events_url,omitempty\"`\n\tIssuesURL\t\t*string\t`json:\"issues_url,omitempty\"`\n\tKeysURL\t\t\t*string\t`json:\"keys_url,omitempty\"`\n\tLabelsURL\t\t*string\t`json:\"labels_url,omitempty\"`\n\tLanguagesURL\t\t*string\t`json:\"languages_url,omitempty\"`\n\tMergesURL\t\t*string\t`json:\"merges_url,omitempty\"`\n\tMilestonesURL\t\t*string\t`json:\"milestones_url,omitempty\"`\n\tNotificationsURL\t*string\t`json:\"notifications_url,omitempty\"`\n\tPullsURL\t\t*string\t`json:\"pulls_url,omitempty\"`\n\tReleasesURL\t\t*string\t`json:\"releases_url,omitempty\"`\n\tStargazersURL\t\t*string\t`json:\"stargazers_url,omitempty\"`\n\tStatusesURL\t\t*string\t`json:\"statuses_url,omitempty\"`\n\tSubscribersURL\t\t*string\t`json:\"subscribers_url,omitempty\"`\n\tSubscriptionURL\t\t*string\t`json:\"subscription_url,omitempty\"`\n\tTagsURL\t\t\t*string\t`json:\"tags_url,omitempty\"`\n\tTreesURL\t\t*string\t`json:\"trees_url,omitempty\"`\n\tTeamsURL\t\t*string\t`json:\"teams_url,omitempty\"`\n\n\t//
    TextMatches is only populated from search results that request text matches\n\t//
    See: search.go and https://developer.github.com/v3/search/#text-match-metadata\n\tTextMatches\t[]TextMatch\t`json:\"text_matches,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAllowMergeCommit
    summary: GetAllowMergeCommit returns the AllowMergeCommit field if it's non-nil,
      zero value otherwise.
    description: |
      GetAllowMergeCommit returns the AllowMergeCommit field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetAllowMergeCommit() bool
    source:
      file: /src/github/github-accessors.go
      line: 7144
  - name: GetAllowRebaseMerge
    summary: GetAllowRebaseMerge returns the AllowRebaseMerge field if it's non-nil,
      zero value otherwise.
    description: |
      GetAllowRebaseMerge returns the AllowRebaseMerge field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetAllowRebaseMerge() bool
    source:
      file: /src/github/github-accessors.go
      line: 7152
  - name: GetAllowSquashMerge
    summary: GetAllowSquashMerge returns the AllowSquashMerge field if it's non-nil,
      zero value otherwise.
    description: |
      GetAllowSquashMerge returns the AllowSquashMerge field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetAllowSquashMerge() bool
    source:
      file: /src/github/github-accessors.go
      line: 7160
  - name: GetArchiveURL
    summary: GetArchiveURL returns the ArchiveURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetArchiveURL returns the ArchiveURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetArchiveURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7176
  - name: GetArchived
    summary: GetArchived returns the Archived field if it's non-nil, zero value otherwise.
    description: |
      GetArchived returns the Archived field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetArchived() bool
    source:
      file: /src/github/github-accessors.go
      line: 7168
  - name: GetAssigneesURL
    summary: GetAssigneesURL returns the AssigneesURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetAssigneesURL returns the AssigneesURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetAssigneesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7184
  - name: GetAutoInit
    summary: GetAutoInit returns the AutoInit field if it's non-nil, zero value otherwise.
    description: |
      GetAutoInit returns the AutoInit field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetAutoInit() bool
    source:
      file: /src/github/github-accessors.go
      line: 7192
  - name: GetBlobsURL
    summary: GetBlobsURL returns the BlobsURL field if it's non-nil, zero value otherwise.
    description: |
      GetBlobsURL returns the BlobsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetBlobsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7200
  - name: GetBranchesURL
    summary: GetBranchesURL returns the BranchesURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetBranchesURL returns the BranchesURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetBranchesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7208
  - name: GetCloneURL
    summary: GetCloneURL returns the CloneURL field if it's non-nil, zero value otherwise.
    description: |
      GetCloneURL returns the CloneURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetCloneURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7216
  - name: GetCodeOfConduct
    summary: GetCodeOfConduct returns the CodeOfConduct field.
    description: |
      GetCodeOfConduct returns the CodeOfConduct field.
    code: func (r *Repository) GetCodeOfConduct() *CodeOfConduct
    source:
      file: /src/github/github-accessors.go
      line: 7224
  - name: GetCollaboratorsURL
    summary: GetCollaboratorsURL returns the CollaboratorsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetCollaboratorsURL returns the CollaboratorsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetCollaboratorsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7232
  - name: GetCommentsURL
    summary: GetCommentsURL returns the CommentsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetCommentsURL returns the CommentsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetCommentsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7240
  - name: GetCommitsURL
    summary: GetCommitsURL returns the CommitsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetCommitsURL returns the CommitsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetCommitsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7248
  - name: GetCompareURL
    summary: GetCompareURL returns the CompareURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetCompareURL returns the CompareURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetCompareURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7256
  - name: GetContentsURL
    summary: GetContentsURL returns the ContentsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetContentsURL returns the ContentsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetContentsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7264
  - name: GetContributorsURL
    summary: GetContributorsURL returns the ContributorsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetContributorsURL returns the ContributorsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetContributorsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7272
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 7280
  - name: GetDefaultBranch
    summary: GetDefaultBranch returns the DefaultBranch field if it's non-nil, zero
      value otherwise.
    description: |
      GetDefaultBranch returns the DefaultBranch field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetDefaultBranch() string
    source:
      file: /src/github/github-accessors.go
      line: 7288
  - name: GetDeploymentsURL
    summary: GetDeploymentsURL returns the DeploymentsURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetDeploymentsURL returns the DeploymentsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetDeploymentsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7296
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 7304
  - name: GetDownloadsURL
    summary: GetDownloadsURL returns the DownloadsURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetDownloadsURL returns the DownloadsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetDownloadsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7312
  - name: GetEventsURL
    summary: GetEventsURL returns the EventsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetEventsURL returns the EventsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7320
  - name: GetFork
    summary: GetFork returns the Fork field if it's non-nil, zero value otherwise.
    description: |
      GetFork returns the Fork field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetFork() bool
    source:
      file: /src/github/github-accessors.go
      line: 7328
  - name: GetForksCount
    summary: GetForksCount returns the ForksCount field if it's non-nil, zero value
      otherwise.
    description: |
      GetForksCount returns the ForksCount field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetForksCount() int
    source:
      file: /src/github/github-accessors.go
      line: 7336
  - name: GetForksURL
    summary: GetForksURL returns the ForksURL field if it's non-nil, zero value otherwise.
    description: |
      GetForksURL returns the ForksURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetForksURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7344
  - name: GetFullName
    summary: GetFullName returns the FullName field if it's non-nil, zero value otherwise.
    description: |
      GetFullName returns the FullName field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetFullName() string
    source:
      file: /src/github/github-accessors.go
      line: 7352
  - name: GetGitCommitsURL
    summary: GetGitCommitsURL returns the GitCommitsURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetGitCommitsURL returns the GitCommitsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetGitCommitsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7360
  - name: GetGitRefsURL
    summary: GetGitRefsURL returns the GitRefsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetGitRefsURL returns the GitRefsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetGitRefsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7376
  - name: GetGitTagsURL
    summary: GetGitTagsURL returns the GitTagsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetGitTagsURL returns the GitTagsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetGitTagsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7384
  - name: GetGitURL
    summary: GetGitURL returns the GitURL field if it's non-nil, zero value otherwise.
    description: |
      GetGitURL returns the GitURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetGitURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7392
  - name: GetGitignoreTemplate
    summary: GetGitignoreTemplate returns the GitignoreTemplate field if it's non-nil,
      zero value otherwise.
    description: |
      GetGitignoreTemplate returns the GitignoreTemplate field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetGitignoreTemplate() string
    source:
      file: /src/github/github-accessors.go
      line: 7368
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7456
  - name: GetHasDownloads
    summary: GetHasDownloads returns the HasDownloads field if it's non-nil, zero
      value otherwise.
    description: |
      GetHasDownloads returns the HasDownloads field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetHasDownloads() bool
    source:
      file: /src/github/github-accessors.go
      line: 7400
  - name: GetHasIssues
    summary: GetHasIssues returns the HasIssues field if it's non-nil, zero value
      otherwise.
    description: |
      GetHasIssues returns the HasIssues field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetHasIssues() bool
    source:
      file: /src/github/github-accessors.go
      line: 7408
  - name: GetHasPages
    summary: GetHasPages returns the HasPages field if it's non-nil, zero value otherwise.
    description: |
      GetHasPages returns the HasPages field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetHasPages() bool
    source:
      file: /src/github/github-accessors.go
      line: 7416
  - name: GetHasProjects
    summary: GetHasProjects returns the HasProjects field if it's non-nil, zero value
      otherwise.
    description: |
      GetHasProjects returns the HasProjects field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetHasProjects() bool
    source:
      file: /src/github/github-accessors.go
      line: 7424
  - name: GetHasWiki
    summary: GetHasWiki returns the HasWiki field if it's non-nil, zero value otherwise.
    description: |
      GetHasWiki returns the HasWiki field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetHasWiki() bool
    source:
      file: /src/github/github-accessors.go
      line: 7432
  - name: GetHomepage
    summary: GetHomepage returns the Homepage field if it's non-nil, zero value otherwise.
    description: |
      GetHomepage returns the Homepage field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetHomepage() string
    source:
      file: /src/github/github-accessors.go
      line: 7440
  - name: GetHooksURL
    summary: GetHooksURL returns the HooksURL field if it's non-nil, zero value otherwise.
    description: |
      GetHooksURL returns the HooksURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetHooksURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7448
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 7464
  - name: GetIssueCommentURL
    summary: GetIssueCommentURL returns the IssueCommentURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetIssueCommentURL returns the IssueCommentURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetIssueCommentURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7472
  - name: GetIssueEventsURL
    summary: GetIssueEventsURL returns the IssueEventsURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetIssueEventsURL returns the IssueEventsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetIssueEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7480
  - name: GetIssuesURL
    summary: GetIssuesURL returns the IssuesURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetIssuesURL returns the IssuesURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetIssuesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7488
  - name: GetKeysURL
    summary: GetKeysURL returns the KeysURL field if it's non-nil, zero value otherwise.
    description: |
      GetKeysURL returns the KeysURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetKeysURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7496
  - name: GetLabelsURL
    summary: GetLabelsURL returns the LabelsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetLabelsURL returns the LabelsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetLabelsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7504
  - name: GetLanguage
    summary: GetLanguage returns the Language field if it's non-nil, zero value otherwise.
    description: |
      GetLanguage returns the Language field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetLanguage() string
    source:
      file: /src/github/github-accessors.go
      line: 7512
  - name: GetLanguagesURL
    summary: GetLanguagesURL returns the LanguagesURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetLanguagesURL returns the LanguagesURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetLanguagesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7520
  - name: GetLicense
    summary: GetLicense returns the License field.
    description: |
      GetLicense returns the License field.
    code: func (r *Repository) GetLicense() *License
    source:
      file: /src/github/github-accessors.go
      line: 7528
  - name: GetLicenseTemplate
    summary: GetLicenseTemplate returns the LicenseTemplate field if it's non-nil,
      zero value otherwise.
    description: |
      GetLicenseTemplate returns the LicenseTemplate field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetLicenseTemplate() string
    source:
      file: /src/github/github-accessors.go
      line: 7536
  - name: GetMasterBranch
    summary: GetMasterBranch returns the MasterBranch field if it's non-nil, zero
      value otherwise.
    description: |
      GetMasterBranch returns the MasterBranch field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetMasterBranch() string
    source:
      file: /src/github/github-accessors.go
      line: 7544
  - name: GetMergesURL
    summary: GetMergesURL returns the MergesURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetMergesURL returns the MergesURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetMergesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7552
  - name: GetMilestonesURL
    summary: GetMilestonesURL returns the MilestonesURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetMilestonesURL returns the MilestonesURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetMilestonesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7560
  - name: GetMirrorURL
    summary: GetMirrorURL returns the MirrorURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetMirrorURL returns the MirrorURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetMirrorURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7568
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 7576
  - name: GetNetworkCount
    summary: GetNetworkCount returns the NetworkCount field if it's non-nil, zero
      value otherwise.
    description: |
      GetNetworkCount returns the NetworkCount field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetNetworkCount() int
    source:
      file: /src/github/github-accessors.go
      line: 7584
  - name: GetNotificationsURL
    summary: GetNotificationsURL returns the NotificationsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetNotificationsURL returns the NotificationsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetNotificationsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7592
  - name: GetOpenIssuesCount
    summary: GetOpenIssuesCount returns the OpenIssuesCount field if it's non-nil,
      zero value otherwise.
    description: |
      GetOpenIssuesCount returns the OpenIssuesCount field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetOpenIssuesCount() int
    source:
      file: /src/github/github-accessors.go
      line: 7600
  - name: GetOrganization
    summary: GetOrganization returns the Organization field.
    description: |
      GetOrganization returns the Organization field.
    code: func (r *Repository) GetOrganization() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 7608
  - name: GetOwner
    summary: GetOwner returns the Owner field.
    description: |
      GetOwner returns the Owner field.
    code: func (r *Repository) GetOwner() *User
    source:
      file: /src/github/github-accessors.go
      line: 7616
  - name: GetParent
    summary: GetParent returns the Parent field.
    description: |
      GetParent returns the Parent field.
    code: func (r *Repository) GetParent() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 7624
  - name: GetPermissions
    summary: GetPermissions returns the Permissions field if it's non-nil, zero value
      otherwise.
    description: |
      GetPermissions returns the Permissions field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetPermissions() map[string]bool
    source:
      file: /src/github/github-accessors.go
      line: 7632
  - name: GetPrivate
    summary: GetPrivate returns the Private field if it's non-nil, zero value otherwise.
    description: |
      GetPrivate returns the Private field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetPrivate() bool
    source:
      file: /src/github/github-accessors.go
      line: 7640
  - name: GetPullsURL
    summary: GetPullsURL returns the PullsURL field if it's non-nil, zero value otherwise.
    description: |
      GetPullsURL returns the PullsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetPullsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7648
  - name: GetPushedAt
    summary: GetPushedAt returns the PushedAt field if it's non-nil, zero value otherwise.
    description: |
      GetPushedAt returns the PushedAt field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetPushedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 7656
  - name: GetReleasesURL
    summary: GetReleasesURL returns the ReleasesURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetReleasesURL returns the ReleasesURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetReleasesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7664
  - name: GetSSHURL
    summary: GetSSHURL returns the SSHURL field if it's non-nil, zero value otherwise.
    description: |
      GetSSHURL returns the SSHURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetSSHURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7688
  - name: GetSVNURL
    summary: GetSVNURL returns the SVNURL field if it's non-nil, zero value otherwise.
    description: |
      GetSVNURL returns the SVNURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetSVNURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7744
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 7672
  - name: GetSource
    summary: GetSource returns the Source field.
    description: |
      GetSource returns the Source field.
    code: func (r *Repository) GetSource() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 7680
  - name: GetStargazersCount
    summary: GetStargazersCount returns the StargazersCount field if it's non-nil,
      zero value otherwise.
    description: |
      GetStargazersCount returns the StargazersCount field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetStargazersCount() int
    source:
      file: /src/github/github-accessors.go
      line: 7696
  - name: GetStargazersURL
    summary: GetStargazersURL returns the StargazersURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetStargazersURL returns the StargazersURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetStargazersURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7704
  - name: GetStatusesURL
    summary: GetStatusesURL returns the StatusesURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetStatusesURL returns the StatusesURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetStatusesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7712
  - name: GetSubscribersCount
    summary: GetSubscribersCount returns the SubscribersCount field if it's non-nil,
      zero value otherwise.
    description: |
      GetSubscribersCount returns the SubscribersCount field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetSubscribersCount() int
    source:
      file: /src/github/github-accessors.go
      line: 7720
  - name: GetSubscribersURL
    summary: GetSubscribersURL returns the SubscribersURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetSubscribersURL returns the SubscribersURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetSubscribersURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7728
  - name: GetSubscriptionURL
    summary: GetSubscriptionURL returns the SubscriptionURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetSubscriptionURL returns the SubscriptionURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetSubscriptionURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7736
  - name: GetTagsURL
    summary: GetTagsURL returns the TagsURL field if it's non-nil, zero value otherwise.
    description: |
      GetTagsURL returns the TagsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetTagsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7752
  - name: GetTeamID
    summary: GetTeamID returns the TeamID field if it's non-nil, zero value otherwise.
    description: |
      GetTeamID returns the TeamID field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetTeamID() int
    source:
      file: /src/github/github-accessors.go
      line: 7760
  - name: GetTeamsURL
    summary: GetTeamsURL returns the TeamsURL field if it's non-nil, zero value otherwise.
    description: |
      GetTeamsURL returns the TeamsURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetTeamsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7768
  - name: GetTreesURL
    summary: GetTreesURL returns the TreesURL field if it's non-nil, zero value otherwise.
    description: |
      GetTreesURL returns the TreesURL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetTreesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7776
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7792
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 7784
  - name: GetWatchersCount
    summary: GetWatchersCount returns the WatchersCount field if it's non-nil, zero
      value otherwise.
    description: |
      GetWatchersCount returns the WatchersCount field if it's non-nil, zero value otherwise.
    code: func (r *Repository) GetWatchersCount() int
    source:
      file: /src/github/github-accessors.go
      line: 7800
  - name: String
    summary: ""
    description: ""
    code: func (r Repository) String() string
    source:
      file: /src/github/repos.go
      line: 121
  source:
    file: /src/github/repos.go
    line: 22
- name: RepositoryAddCollaboratorOptions
  summary: RepositoryAddCollaboratorOptions specifies the optional parameters to the
    RepositoriesService.AddCollaborator method.
  description: |
    RepositoryAddCollaboratorOptions specifies the optional parameters to the RepositoriesService.AddCollaborator method.
  code: "type RepositoryAddCollaboratorOptions struct {\n\t// Permission specifies
    the permission to grant the user on this repository.\n\t// Possible values are:\n\t//
    \    pull - team members can pull, but not push to or administer this repository\n\t//
    \    push - team members can pull and push, but not administer this repository\n\t//
    \    admin - team members can pull, push and administer this repository\n\t//\n\t//
    Default value is \"push\". This option is only valid for organization-owned repositories.\n\tPermission
    string `json:\"permission,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos_collaborators.go
    line: 101
- name: RepositoryComment
  summary: RepositoryComment represents a comment for a commit, file, or line in a
    repository.
  description: |
    RepositoryComment represents a comment for a commit, file, or line in a repository.
  code: "type RepositoryComment struct {\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tCommitID\t*string\t\t`json:\"commit_id,omitempty\"`\n\tUser\t\t*User\t\t`json:\"user,omitempty\"`\n\tReactions\t*Reactions\t`json:\"reactions,omitempty\"`\n\tCreatedAt\t*time.Time\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*time.Time\t`json:\"updated_at,omitempty\"`\n\n\t//
    User-mutable fields\n\tBody\t*string\t`json:\"body\"`\n\t// User-initialized fields\n\tPath\t\t*string\t`json:\"path,omitempty\"`\n\tPosition\t*int\t`json:\"position,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryComment) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 7808
  - name: GetCommitID
    summary: GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    description: |
      GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryComment) GetCommitID() string
    source:
      file: /src/github/github-accessors.go
      line: 7816
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryComment) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 7824
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryComment) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7832
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryComment) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 7840
  - name: GetPath
    summary: GetPath returns the Path field if it's non-nil, zero value otherwise.
    description: |
      GetPath returns the Path field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryComment) GetPath() string
    source:
      file: /src/github/github-accessors.go
      line: 7848
  - name: GetPosition
    summary: GetPosition returns the Position field if it's non-nil, zero value otherwise.
    description: |
      GetPosition returns the Position field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryComment) GetPosition() int
    source:
      file: /src/github/github-accessors.go
      line: 7856
  - name: GetReactions
    summary: GetReactions returns the Reactions field.
    description: |
      GetReactions returns the Reactions field.
    code: func (r *RepositoryComment) GetReactions() *Reactions
    source:
      file: /src/github/github-accessors.go
      line: 7864
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryComment) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7880
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryComment) GetUpdatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 7872
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (r *RepositoryComment) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 7888
  - name: String
    summary: ""
    description: ""
    code: func (r RepositoryComment) String() string
    source:
      file: /src/github/repos_comments.go
      line: 32
  source:
    file: /src/github/repos_comments.go
    line: 15
- name: RepositoryCommit
  summary: RepositoryCommit represents a commit in a repo.
  description: |
    RepositoryCommit represents a commit in a repo. Note that it's wrapping a Commit, so author/committer information is in two places, but contain different details about them: in RepositoryCommit "github details", in Commit - "git details".
  code: "type RepositoryCommit struct {\n\tSHA\t\t*string\t\t`json:\"sha,omitempty\"`\n\tCommit\t\t*Commit\t\t`json:\"commit,omitempty\"`\n\tAuthor\t\t*User\t\t`json:\"author,omitempty\"`\n\tCommitter\t*User\t\t`json:\"committer,omitempty\"`\n\tParents\t\t[]Commit\t`json:\"parents,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tCommentsURL\t*string\t\t`json:\"comments_url,omitempty\"`\n\n\t//
    Details about how many changes were made in this commit. Only filled in during
    GetCommit!\n\tStats\t*CommitStats\t`json:\"stats,omitempty\"`\n\t// Details about
    which files, and how this commit touched. Only filled in during GetCommit!\n\tFiles\t[]CommitFile\t`json:\"files,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAuthor
    summary: GetAuthor returns the Author field.
    description: |
      GetAuthor returns the Author field.
    code: func (r *RepositoryCommit) GetAuthor() *User
    source:
      file: /src/github/github-accessors.go
      line: 7896
  - name: GetCommentsURL
    summary: GetCommentsURL returns the CommentsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetCommentsURL returns the CommentsURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryCommit) GetCommentsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7904
  - name: GetCommit
    summary: GetCommit returns the Commit field.
    description: |
      GetCommit returns the Commit field.
    code: func (r *RepositoryCommit) GetCommit() *Commit
    source:
      file: /src/github/github-accessors.go
      line: 7912
  - name: GetCommitter
    summary: GetCommitter returns the Committer field.
    description: |
      GetCommitter returns the Committer field.
    code: func (r *RepositoryCommit) GetCommitter() *User
    source:
      file: /src/github/github-accessors.go
      line: 7920
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryCommit) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7928
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryCommit) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 7936
  - name: GetStats
    summary: GetStats returns the Stats field.
    description: |
      GetStats returns the Stats field.
    code: func (r *RepositoryCommit) GetStats() *CommitStats
    source:
      file: /src/github/github-accessors.go
      line: 7944
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryCommit) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7952
  - name: String
    summary: ""
    description: ""
    code: func (r RepositoryCommit) String() string
    source:
      file: /src/github/repos_commits.go
      line: 34
  source:
    file: /src/github/repos_commits.go
    line: 18
- name: RepositoryContent
  summary: RepositoryContent represents a file or directory in a github repository.
  description: |
    RepositoryContent represents a file or directory in a github repository.
  code: "type RepositoryContent struct {\n\tType\t\t*string\t`json:\"type,omitempty\"`\n\tEncoding\t*string\t`json:\"encoding,omitempty\"`\n\tSize\t\t*int\t`json:\"size,omitempty\"`\n\tName\t\t*string\t`json:\"name,omitempty\"`\n\tPath\t\t*string\t`json:\"path,omitempty\"`\n\t//
    Content contains the actual file content, which may be encoded.\n\t// Callers
    should call GetContent which will decode the content if\n\t// necessary.\n\tContent\t\t*string\t`json:\"content,omitempty\"`\n\tSHA\t\t*string\t`json:\"sha,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tGitURL\t\t*string\t`json:\"git_url,omitempty\"`\n\tHTMLURL\t\t*string\t`json:\"html_url,omitempty\"`\n\tDownloadURL\t*string\t`json:\"download_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetContent
    summary: GetContent returns the content of r, decoding it if necessary.
    description: |
      GetContent returns the content of r, decoding it if necessary.
    code: func (r *RepositoryContent) GetContent() (string, error)
    source:
      file: /src/github/repos_contents.go
      line: 68
  - name: GetDownloadURL
    summary: GetDownloadURL returns the DownloadURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetDownloadURL returns the DownloadURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetDownloadURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7960
  - name: GetEncoding
    summary: GetEncoding returns the Encoding field if it's non-nil, zero value otherwise.
    description: |
      GetEncoding returns the Encoding field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetEncoding() string
    source:
      file: /src/github/github-accessors.go
      line: 7968
  - name: GetGitURL
    summary: GetGitURL returns the GitURL field if it's non-nil, zero value otherwise.
    description: |
      GetGitURL returns the GitURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetGitURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7976
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 7984
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 7992
  - name: GetPath
    summary: GetPath returns the Path field if it's non-nil, zero value otherwise.
    description: |
      GetPath returns the Path field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetPath() string
    source:
      file: /src/github/github-accessors.go
      line: 8000
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 8008
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 8016
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 8024
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContent) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8032
  - name: String
    summary: String converts RepositoryContent to a string.
    description: |
      String converts RepositoryContent to a string. It's primarily for testing.
    code: func (r RepositoryContent) String() string
    source:
      file: /src/github/repos_contents.go
      line: 63
  source:
    file: /src/github/repos_contents.go
    line: 23
- name: RepositoryContentFileOptions
  summary: RepositoryContentFileOptions specifies optional parameters for CreateFile,
    UpdateFile, and DeleteFile.
  description: |
    RepositoryContentFileOptions specifies optional parameters for CreateFile, UpdateFile, and DeleteFile.
  code: "type RepositoryContentFileOptions struct {\n\tMessage\t\t*string\t\t`json:\"message,omitempty\"`\n\tContent\t\t[]byte\t\t`json:\"content,omitempty\"`\t//
    unencoded\n\tSHA\t\t*string\t\t`json:\"sha,omitempty\"`\n\tBranch\t\t*string\t\t`json:\"branch,omitempty\"`\n\tAuthor\t\t*CommitAuthor\t`json:\"author,omitempty\"`\n\tCommitter\t*CommitAuthor\t`json:\"committer,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAuthor
    summary: GetAuthor returns the Author field.
    description: |
      GetAuthor returns the Author field.
    code: func (r *RepositoryContentFileOptions) GetAuthor() *CommitAuthor
    source:
      file: /src/github/github-accessors.go
      line: 8040
  - name: GetBranch
    summary: GetBranch returns the Branch field if it's non-nil, zero value otherwise.
    description: |
      GetBranch returns the Branch field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContentFileOptions) GetBranch() string
    source:
      file: /src/github/github-accessors.go
      line: 8048
  - name: GetCommitter
    summary: GetCommitter returns the Committer field.
    description: |
      GetCommitter returns the Committer field.
    code: func (r *RepositoryContentFileOptions) GetCommitter() *CommitAuthor
    source:
      file: /src/github/github-accessors.go
      line: 8056
  - name: GetMessage
    summary: GetMessage returns the Message field if it's non-nil, zero value otherwise.
    description: |
      GetMessage returns the Message field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContentFileOptions) GetMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 8064
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryContentFileOptions) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 8072
  source:
    file: /src/github/repos_contents.go
    line: 47
- name: RepositoryContentGetOptions
  summary: RepositoryContentGetOptions represents an optional ref parameter, which
    can be a SHA, branch, or tag
  description: |
    RepositoryContentGetOptions represents an optional ref parameter, which can be a SHA, branch, or tag
  code: "type RepositoryContentGetOptions struct {\n\tRef string `url:\"ref,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos_contents.go
    line: 58
- name: RepositoryContentResponse
  summary: RepositoryContentResponse holds the parsed response from CreateFile, UpdateFile,
    and DeleteFile.
  description: |
    RepositoryContentResponse holds the parsed response from CreateFile, UpdateFile, and DeleteFile.
  code: "type RepositoryContentResponse struct {\n\tContent\t*RepositoryContent\t`json:\"content,omitempty\"`\n\tCommit\t`json:\"commit,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetContent
    summary: GetContent returns the Content field.
    description: |
      GetContent returns the Content field.
    code: func (r *RepositoryContentResponse) GetContent() *RepositoryContent
    source:
      file: /src/github/github-accessors.go
      line: 8080
  source:
    file: /src/github/repos_contents.go
    line: 41
- name: RepositoryCreateForkOptions
  summary: RepositoryCreateForkOptions specifies the optional parameters to the RepositoriesService.CreateFork
    method.
  description: |
    RepositoryCreateForkOptions specifies the optional parameters to the RepositoriesService.CreateFork method.
  code: "type RepositoryCreateForkOptions struct {\n\t// The organization to fork
    the repository into.\n\tOrganization string `url:\"organization,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos_forks.go
    line: 52
- name: RepositoryEvent
  summary: RepositoryEvent is triggered when a repository is created.
  description: |
    RepositoryEvent is triggered when a repository is created. The Webhook event name is "repository".

    Events of this type are not visible in timelines, they are only used to trigger organization webhooks.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#repositoryevent
  code: "type RepositoryEvent struct {\n\t// Action is the action that was performed.
    Possible values are: \"created\", \"deleted\",\n\t// \"publicized\", \"privatized\".\n\tAction\t*string\t\t`json:\"action,omitempty\"`\n\tRepo\t*Repository\t`json:\"repository,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tOrg\t\t*Organization\t`json:\"organization,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 8088
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (r *RepositoryEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 8096
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (r *RepositoryEvent) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 8104
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (r *RepositoryEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 8112
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (r *RepositoryEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 8120
  source:
    file: /src/github/event_types.go
    line: 658
- name: RepositoryInvitation
  summary: RepositoryInvitation represents an invitation to collaborate on a repo.
  description: |
    RepositoryInvitation represents an invitation to collaborate on a repo.
  code: "type RepositoryInvitation struct {\n\tID\t*int\t\t`json:\"id,omitempty\"`\n\tRepo\t*Repository\t`json:\"repository,omitempty\"`\n\tInvitee\t*User\t\t`json:\"invitee,omitempty\"`\n\tInviter\t*User\t\t`json:\"inviter,omitempty\"`\n\n\t//
    Permissions represents the permissions that the associated user will have\n\t//
    on the repository. Possible values are: \"read\", \"write\", \"admin\".\n\tPermissions\t*string\t\t`json:\"permissions,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryInvitation) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 8128
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryInvitation) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8136
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryInvitation) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 8144
  - name: GetInvitee
    summary: GetInvitee returns the Invitee field.
    description: |
      GetInvitee returns the Invitee field.
    code: func (r *RepositoryInvitation) GetInvitee() *User
    source:
      file: /src/github/github-accessors.go
      line: 8152
  - name: GetInviter
    summary: GetInviter returns the Inviter field.
    description: |
      GetInviter returns the Inviter field.
    code: func (r *RepositoryInvitation) GetInviter() *User
    source:
      file: /src/github/github-accessors.go
      line: 8160
  - name: GetPermissions
    summary: GetPermissions returns the Permissions field if it's non-nil, zero value
      otherwise.
    description: |
      GetPermissions returns the Permissions field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryInvitation) GetPermissions() string
    source:
      file: /src/github/github-accessors.go
      line: 8168
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (r *RepositoryInvitation) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 8176
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryInvitation) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8184
  source:
    file: /src/github/repos_invitations.go
    line: 14
- name: RepositoryLicense
  summary: RepositoryLicense represents the license for a repository.
  description: |
    RepositoryLicense represents the license for a repository.
  code: "type RepositoryLicense struct {\n\tName\t*string\t`json:\"name,omitempty\"`\n\tPath\t*string\t`json:\"path,omitempty\"`\n\n\tSHA\t\t*string\t\t`json:\"sha,omitempty\"`\n\tSize\t\t*int\t\t`json:\"size,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tGitURL\t\t*string\t\t`json:\"git_url,omitempty\"`\n\tDownloadURL\t*string\t\t`json:\"download_url,omitempty\"`\n\tType\t\t*string\t\t`json:\"type,omitempty\"`\n\tContent\t\t*string\t\t`json:\"content,omitempty\"`\n\tEncoding\t*string\t\t`json:\"encoding,omitempty\"`\n\tLicense\t\t*License\t`json:\"license,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetContent
    summary: GetContent returns the Content field if it's non-nil, zero value otherwise.
    description: |
      GetContent returns the Content field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetContent() string
    source:
      file: /src/github/github-accessors.go
      line: 8192
  - name: GetDownloadURL
    summary: GetDownloadURL returns the DownloadURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetDownloadURL returns the DownloadURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetDownloadURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8200
  - name: GetEncoding
    summary: GetEncoding returns the Encoding field if it's non-nil, zero value otherwise.
    description: |
      GetEncoding returns the Encoding field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetEncoding() string
    source:
      file: /src/github/github-accessors.go
      line: 8208
  - name: GetGitURL
    summary: GetGitURL returns the GitURL field if it's non-nil, zero value otherwise.
    description: |
      GetGitURL returns the GitURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetGitURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8216
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8224
  - name: GetLicense
    summary: GetLicense returns the License field.
    description: |
      GetLicense returns the License field.
    code: func (r *RepositoryLicense) GetLicense() *License
    source:
      file: /src/github/github-accessors.go
      line: 8232
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 8240
  - name: GetPath
    summary: GetPath returns the Path field if it's non-nil, zero value otherwise.
    description: |
      GetPath returns the Path field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetPath() string
    source:
      file: /src/github/github-accessors.go
      line: 8248
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 8256
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 8264
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 8272
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryLicense) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8280
  - name: String
    summary: ""
    description: ""
    code: func (l RepositoryLicense) String() string
    source:
      file: /src/github/licenses.go
      line: 36
  source:
    file: /src/github/licenses.go
    line: 20
- name: RepositoryListAllOptions
  summary: RepositoryListAllOptions specifies the optional parameters to the RepositoriesService.ListAll
    method.
  description: |
    RepositoryListAllOptions specifies the optional parameters to the RepositoriesService.ListAll method.
  code: "type RepositoryListAllOptions struct {\n\t// ID of the last repository seen\n\tSince
    int `url:\"since,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 234
- name: RepositoryListByOrgOptions
  summary: RepositoryListByOrgOptions specifies the optional parameters to the RepositoriesService.ListByOrg
    method.
  description: |
    RepositoryListByOrgOptions specifies the optional parameters to the RepositoriesService.ListByOrg method.
  code: "type RepositoryListByOrgOptions struct {\n\t// Type of repositories to list.
    Possible values are: all, public, private,\n\t// forks, sources, member. Default
    is \"all\".\n\tType\tstring\t`url:\"type,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 196
- name: RepositoryListForksOptions
  summary: RepositoryListForksOptions specifies the optional parameters to the RepositoriesService.ListForks
    method.
  description: |
    RepositoryListForksOptions specifies the optional parameters to the RepositoriesService.ListForks method.
  code: "type RepositoryListForksOptions struct {\n\t// How to sort the forks list.
    Possible values are: newest, oldest,\n\t// watchers. Default is \"newest\".\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos_forks.go
    line: 15
- name: RepositoryListOptions
  summary: RepositoryListOptions specifies the optional parameters to the RepositoriesService.List
    method.
  description: |
    RepositoryListOptions specifies the optional parameters to the RepositoriesService.List method.
  code: "type RepositoryListOptions struct {\n\t// Visibility of repositories to list.
    Can be one of all, public, or private.\n\t// Default: all\n\tVisibility\tstring\t`url:\"visibility,omitempty\"`\n\n\t//
    List repos of given affiliation[s].\n\t// Comma-separated list of values. Can
    include:\n\t// * owner: Repositories that are owned by the authenticated user.\n\t//
    * collaborator: Repositories that the user has been added to as a\n\t//   collaborator.\n\t//
    * organization_member: Repositories that the user has access to through\n\t//
    \  being a member of an organization. This includes every repository on\n\t//
    \  every team that the user is on.\n\t// Default: owner,collaborator,organization_member\n\tAffiliation\tstring\t`url:\"affiliation,omitempty\"`\n\n\t//
    Type of repositories to list.\n\t// Can be one of all, owner, public, private,
    member. Default: all\n\t// Will cause a 422 error if used in the same request
    as visibility or\n\t// affiliation.\n\tType\tstring\t`url:\"type,omitempty\"`\n\n\t//
    How to sort the repository list. Can be one of created, updated, pushed,\n\t//
    full_name. Default: full_name\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\t//
    Direction in which to sort repositories. Can be one of asc or desc.\n\t// Default:
    when using full_name: asc; otherwise desc\n\tDirection\tstring\t`url:\"direction,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 127
- name: RepositoryMergeRequest
  summary: RepositoryMergeRequest represents a request to merge a branch in a repository.
  description: |
    RepositoryMergeRequest represents a request to merge a branch in a repository.
  code: "type RepositoryMergeRequest struct {\n\tBase\t\t*string\t`json:\"base,omitempty\"`\n\tHead\t\t*string\t`json:\"head,omitempty\"`\n\tCommitMessage\t*string\t`json:\"commit_message,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetBase
    summary: GetBase returns the Base field if it's non-nil, zero value otherwise.
    description: |
      GetBase returns the Base field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryMergeRequest) GetBase() string
    source:
      file: /src/github/github-accessors.go
      line: 8288
  - name: GetCommitMessage
    summary: GetCommitMessage returns the CommitMessage field if it's non-nil, zero
      value otherwise.
    description: |
      GetCommitMessage returns the CommitMessage field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryMergeRequest) GetCommitMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 8296
  - name: GetHead
    summary: GetHead returns the Head field if it's non-nil, zero value otherwise.
    description: |
      GetHead returns the Head field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryMergeRequest) GetHead() string
    source:
      file: /src/github/github-accessors.go
      line: 8304
  source:
    file: /src/github/repos_merging.go
    line: 15
- name: RepositoryParticipation
  summary: RepositoryParticipation is the number of commits by everyone who has contributed
    to the repository (including the owner) as well as the number of commits by the
    owner themself.
  description: |
    RepositoryParticipation is the number of commits by everyone who has contributed to the repository (including the owner) as well as the number of commits by the owner themself.
  code: "type RepositoryParticipation struct {\n\tAll\t[]int\t`json:\"all,omitempty\"`\n\tOwner\t[]int\t`json:\"owner,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: String
    summary: ""
    description: ""
    code: func (r RepositoryParticipation) String() string
    source:
      file: /src/github/repos_stats.go
      line: 150
  source:
    file: /src/github/repos_stats.go
    line: 145
- name: RepositoryPermissionLevel
  summary: RepositoryPermissionLevel represents the permission level an organization
    member has for a given repository.
  description: |
    RepositoryPermissionLevel represents the permission level an organization member has for a given repository.
  code: "type RepositoryPermissionLevel struct {\n\t// Possible values: \"admin\",
    \"write\", \"read\", \"none\"\n\tPermission\t*string\t`json:\"permission,omitempty\"`\n\n\tUser\t*User\t`json:\"user,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetPermission
    summary: GetPermission returns the Permission field if it's non-nil, zero value
      otherwise.
    description: |
      GetPermission returns the Permission field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryPermissionLevel) GetPermission() string
    source:
      file: /src/github/github-accessors.go
      line: 8312
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (r *RepositoryPermissionLevel) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 8320
  source:
    file: /src/github/repos_collaborators.go
    line: 75
- name: RepositoryRelease
  summary: RepositoryRelease represents a GitHub release in a repository.
  description: |
    RepositoryRelease represents a GitHub release in a repository.
  code: "type RepositoryRelease struct {\n\tID\t\t*int\t\t`json:\"id,omitempty\"`\n\tTagName\t\t*string\t\t`json:\"tag_name,omitempty\"`\n\tTargetCommitish\t*string\t\t`json:\"target_commitish,omitempty\"`\n\tName\t\t*string\t\t`json:\"name,omitempty\"`\n\tBody\t\t*string\t\t`json:\"body,omitempty\"`\n\tDraft\t\t*bool\t\t`json:\"draft,omitempty\"`\n\tPrerelease\t*bool\t\t`json:\"prerelease,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tPublishedAt\t*Timestamp\t`json:\"published_at,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\tHTMLURL\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tAssetsURL\t*string\t\t`json:\"assets_url,omitempty\"`\n\tAssets\t\t[]ReleaseAsset\t`json:\"assets,omitempty\"`\n\tUploadURL\t*string\t\t`json:\"upload_url,omitempty\"`\n\tZipballURL\t*string\t\t`json:\"zipball_url,omitempty\"`\n\tTarballURL\t*string\t\t`json:\"tarball_url,omitempty\"`\n\tAuthor\t\t*User\t\t`json:\"author,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAssetsURL
    summary: GetAssetsURL returns the AssetsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetAssetsURL returns the AssetsURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetAssetsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8328
  - name: GetAuthor
    summary: GetAuthor returns the Author field.
    description: |
      GetAuthor returns the Author field.
    code: func (r *RepositoryRelease) GetAuthor() *User
    source:
      file: /src/github/github-accessors.go
      line: 8336
  - name: GetBody
    summary: GetBody returns the Body field if it's non-nil, zero value otherwise.
    description: |
      GetBody returns the Body field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetBody() string
    source:
      file: /src/github/github-accessors.go
      line: 8344
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 8352
  - name: GetDraft
    summary: GetDraft returns the Draft field if it's non-nil, zero value otherwise.
    description: |
      GetDraft returns the Draft field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetDraft() bool
    source:
      file: /src/github/github-accessors.go
      line: 8360
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8368
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 8376
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 8384
  - name: GetPrerelease
    summary: GetPrerelease returns the Prerelease field if it's non-nil, zero value
      otherwise.
    description: |
      GetPrerelease returns the Prerelease field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetPrerelease() bool
    source:
      file: /src/github/github-accessors.go
      line: 8392
  - name: GetPublishedAt
    summary: GetPublishedAt returns the PublishedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetPublishedAt returns the PublishedAt field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetPublishedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 8400
  - name: GetTagName
    summary: GetTagName returns the TagName field if it's non-nil, zero value otherwise.
    description: |
      GetTagName returns the TagName field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetTagName() string
    source:
      file: /src/github/github-accessors.go
      line: 8408
  - name: GetTarballURL
    summary: GetTarballURL returns the TarballURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetTarballURL returns the TarballURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetTarballURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8416
  - name: GetTargetCommitish
    summary: GetTargetCommitish returns the TargetCommitish field if it's non-nil,
      zero value otherwise.
    description: |
      GetTargetCommitish returns the TargetCommitish field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetTargetCommitish() string
    source:
      file: /src/github/github-accessors.go
      line: 8424
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8440
  - name: GetUploadURL
    summary: GetUploadURL returns the UploadURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetUploadURL returns the UploadURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetUploadURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8432
  - name: GetZipballURL
    summary: GetZipballURL returns the ZipballURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetZipballURL returns the ZipballURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryRelease) GetZipballURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8448
  - name: String
    summary: ""
    description: ""
    code: func (r RepositoryRelease) String() string
    source:
      file: /src/github/repos_releases.go
      line: 41
  source:
    file: /src/github/repos_releases.go
    line: 21
- name: RepositoryTag
  summary: RepositoryTag represents a repository tag.
  description: |
    RepositoryTag represents a repository tag.
  code: "type RepositoryTag struct {\n\tName\t\t*string\t`json:\"name,omitempty\"`\n\tCommit\t\t*Commit\t`json:\"commit,omitempty\"`\n\tZipballURL\t*string\t`json:\"zipball_url,omitempty\"`\n\tTarballURL\t*string\t`json:\"tarball_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCommit
    summary: GetCommit returns the Commit field.
    description: |
      GetCommit returns the Commit field.
    code: func (r *RepositoryTag) GetCommit() *Commit
    source:
      file: /src/github/github-accessors.go
      line: 8456
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryTag) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 8464
  - name: GetTarballURL
    summary: GetTarballURL returns the TarballURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetTarballURL returns the TarballURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryTag) GetTarballURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8472
  - name: GetZipballURL
    summary: GetZipballURL returns the ZipballURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetZipballURL returns the ZipballURL field if it's non-nil, zero value otherwise.
    code: func (r *RepositoryTag) GetZipballURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8480
  source:
    file: /src/github/repos.go
    line: 498
- name: RequiredStatusChecks
  summary: RequiredStatusChecks represents the protection status of a individual branch.
  description: |
    RequiredStatusChecks represents the protection status of a individual branch.
  code: "type RequiredStatusChecks struct {\n\t// Require branches to be up to date
    before merging. (Required.)\n\tStrict\tbool\t`json:\"strict\"`\n\t// The list
    of status checks to require in order to merge into this\n\t// branch. (Required;
    use []string{} instead of nil for empty list.)\n\tContexts\t[]string\t`json:\"contexts\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 553
- name: Response
  summary: Response is a GitHub API response.
  description: |
    Response is a GitHub API response. This wraps the standard http.Response returned from GitHub and provides convenient access to things like pagination links.
  code: "type Response struct {\n\t*http.Response\n\n\tNextPage\tint\n\tPrevPage\tint\n\tFirstPage\tint\n\tLastPage\tint\n\n\tRate\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/github.go
    line: 350
- name: Reviewers
  summary: Reviewers represents reviewers of a pull request.
  description: |
    Reviewers represents reviewers of a pull request.
  code: "type Reviewers struct {\n\tUsers\t[]*User\t`json:\"users,omitempty\"`\n\tTeams\t[]*Team\t`json:\"teams,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/pulls_reviewers.go
    line: 20
- name: ReviewersRequest
  summary: ReviewersRequest specifies users and teams for a pull request review request.
  description: |
    ReviewersRequest specifies users and teams for a pull request review request.
  code: "type ReviewersRequest struct {\n\tReviewers\t[]string\t`json:\"reviewers,omitempty\"`\n\tTeamReviewers\t[]string\t`json:\"team_reviewers,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/pulls_reviewers.go
    line: 14
- name: Scope
  summary: Scope models a GitHub authorization scope.
  description: |
    Scope models a GitHub authorization scope.

    GitHub API docs: https://developer.github.com/v3/oauth/#scopes
  code: type Scope string
  consts:
  - names: ScopeNone
    summary: ""
    description: ""
    code: "ScopeNone Scope = \"(no scope)\"\t// REVISIT: is this actually returned,
      or just a documentation artifact?\n"
    source:
      file: /src/github/authorizations.go
      line: 20
  - names: ScopeUser
    summary: ""
    description: ""
    code: ScopeUser Scope = "user"
    source:
      file: /src/github/authorizations.go
      line: 21
  - names: ScopeUserEmail
    summary: ""
    description: ""
    code: ScopeUserEmail Scope = "user:email"
    source:
      file: /src/github/authorizations.go
      line: 22
  - names: ScopeUserFollow
    summary: ""
    description: ""
    code: ScopeUserFollow Scope = "user:follow"
    source:
      file: /src/github/authorizations.go
      line: 23
  - names: ScopePublicRepo
    summary: ""
    description: ""
    code: ScopePublicRepo Scope = "public_repo"
    source:
      file: /src/github/authorizations.go
      line: 24
  - names: ScopeRepo
    summary: ""
    description: ""
    code: ScopeRepo Scope = "repo"
    source:
      file: /src/github/authorizations.go
      line: 25
  - names: ScopeRepoDeployment
    summary: ""
    description: ""
    code: ScopeRepoDeployment Scope = "repo_deployment"
    source:
      file: /src/github/authorizations.go
      line: 26
  - names: ScopeRepoStatus
    summary: ""
    description: ""
    code: ScopeRepoStatus Scope = "repo:status"
    source:
      file: /src/github/authorizations.go
      line: 27
  - names: ScopeDeleteRepo
    summary: ""
    description: ""
    code: ScopeDeleteRepo Scope = "delete_repo"
    source:
      file: /src/github/authorizations.go
      line: 28
  - names: ScopeNotifications
    summary: ""
    description: ""
    code: ScopeNotifications Scope = "notifications"
    source:
      file: /src/github/authorizations.go
      line: 29
  - names: ScopeGist
    summary: ""
    description: ""
    code: ScopeGist Scope = "gist"
    source:
      file: /src/github/authorizations.go
      line: 30
  - names: ScopeReadRepoHook
    summary: ""
    description: ""
    code: ScopeReadRepoHook Scope = "read:repo_hook"
    source:
      file: /src/github/authorizations.go
      line: 31
  - names: ScopeWriteRepoHook
    summary: ""
    description: ""
    code: ScopeWriteRepoHook Scope = "write:repo_hook"
    source:
      file: /src/github/authorizations.go
      line: 32
  - names: ScopeAdminRepoHook
    summary: ""
    description: ""
    code: ScopeAdminRepoHook Scope = "admin:repo_hook"
    source:
      file: /src/github/authorizations.go
      line: 33
  - names: ScopeAdminOrgHook
    summary: ""
    description: ""
    code: ScopeAdminOrgHook Scope = "admin:org_hook"
    source:
      file: /src/github/authorizations.go
      line: 34
  - names: ScopeReadOrg
    summary: ""
    description: ""
    code: ScopeReadOrg Scope = "read:org"
    source:
      file: /src/github/authorizations.go
      line: 35
  - names: ScopeWriteOrg
    summary: ""
    description: ""
    code: ScopeWriteOrg Scope = "write:org"
    source:
      file: /src/github/authorizations.go
      line: 36
  - names: ScopeAdminOrg
    summary: ""
    description: ""
    code: ScopeAdminOrg Scope = "admin:org"
    source:
      file: /src/github/authorizations.go
      line: 37
  - names: ScopeReadPublicKey
    summary: ""
    description: ""
    code: ScopeReadPublicKey Scope = "read:public_key"
    source:
      file: /src/github/authorizations.go
      line: 38
  - names: ScopeWritePublicKey
    summary: ""
    description: ""
    code: ScopeWritePublicKey Scope = "write:public_key"
    source:
      file: /src/github/authorizations.go
      line: 39
  - names: ScopeAdminPublicKey
    summary: ""
    description: ""
    code: ScopeAdminPublicKey Scope = "admin:public_key"
    source:
      file: /src/github/authorizations.go
      line: 40
  - names: ScopeReadGPGKey
    summary: ""
    description: ""
    code: ScopeReadGPGKey Scope = "read:gpg_key"
    source:
      file: /src/github/authorizations.go
      line: 41
  - names: ScopeWriteGPGKey
    summary: ""
    description: ""
    code: ScopeWriteGPGKey Scope = "write:gpg_key"
    source:
      file: /src/github/authorizations.go
      line: 42
  - names: ScopeAdminGPGKey
    summary: ""
    description: ""
    code: ScopeAdminGPGKey Scope = "admin:gpg_key"
    source:
      file: /src/github/authorizations.go
      line: 43
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/authorizations.go
    line: 16
- name: SearchOptions
  summary: SearchOptions specifies optional parameters to the SearchService methods.
  description: |
    SearchOptions specifies optional parameters to the SearchService methods.
  code: "type SearchOptions struct {\n\t// How to sort the search results. Possible
    values are:\n\t//   - for repositories: stars, fork, updated\n\t//   - for commits:
    author-date, committer-date\n\t//   - for code: indexed\n\t//   - for issues:
    comments, created, updated\n\t//   - for users: followers, repositories, joined\n\t//\n\t//
    Default is to sort by best match.\n\tSort\tstring\t`url:\"sort,omitempty\"`\n\n\t//
    Sort order if sort parameter is provided. Possible values are: asc,\n\t// desc.
    Default is desc.\n\tOrder\tstring\t`url:\"order,omitempty\"`\n\n\t// Whether to
    retrieve text match metadata with a query\n\tTextMatch\tbool\t`url:\"-\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/search.go
    line: 30
- name: SearchService
  summary: SearchService provides access to the search related functions in the GitHub
    API.
  description: |
    SearchService provides access to the search related functions in the GitHub API.

    Each method takes a query string defining the search keywords and any search qualifiers. For example, when searching issues, the query "gopher is:issue language:go" will search for issues containing the word "gopher" in Go repositories. The method call

        opts :=  &github.SearchOptions{Sort: "created", Order: "asc"}
        cl.Search.Issues(ctx, "gopher is:issue language:go", opts)

    will search for such issues, sorting by creation date in ascending order (i.e., oldest first).

    GitHub API docs: https://developer.github.com/v3/search/
  code: type SearchService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Code
    summary: Code searches code via various criteria.
    description: |
      Code searches code via various criteria.

      GitHub API docs: https://developer.github.com/v3/search/#search-code
    code: func (s *SearchService) Code(ctx context.Context, query string, opt *SearchOptions)
      (*CodeSearchResult, *Response, error)
    source:
      file: /src/github/search.go
      line: 173
  - name: Commits
    summary: Commits searches commits via various criteria.
    description: |
      Commits searches commits via various criteria.

      GitHub API docs: https://developer.github.com/v3/search/#search-commits
    code: func (s *SearchService) Commits(ctx context.Context, query string, opt *SearchOptions)
      (*CommitsSearchResult, *Response, error)
    source:
      file: /src/github/search.go
      line: 92
  - name: Issues
    summary: Issues searches issues via various criteria.
    description: |
      Issues searches issues via various criteria.

      GitHub API docs: https://developer.github.com/v3/search/#search-issues
    code: func (s *SearchService) Issues(ctx context.Context, query string, opt *SearchOptions)
      (*IssuesSearchResult, *Response, error)
    source:
      file: /src/github/search.go
      line: 108
  - name: Repositories
    summary: Repositories searches repositories via various criteria.
    description: |
      Repositories searches repositories via various criteria.

      GitHub API docs: https://developer.github.com/v3/search/#search-repositories
    code: func (s *SearchService) Repositories(ctx context.Context, query string,
      opt *SearchOptions) (*RepositoriesSearchResult, *Response, error)
    source:
      file: /src/github/search.go
      line: 61
  - name: Users
    summary: Users searches users via various criteria.
    description: |
      Users searches users via various criteria.

      GitHub API docs: https://developer.github.com/v3/search/#search-users
    code: func (s *SearchService) Users(ctx context.Context, query string, opt *SearchOptions)
      (*UsersSearchResult, *Response, error)
    source:
      file: /src/github/search.go
      line: 124
  source:
    file: /src/github/search.go
    line: 27
- name: ServiceHook
  summary: ServiceHook represents a hook that has configuration settings, a list of
    available events, and default events.
  description: |
    ServiceHook represents a hook that has configuration settings, a list of available events, and default events.
  code: "type ServiceHook struct {\n\tName\t\t*string\t\t`json:\"name,omitempty\"`\n\tEvents\t\t[]string\t`json:\"events,omitempty\"`\n\tSupportedEvents\t[]string\t`json:\"supported_events,omitempty\"`\n\tSchema\t\t[][]string\t`json:\"schema,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (s *ServiceHook) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 8608
  - name: String
    summary: ""
    description: ""
    code: func (s *ServiceHook) String() string
    source:
      file: /src/github/misc.go
      line: 232
  source:
    file: /src/github/misc.go
    line: 225
- name: SignatureVerification
  summary: SignatureVerification represents GPG signature verification.
  description: |
    SignatureVerification represents GPG signature verification.
  code: "type SignatureVerification struct {\n\tVerified\t*bool\t`json:\"verified,omitempty\"`\n\tReason\t\t*string\t`json:\"reason,omitempty\"`\n\tSignature\t*string\t`json:\"signature,omitempty\"`\n\tPayload\t\t*string\t`json:\"payload,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetPayload
    summary: GetPayload returns the Payload field if it's non-nil, zero value otherwise.
    description: |
      GetPayload returns the Payload field if it's non-nil, zero value otherwise.
    code: func (s *SignatureVerification) GetPayload() string
    source:
      file: /src/github/github-accessors.go
      line: 8616
  - name: GetReason
    summary: GetReason returns the Reason field if it's non-nil, zero value otherwise.
    description: |
      GetReason returns the Reason field if it's non-nil, zero value otherwise.
    code: func (s *SignatureVerification) GetReason() string
    source:
      file: /src/github/github-accessors.go
      line: 8624
  - name: GetSignature
    summary: GetSignature returns the Signature field if it's non-nil, zero value
      otherwise.
    description: |
      GetSignature returns the Signature field if it's non-nil, zero value otherwise.
    code: func (s *SignatureVerification) GetSignature() string
    source:
      file: /src/github/github-accessors.go
      line: 8632
  - name: GetVerified
    summary: GetVerified returns the Verified field if it's non-nil, zero value otherwise.
    description: |
      GetVerified returns the Verified field if it's non-nil, zero value otherwise.
    code: func (s *SignatureVerification) GetVerified() bool
    source:
      file: /src/github/github-accessors.go
      line: 8640
  source:
    file: /src/github/git_commits.go
    line: 15
- name: Source
  summary: Source represents a reference's source.
  description: |
    Source represents a reference's source.
  code: "type Source struct {\n\tID\t*int\t`json:\"id,omitempty\"`\n\tURL\t*string\t`json:\"url,omitempty\"`\n\tActor\t*User\t`json:\"actor,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetActor
    summary: GetActor returns the Actor field.
    description: |
      GetActor returns the Actor field.
    code: func (s *Source) GetActor() *User
    source:
      file: /src/github/github-accessors.go
      line: 8648
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (s *Source) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 8656
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (s *Source) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8664
  source:
    file: /src/github/issues_timeline.go
    line: 122
- name: SourceImportAuthor
  summary: SourceImportAuthor identifies an author imported from a source repository.
  description: |
    SourceImportAuthor identifies an author imported from a source repository.

    GitHub API docs: https://developer.github.com/v3/migration/source_imports/#get-commit-authors
  code: "type SourceImportAuthor struct {\n\tID\t\t*int\t`json:\"id,omitempty\"`\n\tRemoteID\t*string\t`json:\"remote_id,omitempty\"`\n\tRemoteName\t*string\t`json:\"remote_name,omitempty\"`\n\tEmail\t\t*string\t`json:\"email,omitempty\"`\n\tName\t\t*string\t`json:\"name,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tImportURL\t*string\t`json:\"import_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (s *SourceImportAuthor) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 8672
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (s *SourceImportAuthor) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 8680
  - name: GetImportURL
    summary: GetImportURL returns the ImportURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetImportURL returns the ImportURL field if it's non-nil, zero value otherwise.
    code: func (s *SourceImportAuthor) GetImportURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8688
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (s *SourceImportAuthor) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 8696
  - name: GetRemoteID
    summary: GetRemoteID returns the RemoteID field if it's non-nil, zero value otherwise.
    description: |
      GetRemoteID returns the RemoteID field if it's non-nil, zero value otherwise.
    code: func (s *SourceImportAuthor) GetRemoteID() string
    source:
      file: /src/github/github-accessors.go
      line: 8704
  - name: GetRemoteName
    summary: GetRemoteName returns the RemoteName field if it's non-nil, zero value
      otherwise.
    description: |
      GetRemoteName returns the RemoteName field if it's non-nil, zero value otherwise.
    code: func (s *SourceImportAuthor) GetRemoteName() string
    source:
      file: /src/github/github-accessors.go
      line: 8712
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (s *SourceImportAuthor) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8720
  - name: String
    summary: ""
    description: ""
    code: func (a SourceImportAuthor) String() string
    source:
      file: /src/github/migrations_source_import.go
      line: 129
  source:
    file: /src/github/migrations_source_import.go
    line: 119
- name: Stargazer
  summary: Stargazer represents a user that has starred a repository.
  description: |
    Stargazer represents a user that has starred a repository.
  code: "type Stargazer struct {\n\tStarredAt\t*Timestamp\t`json:\"starred_at,omitempty\"`\n\tUser\t\t*User\t\t`json:\"user,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetStarredAt
    summary: GetStarredAt returns the StarredAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetStarredAt returns the StarredAt field if it's non-nil, zero value otherwise.
    code: func (s *Stargazer) GetStarredAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 8728
  - name: GetUser
    summary: GetUser returns the User field.
    description: |
      GetUser returns the User field.
    code: func (s *Stargazer) GetUser() *User
    source:
      file: /src/github/github-accessors.go
      line: 8736
  source:
    file: /src/github/activity_star.go
    line: 20
- name: StarredRepository
  summary: StarredRepository is returned by ListStarred.
  description: |
    StarredRepository is returned by ListStarred.
  code: "type StarredRepository struct {\n\tStarredAt\t*Timestamp\t`json:\"starred_at,omitempty\"`\n\tRepository\t*Repository\t`json:\"repo,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetRepository
    summary: GetRepository returns the Repository field.
    description: |
      GetRepository returns the Repository field.
    code: func (s *StarredRepository) GetRepository() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 8744
  - name: GetStarredAt
    summary: GetStarredAt returns the StarredAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetStarredAt returns the StarredAt field if it's non-nil, zero value otherwise.
    code: func (s *StarredRepository) GetStarredAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 8752
  source:
    file: /src/github/activity_star.go
    line: 14
- name: StatusEvent
  summary: StatusEvent is triggered when the status of a Git commit changes.
  description: |
    StatusEvent is triggered when the status of a Git commit changes. The Webhook event name is "status".

    Events of this type are not visible in timelines, they are only used to trigger hooks.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#statusevent
  code: "type StatusEvent struct {\n\tSHA\t*string\t`json:\"sha,omitempty\"`\n\t//
    State is the new state. Possible values are: \"pending\", \"success\", \"failure\",
    \"error\".\n\tState\t\t*string\t\t`json:\"state,omitempty\"`\n\tDescription\t*string\t\t`json:\"description,omitempty\"`\n\tTargetURL\t*string\t\t`json:\"target_url,omitempty\"`\n\tBranches\t[]*Branch\t`json:\"branches,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tID\t\t*int\t\t\t`json:\"id,omitempty\"`\n\tName\t\t*string\t\t\t`json:\"name,omitempty\"`\n\tContext\t\t*string\t\t\t`json:\"context,omitempty\"`\n\tCommit\t\t*RepositoryCommit\t`json:\"commit,omitempty\"`\n\tCreatedAt\t*Timestamp\t\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t*Timestamp\t\t`json:\"updated_at,omitempty\"`\n\tRepo\t\t*Repository\t\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCommit
    summary: GetCommit returns the Commit field.
    description: |
      GetCommit returns the Commit field.
    code: func (s *StatusEvent) GetCommit() *RepositoryCommit
    source:
      file: /src/github/github-accessors.go
      line: 8760
  - name: GetContext
    summary: GetContext returns the Context field if it's non-nil, zero value otherwise.
    description: |
      GetContext returns the Context field if it's non-nil, zero value otherwise.
    code: func (s *StatusEvent) GetContext() string
    source:
      file: /src/github/github-accessors.go
      line: 8768
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (s *StatusEvent) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 8776
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (s *StatusEvent) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 8784
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (s *StatusEvent) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 8792
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (s *StatusEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 8800
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (s *StatusEvent) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 8808
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (s *StatusEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 8816
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (s *StatusEvent) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 8832
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (s *StatusEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 8824
  - name: GetState
    summary: GetState returns the State field if it's non-nil, zero value otherwise.
    description: |
      GetState returns the State field if it's non-nil, zero value otherwise.
    code: func (s *StatusEvent) GetState() string
    source:
      file: /src/github/github-accessors.go
      line: 8840
  - name: GetTargetURL
    summary: GetTargetURL returns the TargetURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetTargetURL returns the TargetURL field if it's non-nil, zero value otherwise.
    code: func (s *StatusEvent) GetTargetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8848
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (s *StatusEvent) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 8856
  source:
    file: /src/github/event_types.go
    line: 677
- name: Subscription
  summary: Subscription identifies a repository or thread subscription.
  description: |
    Subscription identifies a repository or thread subscription.
  code: "type Subscription struct {\n\tSubscribed\t*bool\t\t`json:\"subscribed,omitempty\"`\n\tIgnored\t\t*bool\t\t`json:\"ignored,omitempty\"`\n\tReason\t\t*string\t\t`json:\"reason,omitempty\"`\n\tCreatedAt\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tURL\t\t*string\t\t`json:\"url,omitempty\"`\n\n\t//
    only populated for repository subscriptions\n\tRepositoryURL\t*string\t`json:\"repository_url,omitempty\"`\n\n\t//
    only populated for thread subscriptions\n\tThreadURL\t*string\t`json:\"thread_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (s *Subscription) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 8864
  - name: GetIgnored
    summary: GetIgnored returns the Ignored field if it's non-nil, zero value otherwise.
    description: |
      GetIgnored returns the Ignored field if it's non-nil, zero value otherwise.
    code: func (s *Subscription) GetIgnored() bool
    source:
      file: /src/github/github-accessors.go
      line: 8872
  - name: GetReason
    summary: GetReason returns the Reason field if it's non-nil, zero value otherwise.
    description: |
      GetReason returns the Reason field if it's non-nil, zero value otherwise.
    code: func (s *Subscription) GetReason() string
    source:
      file: /src/github/github-accessors.go
      line: 8880
  - name: GetRepositoryURL
    summary: GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetRepositoryURL returns the RepositoryURL field if it's non-nil, zero value otherwise.
    code: func (s *Subscription) GetRepositoryURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8888
  - name: GetSubscribed
    summary: GetSubscribed returns the Subscribed field if it's non-nil, zero value
      otherwise.
    description: |
      GetSubscribed returns the Subscribed field if it's non-nil, zero value otherwise.
    code: func (s *Subscription) GetSubscribed() bool
    source:
      file: /src/github/github-accessors.go
      line: 8896
  - name: GetThreadURL
    summary: GetThreadURL returns the ThreadURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetThreadURL returns the ThreadURL field if it's non-nil, zero value otherwise.
    code: func (s *Subscription) GetThreadURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8904
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (s *Subscription) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8912
  source:
    file: /src/github/activity_watching.go
    line: 14
- name: Tag
  summary: Tag represents a tag object.
  description: |
    Tag represents a tag object.
  code: "type Tag struct {\n\tTag\t\t*string\t\t\t`json:\"tag,omitempty\"`\n\tSHA\t\t*string\t\t\t`json:\"sha,omitempty\"`\n\tURL\t\t*string\t\t\t`json:\"url,omitempty\"`\n\tMessage\t\t*string\t\t\t`json:\"message,omitempty\"`\n\tTagger\t\t*CommitAuthor\t\t`json:\"tagger,omitempty\"`\n\tObject\t\t*GitObject\t\t`json:\"object,omitempty\"`\n\tVerification\t*SignatureVerification\t`json:\"verification,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetMessage
    summary: GetMessage returns the Message field if it's non-nil, zero value otherwise.
    description: |
      GetMessage returns the Message field if it's non-nil, zero value otherwise.
    code: func (t *Tag) GetMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 8920
  - name: GetObject
    summary: GetObject returns the Object field.
    description: |
      GetObject returns the Object field.
    code: func (t *Tag) GetObject() *GitObject
    source:
      file: /src/github/github-accessors.go
      line: 8928
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (t *Tag) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 8936
  - name: GetTag
    summary: GetTag returns the Tag field if it's non-nil, zero value otherwise.
    description: |
      GetTag returns the Tag field if it's non-nil, zero value otherwise.
    code: func (t *Tag) GetTag() string
    source:
      file: /src/github/github-accessors.go
      line: 8944
  - name: GetTagger
    summary: GetTagger returns the Tagger field.
    description: |
      GetTagger returns the Tagger field.
    code: func (t *Tag) GetTagger() *CommitAuthor
    source:
      file: /src/github/github-accessors.go
      line: 8952
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (t *Tag) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 8960
  - name: GetVerification
    summary: GetVerification returns the Verification field.
    description: |
      GetVerification returns the Verification field.
    code: func (t *Tag) GetVerification() *SignatureVerification
    source:
      file: /src/github/github-accessors.go
      line: 8968
  source:
    file: /src/github/git_tags.go
    line: 14
- name: Team
  summary: Team represents a team within a GitHub organization.
  description: |
    Team represents a team within a GitHub organization. Teams are used to manage access to an organization's repositories.
  code: "type Team struct {\n\tID\t\t*int\t`json:\"id,omitempty\"`\n\tName\t\t*string\t`json:\"name,omitempty\"`\n\tDescription\t*string\t`json:\"description,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tSlug\t\t*string\t`json:\"slug,omitempty\"`\n\n\t//
    Permission specifies the default permission for repositories owned by the team.\n\tPermission\t*string\t`json:\"permission,omitempty\"`\n\n\t//
    Privacy identifies the level of privacy this team should have.\n\t// Possible
    values are:\n\t//     secret - only visible to organization owners and members
    of this team\n\t//     closed - visible to all members of this organization\n\t//
    Default is \"secret\".\n\tPrivacy\t*string\t`json:\"privacy,omitempty\"`\n\n\tMembersCount\t*int\t\t`json:\"members_count,omitempty\"`\n\tReposCount\t*int\t\t`json:\"repos_count,omitempty\"`\n\tOrganization\t*Organization\t`json:\"organization,omitempty\"`\n\tMembersURL\t*string\t\t`json:\"members_url,omitempty\"`\n\tRepositoriesURL\t*string\t\t`json:\"repositories_url,omitempty\"`\n\tParent\t\t*Team\t\t`json:\"parent,omitempty\"`\n\n\t//
    LDAPDN is only available in GitHub Enterprise and when the team\n\t// membership
    is synchronized with LDAP.\n\tLDAPDN\t*string\t`json:\"ldap_dn,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 8976
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 8984
  - name: GetLDAPDN
    summary: GetLDAPDN returns the LDAPDN field if it's non-nil, zero value otherwise.
    description: |
      GetLDAPDN returns the LDAPDN field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetLDAPDN() string
    source:
      file: /src/github/github-accessors.go
      line: 8992
  - name: GetMembersCount
    summary: GetMembersCount returns the MembersCount field if it's non-nil, zero
      value otherwise.
    description: |
      GetMembersCount returns the MembersCount field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetMembersCount() int
    source:
      file: /src/github/github-accessors.go
      line: 9000
  - name: GetMembersURL
    summary: GetMembersURL returns the MembersURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetMembersURL returns the MembersURL field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetMembersURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9008
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 9016
  - name: GetOrganization
    summary: GetOrganization returns the Organization field.
    description: |
      GetOrganization returns the Organization field.
    code: func (t *Team) GetOrganization() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 9024
  - name: GetParent
    summary: GetParent returns the Parent field.
    description: |
      GetParent returns the Parent field.
    code: func (t *Team) GetParent() *Team
    source:
      file: /src/github/github-accessors.go
      line: 9032
  - name: GetPermission
    summary: GetPermission returns the Permission field if it's non-nil, zero value
      otherwise.
    description: |
      GetPermission returns the Permission field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetPermission() string
    source:
      file: /src/github/github-accessors.go
      line: 9040
  - name: GetPrivacy
    summary: GetPrivacy returns the Privacy field if it's non-nil, zero value otherwise.
    description: |
      GetPrivacy returns the Privacy field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetPrivacy() string
    source:
      file: /src/github/github-accessors.go
      line: 9048
  - name: GetReposCount
    summary: GetReposCount returns the ReposCount field if it's non-nil, zero value
      otherwise.
    description: |
      GetReposCount returns the ReposCount field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetReposCount() int
    source:
      file: /src/github/github-accessors.go
      line: 9056
  - name: GetRepositoriesURL
    summary: GetRepositoriesURL returns the RepositoriesURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetRepositoriesURL returns the RepositoriesURL field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetRepositoriesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9064
  - name: GetSlug
    summary: GetSlug returns the Slug field if it's non-nil, zero value otherwise.
    description: |
      GetSlug returns the Slug field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetSlug() string
    source:
      file: /src/github/github-accessors.go
      line: 9072
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (t *Team) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9080
  - name: String
    summary: ""
    description: ""
    code: func (t Team) String() string
    source:
      file: /src/github/orgs_teams.go
      line: 46
  source:
    file: /src/github/orgs_teams.go
    line: 17
- name: TeamAddEvent
  summary: TeamAddEvent is triggered when a repository is added to a team.
  description: |
    TeamAddEvent is triggered when a repository is added to a team. The Webhook event name is "team_add".

    Events of this type are not visible in timelines. These events are only used to trigger hooks.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#teamaddevent
  code: "type TeamAddEvent struct {\n\tTeam\t*Team\t\t`json:\"team,omitempty\"`\n\tRepo\t*Repository\t`json:\"repository,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tOrg\t\t*Organization\t`json:\"organization,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (t *TeamAddEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 9088
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (t *TeamAddEvent) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 9096
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (t *TeamAddEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 9104
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (t *TeamAddEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 9112
  - name: GetTeam
    summary: GetTeam returns the Team field.
    description: |
      GetTeam returns the Team field.
    code: func (t *TeamAddEvent) GetTeam() *Team
    source:
      file: /src/github/github-accessors.go
      line: 9120
  source:
    file: /src/github/event_types.go
    line: 723
- name: TeamChange
  summary: TeamChange represents the changes when a team has been edited.
  description: |
    TeamChange represents the changes when a team has been edited.
  code: "type TeamChange struct {\n\tDescription\t*struct {\n\t\tFrom *string `json:\"from,omitempty\"`\n\t}\t`json:\"description,omitempty\"`\n\tName\t*struct
    {\n\t\tFrom *string `json:\"from,omitempty\"`\n\t}\t`json:\"name,omitempty\"`\n\tPrivacy\t*struct
    {\n\t\tFrom *string `json:\"from,omitempty\"`\n\t}\t`json:\"privacy,omitempty\"`\n\tRepository\t*struct
    {\n\t\tPermissions *struct {\n\t\t\tFrom *struct {\n\t\t\t\tAdmin\t*bool\t`json:\"admin,omitempty\"`\n\t\t\t\tPull\t*bool\t`json:\"pull,omitempty\"`\n\t\t\t\tPush\t*bool\t`json:\"push,omitempty\"`\n\t\t\t}
    `json:\"from,omitempty\"`\n\t\t} `json:\"permissions,omitempty\"`\n\t}\t`json:\"repository,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/event_types.go
    line: 169
- name: TeamEvent
  summary: TeamEvent is triggered when an organization's team is created, modified
    or deleted.
  description: |
    TeamEvent is triggered when an organization's team is created, modified or deleted. The Webhook event name is "team".

    Events of this type are not visible in timelines. These events are only used to trigger hooks.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#teamevent
  code: "type TeamEvent struct {\n\tAction\t*string\t\t`json:\"action,omitempty\"`\n\tTeam\t*Team\t\t`json:\"team,omitempty\"`\n\tChanges\t*TeamChange\t`json:\"changes,omitempty\"`\n\tRepo\t*Repository\t`json:\"repository,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tOrg\t\t*Organization\t`json:\"organization,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (t *TeamEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 9128
  - name: GetChanges
    summary: GetChanges returns the Changes field.
    description: |
      GetChanges returns the Changes field.
    code: func (t *TeamEvent) GetChanges() *TeamChange
    source:
      file: /src/github/github-accessors.go
      line: 9136
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (t *TeamEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 9144
  - name: GetOrg
    summary: GetOrg returns the Org field.
    description: |
      GetOrg returns the Org field.
    code: func (t *TeamEvent) GetOrg() *Organization
    source:
      file: /src/github/github-accessors.go
      line: 9152
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (t *TeamEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 9160
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (t *TeamEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 9168
  - name: GetTeam
    summary: GetTeam returns the Team field.
    description: |
      GetTeam returns the Team field.
    code: func (t *TeamEvent) GetTeam() *Team
    source:
      file: /src/github/github-accessors.go
      line: 9176
  source:
    file: /src/github/event_types.go
    line: 704
- name: TeamLDAPMapping
  summary: TeamLDAPMapping represents the mapping between a GitHub team and an LDAP
    group.
  description: |
    TeamLDAPMapping represents the mapping between a GitHub team and an LDAP group.
  code: "type TeamLDAPMapping struct {\n\tID\t\t*int\t`json:\"id,omitempty\"`\n\tLDAPDN\t\t*string\t`json:\"ldap_dn,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tName\t\t*string\t`json:\"name,omitempty\"`\n\tSlug\t\t*string\t`json:\"slug,omitempty\"`\n\tDescription\t*string\t`json:\"description,omitempty\"`\n\tPrivacy\t\t*string\t`json:\"privacy,omitempty\"`\n\tPermission\t*string\t`json:\"permission,omitempty\"`\n\n\tMembersURL\t*string\t`json:\"members_url,omitempty\"`\n\tRepositoriesURL\t*string\t`json:\"repositories_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetDescription
    summary: GetDescription returns the Description field if it's non-nil, zero value
      otherwise.
    description: |
      GetDescription returns the Description field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetDescription() string
    source:
      file: /src/github/github-accessors.go
      line: 9184
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 9192
  - name: GetLDAPDN
    summary: GetLDAPDN returns the LDAPDN field if it's non-nil, zero value otherwise.
    description: |
      GetLDAPDN returns the LDAPDN field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetLDAPDN() string
    source:
      file: /src/github/github-accessors.go
      line: 9200
  - name: GetMembersURL
    summary: GetMembersURL returns the MembersURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetMembersURL returns the MembersURL field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetMembersURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9208
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 9216
  - name: GetPermission
    summary: GetPermission returns the Permission field if it's non-nil, zero value
      otherwise.
    description: |
      GetPermission returns the Permission field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetPermission() string
    source:
      file: /src/github/github-accessors.go
      line: 9224
  - name: GetPrivacy
    summary: GetPrivacy returns the Privacy field if it's non-nil, zero value otherwise.
    description: |
      GetPrivacy returns the Privacy field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetPrivacy() string
    source:
      file: /src/github/github-accessors.go
      line: 9232
  - name: GetRepositoriesURL
    summary: GetRepositoriesURL returns the RepositoriesURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetRepositoriesURL returns the RepositoriesURL field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetRepositoriesURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9240
  - name: GetSlug
    summary: GetSlug returns the Slug field if it's non-nil, zero value otherwise.
    description: |
      GetSlug returns the Slug field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetSlug() string
    source:
      file: /src/github/github-accessors.go
      line: 9248
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (t *TeamLDAPMapping) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9256
  - name: String
    summary: ""
    description: ""
    code: func (m TeamLDAPMapping) String() string
    source:
      file: /src/github/admin.go
      line: 35
  source:
    file: /src/github/admin.go
    line: 21
- name: TextMatch
  summary: TextMatch represents a text match for a SearchResult
  description: |
    TextMatch represents a text match for a SearchResult
  code: "type TextMatch struct {\n\tObjectURL\t*string\t`json:\"object_url,omitempty\"`\n\tObjectType\t*string\t`json:\"object_type,omitempty\"`\n\tProperty\t*string\t`json:\"property,omitempty\"`\n\tFragment\t*string\t`json:\"fragment,omitempty\"`\n\tMatches\t\t[]Match\t`json:\"matches,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetFragment
    summary: GetFragment returns the Fragment field if it's non-nil, zero value otherwise.
    description: |
      GetFragment returns the Fragment field if it's non-nil, zero value otherwise.
    code: func (t *TextMatch) GetFragment() string
    source:
      file: /src/github/github-accessors.go
      line: 9264
  - name: GetObjectType
    summary: GetObjectType returns the ObjectType field if it's non-nil, zero value
      otherwise.
    description: |
      GetObjectType returns the ObjectType field if it's non-nil, zero value otherwise.
    code: func (t *TextMatch) GetObjectType() string
    source:
      file: /src/github/github-accessors.go
      line: 9272
  - name: GetObjectURL
    summary: GetObjectURL returns the ObjectURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetObjectURL returns the ObjectURL field if it's non-nil, zero value otherwise.
    code: func (t *TextMatch) GetObjectURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9280
  - name: GetProperty
    summary: GetProperty returns the Property field if it's non-nil, zero value otherwise.
    description: |
      GetProperty returns the Property field if it's non-nil, zero value otherwise.
    code: func (t *TextMatch) GetProperty() string
    source:
      file: /src/github/github-accessors.go
      line: 9288
  - name: String
    summary: ""
    description: ""
    code: func (tm TextMatch) String() string
    source:
      file: /src/github/search.go
      line: 145
  source:
    file: /src/github/search.go
    line: 137
- name: Timeline
  summary: Timeline represents an event that occurred around an Issue or Pull Request.
  description: |
    Timeline represents an event that occurred around an Issue or Pull Request.

    It is similar to an IssueEvent but may contain more information. GitHub API docs: https://developer.github.com/v3/issues/timeline/
  code: "type Timeline struct {\n\tID\t\t*int\t`json:\"id,omitempty\"`\n\tURL\t\t*string\t`json:\"url,omitempty\"`\n\tCommitURL\t*string\t`json:\"commit_url,omitempty\"`\n\n\t//
    The User object that generated the event.\n\tActor\t*User\t`json:\"actor,omitempty\"`\n\n\t//
    Event identifies the actual type of Event that occurred. Possible values\n\t//
    are:\n\t//\n\t//     assigned\n\t//       The issue was assigned to the assignee.\n\t//\n\t//
    \    closed\n\t//       The issue was closed by the actor. When the commit_id
    is present, it\n\t//       identifies the commit that closed the issue using \"closes
    / fixes #NN\"\n\t//       syntax.\n\t//\n\t//     commented\n\t//       A comment
    was added to the issue.\n\t//\n\t//     committed\n\t//       A commit was added
    to the pull request's 'HEAD' branch. Only provided\n\t//       for pull requests.\n\t//\n\t//
    \    cross-referenced\n\t//       The issue was referenced from another issue.
    The 'source' attribute\n\t//       contains the 'id', 'actor', and 'url' of the
    reference's source.\n\t//\n\t//     demilestoned\n\t//       The issue was removed
    from a milestone.\n\t//\n\t//     head_ref_deleted\n\t//       The pull request's
    branch was deleted.\n\t//\n\t//     head_ref_restored\n\t//       The pull request's
    branch was restored.\n\t//\n\t//     labeled\n\t//       A label was added to
    the issue.\n\t//\n\t//     locked\n\t//       The issue was locked by the actor.\n\t//\n\t//
    \    mentioned\n\t//       The actor was @mentioned in an issue body.\n\t//\n\t//
    \    merged\n\t//       The issue was merged by the actor. The 'commit_id' attribute
    is the\n\t//       SHA1 of the HEAD commit that was merged.\n\t//\n\t//     milestoned\n\t//
    \      The issue was added to a milestone.\n\t//\n\t//     referenced\n\t//       The
    issue was referenced from a commit message. The 'commit_id'\n\t//       attribute
    is the commit SHA1 of where that happened.\n\t//\n\t//     renamed\n\t//       The
    issue title was changed.\n\t//\n\t//     reopened\n\t//       The issue was reopened
    by the actor.\n\t//\n\t//     subscribed\n\t//       The actor subscribed to receive
    notifications for an issue.\n\t//\n\t//     unassigned\n\t//       The assignee
    was unassigned from the issue.\n\t//\n\t//     unlabeled\n\t//       A label was
    removed from the issue.\n\t//\n\t//     unlocked\n\t//       The issue was unlocked
    by the actor.\n\t//\n\t//     unsubscribed\n\t//       The actor unsubscribed
    to stop receiving notifications for an issue.\n\t//\n\tEvent\t*string\t`json:\"event,omitempty\"`\n\n\t//
    The string SHA of a commit that referenced this Issue or Pull Request.\n\tCommitID\t*string\t`json:\"commit_id,omitempty\"`\n\t//
    The timestamp indicating when the event occurred.\n\tCreatedAt\t*time.Time\t`json:\"created_at,omitempty\"`\n\t//
    The Label object including `name` and `color` attributes. Only provided for\n\t//
    'labeled' and 'unlabeled' events.\n\tLabel\t*Label\t`json:\"label,omitempty\"`\n\t//
    The User object which was assigned to (or unassigned from) this Issue or\n\t//
    Pull Request. Only provided for 'assigned' and 'unassigned' events.\n\tAssignee\t*User\t`json:\"assignee,omitempty\"`\n\t//
    The Milestone object including a 'title' attribute.\n\t// Only provided for 'milestoned'
    and 'demilestoned' events.\n\tMilestone\t*Milestone\t`json:\"milestone,omitempty\"`\n\t//
    The 'id', 'actor', and 'url' for the source of a reference from another issue.\n\t//
    Only provided for 'cross-referenced' events.\n\tSource\t*Source\t`json:\"source,omitempty\"`\n\t//
    An object containing rename details including 'from' and 'to' attributes.\n\t//
    Only provided for 'renamed' events.\n\tRename\t*Rename\t`json:\"rename,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetActor
    summary: GetActor returns the Actor field.
    description: |
      GetActor returns the Actor field.
    code: func (t *Timeline) GetActor() *User
    source:
      file: /src/github/github-accessors.go
      line: 9296
  - name: GetAssignee
    summary: GetAssignee returns the Assignee field.
    description: |
      GetAssignee returns the Assignee field.
    code: func (t *Timeline) GetAssignee() *User
    source:
      file: /src/github/github-accessors.go
      line: 9304
  - name: GetCommitID
    summary: GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    description: |
      GetCommitID returns the CommitID field if it's non-nil, zero value otherwise.
    code: func (t *Timeline) GetCommitID() string
    source:
      file: /src/github/github-accessors.go
      line: 9312
  - name: GetCommitURL
    summary: GetCommitURL returns the CommitURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetCommitURL returns the CommitURL field if it's non-nil, zero value otherwise.
    code: func (t *Timeline) GetCommitURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9320
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (t *Timeline) GetCreatedAt() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 9328
  - name: GetEvent
    summary: GetEvent returns the Event field if it's non-nil, zero value otherwise.
    description: |
      GetEvent returns the Event field if it's non-nil, zero value otherwise.
    code: func (t *Timeline) GetEvent() string
    source:
      file: /src/github/github-accessors.go
      line: 9336
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (t *Timeline) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 9344
  - name: GetLabel
    summary: GetLabel returns the Label field.
    description: |
      GetLabel returns the Label field.
    code: func (t *Timeline) GetLabel() *Label
    source:
      file: /src/github/github-accessors.go
      line: 9352
  - name: GetMilestone
    summary: GetMilestone returns the Milestone field.
    description: |
      GetMilestone returns the Milestone field.
    code: func (t *Timeline) GetMilestone() *Milestone
    source:
      file: /src/github/github-accessors.go
      line: 9360
  - name: GetRename
    summary: GetRename returns the Rename field.
    description: |
      GetRename returns the Rename field.
    code: func (t *Timeline) GetRename() *Rename
    source:
      file: /src/github/github-accessors.go
      line: 9368
  - name: GetSource
    summary: GetSource returns the Source field.
    description: |
      GetSource returns the Source field.
    code: func (t *Timeline) GetSource() *Source
    source:
      file: /src/github/github-accessors.go
      line: 9376
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (t *Timeline) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9384
  source:
    file: /src/github/issues_timeline.go
    line: 18
- name: Timestamp
  summary: Timestamp represents a time that can be unmarshalled from a JSON string
    formatted as either an RFC3339 or Unix timestamp.
  description: |
    Timestamp represents a time that can be unmarshalled from a JSON string formatted as either an RFC3339 or Unix timestamp. This is necessary for some fields since the GitHub API is inconsistent in how it represents times. All exported methods of time.Time can be called on Timestamp.
  code: "type Timestamp struct {\n\ttime.Time\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Equal
    summary: Equal reports whether t and u are equal based on time.Equal
    description: |
      Equal reports whether t and u are equal based on time.Equal
    code: func (t Timestamp) Equal(u Timestamp) bool
    source:
      file: /src/github/timestamp.go
      line: 39
  - name: String
    summary: ""
    description: ""
    code: func (t Timestamp) String() string
    source:
      file: /src/github/timestamp.go
      line: 21
  - name: UnmarshalJSON
    summary: UnmarshalJSON implements the json.Unmarshaler interface.
    description: |
      UnmarshalJSON implements the json.Unmarshaler interface. Time is expected in RFC3339 or Unix format.
    code: func (t *Timestamp) UnmarshalJSON(data []byte) (err error)
    source:
      file: /src/github/timestamp.go
      line: 27
  source:
    file: /src/github/timestamp.go
    line: 17
- name: TrafficBreakdownOptions
  summary: TrafficBreakdownOptions specifies the parameters to methods that support
    breakdown per day or week.
  description: |
    TrafficBreakdownOptions specifies the parameters to methods that support breakdown per day or week. Can be one of: day, week. Default: day.
  code: "type TrafficBreakdownOptions struct {\n\tPer string `url:\"per,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos_traffic.go
    line: 51
- name: TrafficClones
  summary: TrafficClones represent information about the number of clones in the last
    14 days.
  description: |
    TrafficClones represent information about the number of clones in the last 14 days.
  code: "type TrafficClones struct {\n\tClones\t[]*TrafficData\t`json:\"clones,omitempty\"`\n\tCount\t*int\t\t`json:\"count,omitempty\"`\n\tUniques\t*int\t\t`json:\"uniques,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCount
    summary: GetCount returns the Count field if it's non-nil, zero value otherwise.
    description: |
      GetCount returns the Count field if it's non-nil, zero value otherwise.
    code: func (t *TrafficClones) GetCount() int
    source:
      file: /src/github/github-accessors.go
      line: 9392
  - name: GetUniques
    summary: GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    description: |
      GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    code: func (t *TrafficClones) GetUniques() int
    source:
      file: /src/github/github-accessors.go
      line: 9400
  source:
    file: /src/github/repos_traffic.go
    line: 43
- name: TrafficData
  summary: TrafficData represent information about a specific timestamp in views or
    clones list.
  description: |
    TrafficData represent information about a specific timestamp in views or clones list.
  code: "type TrafficData struct {\n\tTimestamp\t*Timestamp\t`json:\"timestamp,omitempty\"`\n\tCount\t\t*int\t\t`json:\"count,omitempty\"`\n\tUniques\t\t*int\t\t`json:\"uniques,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCount
    summary: GetCount returns the Count field if it's non-nil, zero value otherwise.
    description: |
      GetCount returns the Count field if it's non-nil, zero value otherwise.
    code: func (t *TrafficData) GetCount() int
    source:
      file: /src/github/github-accessors.go
      line: 9408
  - name: GetTimestamp
    summary: GetTimestamp returns the Timestamp field if it's non-nil, zero value
      otherwise.
    description: |
      GetTimestamp returns the Timestamp field if it's non-nil, zero value otherwise.
    code: func (t *TrafficData) GetTimestamp() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 9416
  - name: GetUniques
    summary: GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    description: |
      GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    code: func (t *TrafficData) GetUniques() int
    source:
      file: /src/github/github-accessors.go
      line: 9424
  source:
    file: /src/github/repos_traffic.go
    line: 29
- name: TrafficPath
  summary: TrafficPath represent information about the traffic on a path of the repo.
  description: |
    TrafficPath represent information about the traffic on a path of the repo.
  code: "type TrafficPath struct {\n\tPath\t*string\t`json:\"path,omitempty\"`\n\tTitle\t*string\t`json:\"title,omitempty\"`\n\tCount\t*int\t`json:\"count,omitempty\"`\n\tUniques\t*int\t`json:\"uniques,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCount
    summary: GetCount returns the Count field if it's non-nil, zero value otherwise.
    description: |
      GetCount returns the Count field if it's non-nil, zero value otherwise.
    code: func (t *TrafficPath) GetCount() int
    source:
      file: /src/github/github-accessors.go
      line: 9432
  - name: GetPath
    summary: GetPath returns the Path field if it's non-nil, zero value otherwise.
    description: |
      GetPath returns the Path field if it's non-nil, zero value otherwise.
    code: func (t *TrafficPath) GetPath() string
    source:
      file: /src/github/github-accessors.go
      line: 9440
  - name: GetTitle
    summary: GetTitle returns the Title field if it's non-nil, zero value otherwise.
    description: |
      GetTitle returns the Title field if it's non-nil, zero value otherwise.
    code: func (t *TrafficPath) GetTitle() string
    source:
      file: /src/github/github-accessors.go
      line: 9448
  - name: GetUniques
    summary: GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    description: |
      GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    code: func (t *TrafficPath) GetUniques() int
    source:
      file: /src/github/github-accessors.go
      line: 9456
  source:
    file: /src/github/repos_traffic.go
    line: 21
- name: TrafficReferrer
  summary: TrafficReferrer represent information about traffic from a referrer .
  description: |
    TrafficReferrer represent information about traffic from a referrer .
  code: "type TrafficReferrer struct {\n\tReferrer\t*string\t`json:\"referrer,omitempty\"`\n\tCount\t\t*int\t`json:\"count,omitempty\"`\n\tUniques\t\t*int\t`json:\"uniques,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCount
    summary: GetCount returns the Count field if it's non-nil, zero value otherwise.
    description: |
      GetCount returns the Count field if it's non-nil, zero value otherwise.
    code: func (t *TrafficReferrer) GetCount() int
    source:
      file: /src/github/github-accessors.go
      line: 9464
  - name: GetReferrer
    summary: GetReferrer returns the Referrer field if it's non-nil, zero value otherwise.
    description: |
      GetReferrer returns the Referrer field if it's non-nil, zero value otherwise.
    code: func (t *TrafficReferrer) GetReferrer() string
    source:
      file: /src/github/github-accessors.go
      line: 9472
  - name: GetUniques
    summary: GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    description: |
      GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    code: func (t *TrafficReferrer) GetUniques() int
    source:
      file: /src/github/github-accessors.go
      line: 9480
  source:
    file: /src/github/repos_traffic.go
    line: 14
- name: TrafficViews
  summary: TrafficViews represent information about the number of views in the last
    14 days.
  description: |
    TrafficViews represent information about the number of views in the last 14 days.
  code: "type TrafficViews struct {\n\tViews\t[]*TrafficData\t`json:\"views,omitempty\"`\n\tCount\t*int\t\t`json:\"count,omitempty\"`\n\tUniques\t*int\t\t`json:\"uniques,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetCount
    summary: GetCount returns the Count field if it's non-nil, zero value otherwise.
    description: |
      GetCount returns the Count field if it's non-nil, zero value otherwise.
    code: func (t *TrafficViews) GetCount() int
    source:
      file: /src/github/github-accessors.go
      line: 9488
  - name: GetUniques
    summary: GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    description: |
      GetUniques returns the Uniques field if it's non-nil, zero value otherwise.
    code: func (t *TrafficViews) GetUniques() int
    source:
      file: /src/github/github-accessors.go
      line: 9496
  source:
    file: /src/github/repos_traffic.go
    line: 36
- name: TransferRequest
  summary: TransferRequest represents a request to transfer a repository.
  description: |
    TransferRequest represents a request to transfer a repository.
  code: "type TransferRequest struct {\n\tNewOwner\tstring\t`json:\"new_owner\"`\n\tTeamID\t\t[]int\t`json:\"team_id,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/repos.go
    line: 1044
- name: Tree
  summary: Tree represents a GitHub tree.
  description: |
    Tree represents a GitHub tree.
  code: "type Tree struct {\n\tSHA\t*string\t\t`json:\"sha,omitempty\"`\n\tEntries\t[]TreeEntry\t`json:\"tree,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (t *Tree) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 9504
  - name: String
    summary: ""
    description: ""
    code: func (t Tree) String() string
    source:
      file: /src/github/git_trees.go
      line: 19
  source:
    file: /src/github/git_trees.go
    line: 14
- name: TreeEntry
  summary: TreeEntry represents the contents of a tree structure.
  description: |
    TreeEntry represents the contents of a tree structure. TreeEntry can represent either a blob, a commit (in the case of a submodule), or another tree.
  code: "type TreeEntry struct {\n\tSHA\t*string\t`json:\"sha,omitempty\"`\n\tPath\t*string\t`json:\"path,omitempty\"`\n\tMode\t*string\t`json:\"mode,omitempty\"`\n\tType\t*string\t`json:\"type,omitempty\"`\n\tSize\t*int\t`json:\"size,omitempty\"`\n\tContent\t*string\t`json:\"content,omitempty\"`\n\tURL\t*string\t`json:\"url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetContent
    summary: GetContent returns the Content field if it's non-nil, zero value otherwise.
    description: |
      GetContent returns the Content field if it's non-nil, zero value otherwise.
    code: func (t *TreeEntry) GetContent() string
    source:
      file: /src/github/github-accessors.go
      line: 9512
  - name: GetMode
    summary: GetMode returns the Mode field if it's non-nil, zero value otherwise.
    description: |
      GetMode returns the Mode field if it's non-nil, zero value otherwise.
    code: func (t *TreeEntry) GetMode() string
    source:
      file: /src/github/github-accessors.go
      line: 9520
  - name: GetPath
    summary: GetPath returns the Path field if it's non-nil, zero value otherwise.
    description: |
      GetPath returns the Path field if it's non-nil, zero value otherwise.
    code: func (t *TreeEntry) GetPath() string
    source:
      file: /src/github/github-accessors.go
      line: 9528
  - name: GetSHA
    summary: GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    description: |
      GetSHA returns the SHA field if it's non-nil, zero value otherwise.
    code: func (t *TreeEntry) GetSHA() string
    source:
      file: /src/github/github-accessors.go
      line: 9536
  - name: GetSize
    summary: GetSize returns the Size field if it's non-nil, zero value otherwise.
    description: |
      GetSize returns the Size field if it's non-nil, zero value otherwise.
    code: func (t *TreeEntry) GetSize() int
    source:
      file: /src/github/github-accessors.go
      line: 9544
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (t *TreeEntry) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 9552
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (t *TreeEntry) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9560
  - name: String
    summary: ""
    description: ""
    code: func (t TreeEntry) String() string
    source:
      file: /src/github/git_trees.go
      line: 36
  source:
    file: /src/github/git_trees.go
    line: 26
- name: TwoFactorAuthError
  summary: TwoFactorAuthError occurs when using HTTP Basic Authentication for a user
    that has two-factor authentication enabled.
  description: |
    TwoFactorAuthError occurs when using HTTP Basic Authentication for a user that has two-factor authentication enabled. The request can be reattempted by providing a one-time password in the request.
  code: type TwoFactorAuthError ErrorResponse
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Error
    summary: ""
    description: ""
    code: func (r *TwoFactorAuthError) Error() string
    source:
      file: /src/github/github.go
      line: 572
  source:
    file: /src/github/github.go
    line: 570
- name: UnauthenticatedRateLimitedTransport
  summary: UnauthenticatedRateLimitedTransport allows you to make unauthenticated
    calls that need to use a higher rate limit associated with your OAuth application.
  description: "UnauthenticatedRateLimitedTransport allows you to make unauthenticated
    calls that need to use a higher rate limit associated with your OAuth application.\n\n
    \   t := &github.UnauthenticatedRateLimitedTransport{\n    \tClientID:     \"your
    app's client ID\",\n    \tClientSecret: \"your app's client secret\",\n    }\n
    \   client := github.NewClient(t.Client())\n\nThis will append the querystring
    params client_id=xxx&client_secret=yyy to all requests.\n\nSee https://developer.github.com/v3/#unauthenticated-rate-limited-requests
    for more information.\n"
  code: "type UnauthenticatedRateLimitedTransport struct {\n\t// ClientID is the GitHub
    OAuth client ID of the current application, which\n\t// can be found by selecting
    its entry in the list at\n\t// https://github.com/settings/applications.\n\tClientID\tstring\n\n\t//
    ClientSecret is the GitHub OAuth client secret of the current\n\t// application.\n\tClientSecret\tstring\n\n\t//
    Transport is the underlying HTTP transport to use when making requests.\n\t//
    It will default to http.DefaultTransport if nil.\n\tTransport\thttp.RoundTripper\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: Client
    summary: Client returns an *http.Client that makes requests which are subject
      to the rate limit of your OAuth application.
    description: |
      Client returns an *http.Client that makes requests which are subject to the rate limit of your OAuth application.
    code: func (t *UnauthenticatedRateLimitedTransport) Client() *http.Client
    source:
      file: /src/github/github.go
      line: 878
  - name: RoundTrip
    summary: RoundTrip implements the RoundTripper interface.
    description: |
      RoundTrip implements the RoundTripper interface.
    code: func (t *UnauthenticatedRateLimitedTransport) RoundTrip(req *http.Request)
      (*http.Response, error)
    source:
      file: /src/github/github.go
      line: 848
  source:
    file: /src/github/github.go
    line: 832
- name: UploadOptions
  summary: UploadOptions specifies the parameters to methods that support uploads.
  description: |
    UploadOptions specifies the parameters to methods that support uploads.
  code: "type UploadOptions struct {\n\tName string `url:\"name,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/github.go
    line: 173
- name: User
  summary: User represents a GitHub user.
  description: |
    User represents a GitHub user.
  code: "type User struct {\n\tLogin\t\t\t*string\t\t`json:\"login,omitempty\"`\n\tID\t\t\t*int\t\t`json:\"id,omitempty\"`\n\tAvatarURL\t\t*string\t\t`json:\"avatar_url,omitempty\"`\n\tHTMLURL\t\t\t*string\t\t`json:\"html_url,omitempty\"`\n\tGravatarID\t\t*string\t\t`json:\"gravatar_id,omitempty\"`\n\tName\t\t\t*string\t\t`json:\"name,omitempty\"`\n\tCompany\t\t\t*string\t\t`json:\"company,omitempty\"`\n\tBlog\t\t\t*string\t\t`json:\"blog,omitempty\"`\n\tLocation\t\t*string\t\t`json:\"location,omitempty\"`\n\tEmail\t\t\t*string\t\t`json:\"email,omitempty\"`\n\tHireable\t\t*bool\t\t`json:\"hireable,omitempty\"`\n\tBio\t\t\t*string\t\t`json:\"bio,omitempty\"`\n\tPublicRepos\t\t*int\t\t`json:\"public_repos,omitempty\"`\n\tPublicGists\t\t*int\t\t`json:\"public_gists,omitempty\"`\n\tFollowers\t\t*int\t\t`json:\"followers,omitempty\"`\n\tFollowing\t\t*int\t\t`json:\"following,omitempty\"`\n\tCreatedAt\t\t*Timestamp\t`json:\"created_at,omitempty\"`\n\tUpdatedAt\t\t*Timestamp\t`json:\"updated_at,omitempty\"`\n\tSuspendedAt\t\t*Timestamp\t`json:\"suspended_at,omitempty\"`\n\tType\t\t\t*string\t\t`json:\"type,omitempty\"`\n\tSiteAdmin\t\t*bool\t\t`json:\"site_admin,omitempty\"`\n\tTotalPrivateRepos\t*int\t\t`json:\"total_private_repos,omitempty\"`\n\tOwnedPrivateRepos\t*int\t\t`json:\"owned_private_repos,omitempty\"`\n\tPrivateGists\t\t*int\t\t`json:\"private_gists,omitempty\"`\n\tDiskUsage\t\t*int\t\t`json:\"disk_usage,omitempty\"`\n\tCollaborators\t\t*int\t\t`json:\"collaborators,omitempty\"`\n\tPlan\t\t\t*Plan\t\t`json:\"plan,omitempty\"`\n\n\t//
    API URLs\n\tURL\t\t\t*string\t`json:\"url,omitempty\"`\n\tEventsURL\t\t*string\t`json:\"events_url,omitempty\"`\n\tFollowingURL\t\t*string\t`json:\"following_url,omitempty\"`\n\tFollowersURL\t\t*string\t`json:\"followers_url,omitempty\"`\n\tGistsURL\t\t*string\t`json:\"gists_url,omitempty\"`\n\tOrganizationsURL\t*string\t`json:\"organizations_url,omitempty\"`\n\tReceivedEventsURL\t*string\t`json:\"received_events_url,omitempty\"`\n\tReposURL\t\t*string\t`json:\"repos_url,omitempty\"`\n\tStarredURL\t\t*string\t`json:\"starred_url,omitempty\"`\n\tSubscriptionsURL\t*string\t`json:\"subscriptions_url,omitempty\"`\n\n\t//
    TextMatches is only populated from search results that request text matches\n\t//
    See: search.go and https://developer.github.com/v3/search/#text-match-metadata\n\tTextMatches\t[]TextMatch\t`json:\"text_matches,omitempty\"`\n\n\t//
    Permissions identifies the permissions that a user has on a given\n\t// repository.
    This is only populated when calling Repositories.ListCollaborators.\n\tPermissions\t*map[string]bool\t`json:\"permissions,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAvatarURL
    summary: GetAvatarURL returns the AvatarURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetAvatarURL returns the AvatarURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetAvatarURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9568
  - name: GetBio
    summary: GetBio returns the Bio field if it's non-nil, zero value otherwise.
    description: |
      GetBio returns the Bio field if it's non-nil, zero value otherwise.
    code: func (u *User) GetBio() string
    source:
      file: /src/github/github-accessors.go
      line: 9576
  - name: GetBlog
    summary: GetBlog returns the Blog field if it's non-nil, zero value otherwise.
    description: |
      GetBlog returns the Blog field if it's non-nil, zero value otherwise.
    code: func (u *User) GetBlog() string
    source:
      file: /src/github/github-accessors.go
      line: 9584
  - name: GetCollaborators
    summary: GetCollaborators returns the Collaborators field if it's non-nil, zero
      value otherwise.
    description: |
      GetCollaborators returns the Collaborators field if it's non-nil, zero value otherwise.
    code: func (u *User) GetCollaborators() int
    source:
      file: /src/github/github-accessors.go
      line: 9592
  - name: GetCompany
    summary: GetCompany returns the Company field if it's non-nil, zero value otherwise.
    description: |
      GetCompany returns the Company field if it's non-nil, zero value otherwise.
    code: func (u *User) GetCompany() string
    source:
      file: /src/github/github-accessors.go
      line: 9600
  - name: GetCreatedAt
    summary: GetCreatedAt returns the CreatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
    code: func (u *User) GetCreatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 9608
  - name: GetDiskUsage
    summary: GetDiskUsage returns the DiskUsage field if it's non-nil, zero value
      otherwise.
    description: |
      GetDiskUsage returns the DiskUsage field if it's non-nil, zero value otherwise.
    code: func (u *User) GetDiskUsage() int
    source:
      file: /src/github/github-accessors.go
      line: 9616
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (u *User) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 9624
  - name: GetEventsURL
    summary: GetEventsURL returns the EventsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetEventsURL returns the EventsURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9632
  - name: GetFollowers
    summary: GetFollowers returns the Followers field if it's non-nil, zero value
      otherwise.
    description: |
      GetFollowers returns the Followers field if it's non-nil, zero value otherwise.
    code: func (u *User) GetFollowers() int
    source:
      file: /src/github/github-accessors.go
      line: 9640
  - name: GetFollowersURL
    summary: GetFollowersURL returns the FollowersURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetFollowersURL returns the FollowersURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetFollowersURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9648
  - name: GetFollowing
    summary: GetFollowing returns the Following field if it's non-nil, zero value
      otherwise.
    description: |
      GetFollowing returns the Following field if it's non-nil, zero value otherwise.
    code: func (u *User) GetFollowing() int
    source:
      file: /src/github/github-accessors.go
      line: 9656
  - name: GetFollowingURL
    summary: GetFollowingURL returns the FollowingURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetFollowingURL returns the FollowingURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetFollowingURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9664
  - name: GetGistsURL
    summary: GetGistsURL returns the GistsURL field if it's non-nil, zero value otherwise.
    description: |
      GetGistsURL returns the GistsURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetGistsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9672
  - name: GetGravatarID
    summary: GetGravatarID returns the GravatarID field if it's non-nil, zero value
      otherwise.
    description: |
      GetGravatarID returns the GravatarID field if it's non-nil, zero value otherwise.
    code: func (u *User) GetGravatarID() string
    source:
      file: /src/github/github-accessors.go
      line: 9680
  - name: GetHTMLURL
    summary: GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    description: |
      GetHTMLURL returns the HTMLURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetHTMLURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9696
  - name: GetHireable
    summary: GetHireable returns the Hireable field if it's non-nil, zero value otherwise.
    description: |
      GetHireable returns the Hireable field if it's non-nil, zero value otherwise.
    code: func (u *User) GetHireable() bool
    source:
      file: /src/github/github-accessors.go
      line: 9688
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (u *User) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 9704
  - name: GetLocation
    summary: GetLocation returns the Location field if it's non-nil, zero value otherwise.
    description: |
      GetLocation returns the Location field if it's non-nil, zero value otherwise.
    code: func (u *User) GetLocation() string
    source:
      file: /src/github/github-accessors.go
      line: 9712
  - name: GetLogin
    summary: GetLogin returns the Login field if it's non-nil, zero value otherwise.
    description: |
      GetLogin returns the Login field if it's non-nil, zero value otherwise.
    code: func (u *User) GetLogin() string
    source:
      file: /src/github/github-accessors.go
      line: 9720
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (u *User) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 9728
  - name: GetOrganizationsURL
    summary: GetOrganizationsURL returns the OrganizationsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetOrganizationsURL returns the OrganizationsURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetOrganizationsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9736
  - name: GetOwnedPrivateRepos
    summary: GetOwnedPrivateRepos returns the OwnedPrivateRepos field if it's non-nil,
      zero value otherwise.
    description: |
      GetOwnedPrivateRepos returns the OwnedPrivateRepos field if it's non-nil, zero value otherwise.
    code: func (u *User) GetOwnedPrivateRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 9744
  - name: GetPermissions
    summary: GetPermissions returns the Permissions field if it's non-nil, zero value
      otherwise.
    description: |
      GetPermissions returns the Permissions field if it's non-nil, zero value otherwise.
    code: func (u *User) GetPermissions() map[string]bool
    source:
      file: /src/github/github-accessors.go
      line: 9752
  - name: GetPlan
    summary: GetPlan returns the Plan field.
    description: |
      GetPlan returns the Plan field.
    code: func (u *User) GetPlan() *Plan
    source:
      file: /src/github/github-accessors.go
      line: 9760
  - name: GetPrivateGists
    summary: GetPrivateGists returns the PrivateGists field if it's non-nil, zero
      value otherwise.
    description: |
      GetPrivateGists returns the PrivateGists field if it's non-nil, zero value otherwise.
    code: func (u *User) GetPrivateGists() int
    source:
      file: /src/github/github-accessors.go
      line: 9768
  - name: GetPublicGists
    summary: GetPublicGists returns the PublicGists field if it's non-nil, zero value
      otherwise.
    description: |
      GetPublicGists returns the PublicGists field if it's non-nil, zero value otherwise.
    code: func (u *User) GetPublicGists() int
    source:
      file: /src/github/github-accessors.go
      line: 9776
  - name: GetPublicRepos
    summary: GetPublicRepos returns the PublicRepos field if it's non-nil, zero value
      otherwise.
    description: |
      GetPublicRepos returns the PublicRepos field if it's non-nil, zero value otherwise.
    code: func (u *User) GetPublicRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 9784
  - name: GetReceivedEventsURL
    summary: GetReceivedEventsURL returns the ReceivedEventsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetReceivedEventsURL returns the ReceivedEventsURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetReceivedEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9792
  - name: GetReposURL
    summary: GetReposURL returns the ReposURL field if it's non-nil, zero value otherwise.
    description: |
      GetReposURL returns the ReposURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetReposURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9800
  - name: GetSiteAdmin
    summary: GetSiteAdmin returns the SiteAdmin field if it's non-nil, zero value
      otherwise.
    description: |
      GetSiteAdmin returns the SiteAdmin field if it's non-nil, zero value otherwise.
    code: func (u *User) GetSiteAdmin() bool
    source:
      file: /src/github/github-accessors.go
      line: 9808
  - name: GetStarredURL
    summary: GetStarredURL returns the StarredURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetStarredURL returns the StarredURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetStarredURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9816
  - name: GetSubscriptionsURL
    summary: GetSubscriptionsURL returns the SubscriptionsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetSubscriptionsURL returns the SubscriptionsURL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetSubscriptionsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9824
  - name: GetSuspendedAt
    summary: GetSuspendedAt returns the SuspendedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetSuspendedAt returns the SuspendedAt field if it's non-nil, zero value otherwise.
    code: func (u *User) GetSuspendedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 9832
  - name: GetTotalPrivateRepos
    summary: GetTotalPrivateRepos returns the TotalPrivateRepos field if it's non-nil,
      zero value otherwise.
    description: |
      GetTotalPrivateRepos returns the TotalPrivateRepos field if it's non-nil, zero value otherwise.
    code: func (u *User) GetTotalPrivateRepos() int
    source:
      file: /src/github/github-accessors.go
      line: 9840
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (u *User) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 9848
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (u *User) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9864
  - name: GetUpdatedAt
    summary: GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value
      otherwise.
    description: |
      GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
    code: func (u *User) GetUpdatedAt() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 9856
  - name: String
    summary: ""
    description: ""
    code: func (u User) String() string
    source:
      file: /src/github/users.go
      line: 70
  source:
    file: /src/github/users.go
    line: 20
- name: UserEmail
  summary: UserEmail represents user's email address
  description: |
    UserEmail represents user's email address
  code: "type UserEmail struct {\n\tEmail\t\t*string\t`json:\"email,omitempty\"`\n\tPrimary\t\t*bool\t`json:\"primary,omitempty\"`\n\tVerified\t*bool\t`json:\"verified,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (u *UserEmail) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 9872
  - name: GetPrimary
    summary: GetPrimary returns the Primary field if it's non-nil, zero value otherwise.
    description: |
      GetPrimary returns the Primary field if it's non-nil, zero value otherwise.
    code: func (u *UserEmail) GetPrimary() bool
    source:
      file: /src/github/github-accessors.go
      line: 9880
  - name: GetVerified
    summary: GetVerified returns the Verified field if it's non-nil, zero value otherwise.
    description: |
      GetVerified returns the Verified field if it's non-nil, zero value otherwise.
    code: func (u *UserEmail) GetVerified() bool
    source:
      file: /src/github/github-accessors.go
      line: 9888
  source:
    file: /src/github/users_emails.go
    line: 11
- name: UserLDAPMapping
  summary: UserLDAPMapping represents the mapping between a GitHub user and an LDAP
    user.
  description: |
    UserLDAPMapping represents the mapping between a GitHub user and an LDAP user.
  code: "type UserLDAPMapping struct {\n\tID\t\t*int\t`json:\"id,omitempty\"`\n\tLDAPDN\t\t*string\t`json:\"ldap_dn,omitempty\"`\n\tLogin\t\t*string\t`json:\"login,omitempty\"`\n\tAvatarURL\t*string\t`json:\"avatar_url,omitempty\"`\n\tGravatarID\t*string\t`json:\"gravatar_id,omitempty\"`\n\tType\t\t*string\t`json:\"type,omitempty\"`\n\tSiteAdmin\t*bool\t`json:\"site_admin,omitempty\"`\n\n\tURL\t\t\t*string\t`json:\"url,omitempty\"`\n\tEventsURL\t\t*string\t`json:\"events_url,omitempty\"`\n\tFollowingURL\t\t*string\t`json:\"following_url,omitempty\"`\n\tFollowersURL\t\t*string\t`json:\"followers_url,omitempty\"`\n\tGistsURL\t\t*string\t`json:\"gists_url,omitempty\"`\n\tOrganizationsURL\t*string\t`json:\"organizations_url,omitempty\"`\n\tReceivedEventsURL\t*string\t`json:\"received_events_url,omitempty\"`\n\tReposURL\t\t*string\t`json:\"repos_url,omitempty\"`\n\tStarredURL\t\t*string\t`json:\"starred_url,omitempty\"`\n\tSubscriptionsURL\t*string\t`json:\"subscriptions_url,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAvatarURL
    summary: GetAvatarURL returns the AvatarURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetAvatarURL returns the AvatarURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetAvatarURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9896
  - name: GetEventsURL
    summary: GetEventsURL returns the EventsURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetEventsURL returns the EventsURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9904
  - name: GetFollowersURL
    summary: GetFollowersURL returns the FollowersURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetFollowersURL returns the FollowersURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetFollowersURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9912
  - name: GetFollowingURL
    summary: GetFollowingURL returns the FollowingURL field if it's non-nil, zero
      value otherwise.
    description: |
      GetFollowingURL returns the FollowingURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetFollowingURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9920
  - name: GetGistsURL
    summary: GetGistsURL returns the GistsURL field if it's non-nil, zero value otherwise.
    description: |
      GetGistsURL returns the GistsURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetGistsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9928
  - name: GetGravatarID
    summary: GetGravatarID returns the GravatarID field if it's non-nil, zero value
      otherwise.
    description: |
      GetGravatarID returns the GravatarID field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetGravatarID() string
    source:
      file: /src/github/github-accessors.go
      line: 9936
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetID() int
    source:
      file: /src/github/github-accessors.go
      line: 9944
  - name: GetLDAPDN
    summary: GetLDAPDN returns the LDAPDN field if it's non-nil, zero value otherwise.
    description: |
      GetLDAPDN returns the LDAPDN field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetLDAPDN() string
    source:
      file: /src/github/github-accessors.go
      line: 9952
  - name: GetLogin
    summary: GetLogin returns the Login field if it's non-nil, zero value otherwise.
    description: |
      GetLogin returns the Login field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetLogin() string
    source:
      file: /src/github/github-accessors.go
      line: 9960
  - name: GetOrganizationsURL
    summary: GetOrganizationsURL returns the OrganizationsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetOrganizationsURL returns the OrganizationsURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetOrganizationsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9968
  - name: GetReceivedEventsURL
    summary: GetReceivedEventsURL returns the ReceivedEventsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetReceivedEventsURL returns the ReceivedEventsURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetReceivedEventsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9976
  - name: GetReposURL
    summary: GetReposURL returns the ReposURL field if it's non-nil, zero value otherwise.
    description: |
      GetReposURL returns the ReposURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetReposURL() string
    source:
      file: /src/github/github-accessors.go
      line: 9984
  - name: GetSiteAdmin
    summary: GetSiteAdmin returns the SiteAdmin field if it's non-nil, zero value
      otherwise.
    description: |
      GetSiteAdmin returns the SiteAdmin field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetSiteAdmin() bool
    source:
      file: /src/github/github-accessors.go
      line: 9992
  - name: GetStarredURL
    summary: GetStarredURL returns the StarredURL field if it's non-nil, zero value
      otherwise.
    description: |
      GetStarredURL returns the StarredURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetStarredURL() string
    source:
      file: /src/github/github-accessors.go
      line: 10000
  - name: GetSubscriptionsURL
    summary: GetSubscriptionsURL returns the SubscriptionsURL field if it's non-nil,
      zero value otherwise.
    description: |
      GetSubscriptionsURL returns the SubscriptionsURL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetSubscriptionsURL() string
    source:
      file: /src/github/github-accessors.go
      line: 10008
  - name: GetType
    summary: GetType returns the Type field if it's non-nil, zero value otherwise.
    description: |
      GetType returns the Type field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetType() string
    source:
      file: /src/github/github-accessors.go
      line: 10016
  - name: GetURL
    summary: GetURL returns the URL field if it's non-nil, zero value otherwise.
    description: |
      GetURL returns the URL field if it's non-nil, zero value otherwise.
    code: func (u *UserLDAPMapping) GetURL() string
    source:
      file: /src/github/github-accessors.go
      line: 10024
  - name: String
    summary: ""
    description: ""
    code: func (m UserLDAPMapping) String() string
    source:
      file: /src/github/admin.go
      line: 61
  source:
    file: /src/github/admin.go
    line: 40
- name: UserListOptions
  summary: UserListOptions specifies optional parameters to the UsersService.ListAll
    method.
  description: |
    UserListOptions specifies optional parameters to the UsersService.ListAll method.
  code: "type UserListOptions struct {\n\t// ID of the last user seen\n\tSince\tint\t`url:\"since,omitempty\"`\n\n\tListOptions\n}"
  consts: []
  vars: []
  funcs: []
  methods: []
  source:
    file: /src/github/users.go
    line: 139
- name: UserStats
  summary: UserStats represents the number of total, admin and suspended users.
  description: |
    UserStats represents the number of total, admin and suspended users.
  code: "type UserStats struct {\n\tTotalUsers\t*int\t`json:\"total_users,omitempty\"`\n\tAdminUsers\t*int\t`json:\"admin_users,omitempty\"`\n\tSuspendedUsers\t*int\t`json:\"suspended_users,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAdminUsers
    summary: GetAdminUsers returns the AdminUsers field if it's non-nil, zero value
      otherwise.
    description: |
      GetAdminUsers returns the AdminUsers field if it's non-nil, zero value otherwise.
    code: func (u *UserStats) GetAdminUsers() int
    source:
      file: /src/github/github-accessors.go
      line: 10048
  - name: GetSuspendedUsers
    summary: GetSuspendedUsers returns the SuspendedUsers field if it's non-nil, zero
      value otherwise.
    description: |
      GetSuspendedUsers returns the SuspendedUsers field if it's non-nil, zero value otherwise.
    code: func (u *UserStats) GetSuspendedUsers() int
    source:
      file: /src/github/github-accessors.go
      line: 10056
  - name: GetTotalUsers
    summary: GetTotalUsers returns the TotalUsers field if it's non-nil, zero value
      otherwise.
    description: |
      GetTotalUsers returns the TotalUsers field if it's non-nil, zero value otherwise.
    code: func (u *UserStats) GetTotalUsers() int
    source:
      file: /src/github/github-accessors.go
      line: 10064
  - name: String
    summary: ""
    description: ""
    code: func (s UserStats) String() string
    source:
      file: /src/github/admin_stats.go
      line: 107
  source:
    file: /src/github/admin_stats.go
    line: 101
- name: UsersSearchResult
  summary: UsersSearchResult represents the result of a users search.
  description: |
    UsersSearchResult represents the result of a users search.
  code: "type UsersSearchResult struct {\n\tTotal\t\t\t*int\t`json:\"total_count,omitempty\"`\n\tIncompleteResults\t*bool\t`json:\"incomplete_results,omitempty\"`\n\tUsers\t\t\t[]User\t`json:\"items,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetIncompleteResults
    summary: GetIncompleteResults returns the IncompleteResults field if it's non-nil,
      zero value otherwise.
    description: |
      GetIncompleteResults returns the IncompleteResults field if it's non-nil, zero value otherwise.
    code: func (u *UsersSearchResult) GetIncompleteResults() bool
    source:
      file: /src/github/github-accessors.go
      line: 10032
  - name: GetTotal
    summary: GetTotal returns the Total field if it's non-nil, zero value otherwise.
    description: |
      GetTotal returns the Total field if it's non-nil, zero value otherwise.
    code: func (u *UsersSearchResult) GetTotal() int
    source:
      file: /src/github/github-accessors.go
      line: 10040
  source:
    file: /src/github/search.go
    line: 115
- name: UsersService
  summary: UsersService handles communication with the user related methods of the
    GitHub API.
  description: |
    UsersService handles communication with the user related methods of the GitHub API.

    GitHub API docs: https://developer.github.com/v3/users/
  code: type UsersService service
  consts: []
  vars: []
  funcs: []
  methods:
  - name: AcceptInvitation
    summary: AcceptInvitation accepts the currently-open repository invitation for
      the authenticated user.
    description: |
      AcceptInvitation accepts the currently-open repository invitation for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation
    code: func (s *UsersService) AcceptInvitation(ctx context.Context, invitationID
      int) (*Response, error)
    source:
      file: /src/github/users.go
      line: 202
  - name: AddEmails
    summary: AddEmails adds email addresses of the authenticated user.
    description: |
      AddEmails adds email addresses of the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/emails/#add-email-addresses
    code: func (s *UsersService) AddEmails(ctx context.Context, emails []string) ([]*UserEmail,
      *Response, error)
    source:
      file: /src/github/users_emails.go
      line: 44
  - name: BlockUser
    summary: BlockUser blocks specified user for the authenticated user.
    description: |
      BlockUser blocks specified user for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/blocking/#block-a-user
    code: func (s *UsersService) BlockUser(ctx context.Context, user string) (*Response,
      error)
    source:
      file: /src/github/users_blocking.go
      line: 62
  - name: CreateGPGKey
    summary: CreateGPGKey creates a GPG key.
    description: |
      CreateGPGKey creates a GPG key. It requires authenticatation via Basic Auth or OAuth with at least write:gpg_key scope.

      GitHub API docs: https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key
    code: func (s *UsersService) CreateGPGKey(ctx context.Context, armoredPublicKey
      string) (*GPGKey, *Response, error)
    source:
      file: /src/github/users_gpg_keys.go
      line: 104
  - name: CreateKey
    summary: CreateKey adds a public key for the authenticated user.
    description: |
      CreateKey adds a public key for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/keys/#create-a-public-key
    code: func (s *UsersService) CreateKey(ctx context.Context, key *Key) (*Key, *Response,
      error)
    source:
      file: /src/github/users_keys.go
      line: 79
  - name: DeclineInvitation
    summary: DeclineInvitation declines the currently-open repository invitation for
      the authenticated user.
    description: |
      DeclineInvitation declines the currently-open repository invitation for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation
    code: func (s *UsersService) DeclineInvitation(ctx context.Context, invitationID
      int) (*Response, error)
    source:
      file: /src/github/users.go
      line: 219
  - name: DeleteEmails
    summary: DeleteEmails deletes email addresses from authenticated user.
    description: |
      DeleteEmails deletes email addresses from authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/emails/#delete-email-addresses
    code: func (s *UsersService) DeleteEmails(ctx context.Context, emails []string)
      (*Response, error)
    source:
      file: /src/github/users_emails.go
      line: 63
  - name: DeleteGPGKey
    summary: DeleteGPGKey deletes a GPG key.
    description: |
      DeleteGPGKey deletes a GPG key. It requires authentication via Basic Auth or via OAuth with at least admin:gpg_key scope.

      GitHub API docs: https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key
    code: func (s *UsersService) DeleteGPGKey(ctx context.Context, id int) (*Response,
      error)
    source:
      file: /src/github/users_gpg_keys.go
      line: 129
  - name: DeleteKey
    summary: DeleteKey deletes a public key.
    description: |
      DeleteKey deletes a public key.

      GitHub API docs: https://developer.github.com/v3/users/keys/#delete-a-public-key
    code: func (s *UsersService) DeleteKey(ctx context.Context, id int) (*Response,
      error)
    source:
      file: /src/github/users_keys.go
      line: 99
  - name: DemoteSiteAdmin
    summary: DemoteSiteAdmin demotes a user from site administrator of a GitHub Enterprise
      instance.
    description: |
      DemoteSiteAdmin demotes a user from site administrator of a GitHub Enterprise instance.

      GitHub API docs: https://developer.github.com/v3/users/administration/#demote-a-site-administrator-to-an-ordinary-user
    code: func (s *UsersService) DemoteSiteAdmin(ctx context.Context, user string)
      (*Response, error)
    source:
      file: /src/github/users_administration.go
      line: 30
  - name: Edit
    summary: Edit the authenticated user.
    description: |
      Edit the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/#update-the-authenticated-user
    code: func (s *UsersService) Edit(ctx context.Context, user *User) (*User, *Response,
      error)
    source:
      file: /src/github/users.go
      line: 121
  - name: Follow
    summary: Follow will cause the authenticated user to follow the specified user.
    description: |
      Follow will cause the authenticated user to follow the specified user.

      GitHub API docs: https://developer.github.com/v3/users/followers/#follow-a-user
    code: func (s *UsersService) Follow(ctx context.Context, user string) (*Response,
      error)
    source:
      file: /src/github/users_followers.go
      line: 98
  - name: Get
    summary: Get fetches a user.
    description: |
      Get fetches a user. Passing the empty string will fetch the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/#get-a-single-user
    code: func (s *UsersService) Get(ctx context.Context, user string) (*User, *Response,
      error)
    source:
      file: /src/github/users.go
      line: 78
  - name: GetByID
    summary: GetByID fetches a user.
    description: |
      GetByID fetches a user.

      Note: GetByID uses the undocumented GitHub API endpoint /user/:id.
    code: func (s *UsersService) GetByID(ctx context.Context, id int) (*User, *Response,
      error)
    source:
      file: /src/github/users.go
      line: 102
  - name: GetGPGKey
    summary: GetGPGKey gets extended details for a single GPG key.
    description: |
      GetGPGKey gets extended details for a single GPG key. It requires authentication via Basic Auth or via OAuth with at least read:gpg_key scope.

      GitHub API docs: https://developer.github.com/v3/users/gpg_keys/#get-a-single-gpg-key
    code: func (s *UsersService) GetGPGKey(ctx context.Context, id int) (*GPGKey,
      *Response, error)
    source:
      file: /src/github/users_gpg_keys.go
      line: 81
  - name: GetKey
    summary: GetKey fetches a single public key.
    description: |
      GetKey fetches a single public key.

      GitHub API docs: https://developer.github.com/v3/users/keys/#get-a-single-public-key
    code: func (s *UsersService) GetKey(ctx context.Context, id int) (*Key, *Response,
      error)
    source:
      file: /src/github/users_keys.go
      line: 59
  - name: IsBlocked
    summary: IsBlocked reports whether specified user is blocked by the authenticated
      user.
    description: |
      IsBlocked reports whether specified user is blocked by the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/blocking/#check-whether-youve-blocked-a-user
    code: func (s *UsersService) IsBlocked(ctx context.Context, user string) (bool,
      *Response, error)
    source:
      file: /src/github/users_blocking.go
      line: 43
  - name: IsFollowing
    summary: IsFollowing checks if "user" is following "target".
    description: |
      IsFollowing checks if "user" is following "target". Passing the empty string for "user" will check if the authenticated user is following "target".

      GitHub API docs: https://developer.github.com/v3/users/followers/#check-if-you-are-following-a-user
    code: func (s *UsersService) IsFollowing(ctx context.Context, user, target string)
      (bool, *Response, error)
    source:
      file: /src/github/users_followers.go
      line: 77
  - name: ListAll
    summary: ListAll lists all GitHub users.
    description: |
      ListAll lists all GitHub users.

      To paginate through all users, populate 'Since' with the ID of the last user.

      GitHub API docs: https://developer.github.com/v3/users/#get-all-users
    code: func (s *UsersService) ListAll(ctx context.Context, opt *UserListOptions)
      ([]*User, *Response, error)
    source:
      file: /src/github/users.go
      line: 151
  - name: ListBlockedUsers
    summary: ListBlockedUsers lists all the blocked users by the authenticated user.
    description: |
      ListBlockedUsers lists all the blocked users by the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/blocking/#list-blocked-users
    code: func (s *UsersService) ListBlockedUsers(ctx context.Context, opt *ListOptions)
      ([]*User, *Response, error)
    source:
      file: /src/github/users_blocking.go
      line: 16
  - name: ListEmails
    summary: ListEmails lists all email addresses for the authenticated user.
    description: |
      ListEmails lists all email addresses for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user
    code: func (s *UsersService) ListEmails(ctx context.Context, opt *ListOptions)
      ([]*UserEmail, *Response, error)
    source:
      file: /src/github/users_emails.go
      line: 20
  - name: ListFollowers
    summary: ListFollowers lists the followers for a user.
    description: |
      ListFollowers lists the followers for a user. Passing the empty string will fetch followers for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/followers/#list-followers-of-a-user
    code: func (s *UsersService) ListFollowers(ctx context.Context, user string, opt
      *ListOptions) ([]*User, *Response, error)
    source:
      file: /src/github/users_followers.go
      line: 17
  - name: ListFollowing
    summary: ListFollowing lists the people that a user is following.
    description: |
      ListFollowing lists the people that a user is following. Passing the empty string will list people the authenticated user is following.

      GitHub API docs: https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user
    code: func (s *UsersService) ListFollowing(ctx context.Context, user string, opt
      *ListOptions) ([]*User, *Response, error)
    source:
      file: /src/github/users_followers.go
      line: 47
  - name: ListGPGKeys
    summary: ListGPGKeys lists the public GPG keys for a user.
    description: |
      ListGPGKeys lists the public GPG keys for a user. Passing the empty string will fetch keys for the authenticated user. It requires authentication via Basic Auth or via OAuth with at least read:gpg_key scope.

      GitHub API docs: https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user
    code: func (s *UsersService) ListGPGKeys(ctx context.Context, user string, opt
      *ListOptions) ([]*GPGKey, *Response, error)
    source:
      file: /src/github/users_gpg_keys.go
      line: 48
  - name: ListInvitations
    summary: ListInvitations lists all currently-open repository invitations for the
      authenticated user.
    description: |
      ListInvitations lists all currently-open repository invitations for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/repos/invitations/#list-a-users-repository-invitations
    code: func (s *UsersService) ListInvitations(ctx context.Context, opt *ListOptions)
      ([]*RepositoryInvitation, *Response, error)
    source:
      file: /src/github/users.go
      line: 175
  - name: ListKeys
    summary: ListKeys lists the verified public keys for a user.
    description: |
      ListKeys lists the verified public keys for a user. Passing the empty string will fetch keys for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user
    code: func (s *UsersService) ListKeys(ctx context.Context, user string, opt *ListOptions)
      ([]*Key, *Response, error)
    source:
      file: /src/github/users_keys.go
      line: 30
  - name: PromoteSiteAdmin
    summary: PromoteSiteAdmin promotes a user to a site administrator of a GitHub
      Enterprise instance.
    description: |
      PromoteSiteAdmin promotes a user to a site administrator of a GitHub Enterprise instance.

      GitHub API docs: https://developer.github.com/v3/users/administration/#promote-an-ordinary-user-to-a-site-administrator
    code: func (s *UsersService) PromoteSiteAdmin(ctx context.Context, user string)
      (*Response, error)
    source:
      file: /src/github/users_administration.go
      line: 16
  - name: Suspend
    summary: Suspend a user on a GitHub Enterprise instance.
    description: |
      Suspend a user on a GitHub Enterprise instance.

      GitHub API docs: https://developer.github.com/v3/users/administration/#suspend-a-user
    code: func (s *UsersService) Suspend(ctx context.Context, user string) (*Response,
      error)
    source:
      file: /src/github/users_administration.go
      line: 44
  - name: UnblockUser
    summary: UnblockUser unblocks specified user for the authenticated user.
    description: |
      UnblockUser unblocks specified user for the authenticated user.

      GitHub API docs: https://developer.github.com/v3/users/blocking/#unblock-a-user
    code: func (s *UsersService) UnblockUser(ctx context.Context, user string) (*Response,
      error)
    source:
      file: /src/github/users_blocking.go
      line: 79
  - name: Unfollow
    summary: Unfollow will cause the authenticated user to unfollow the specified
      user.
    description: |
      Unfollow will cause the authenticated user to unfollow the specified user.

      GitHub API docs: https://developer.github.com/v3/users/followers/#unfollow-a-user
    code: func (s *UsersService) Unfollow(ctx context.Context, user string) (*Response,
      error)
    source:
      file: /src/github/users_followers.go
      line: 111
  - name: Unsuspend
    summary: Unsuspend a user on a GitHub Enterprise instance.
    description: |
      Unsuspend a user on a GitHub Enterprise instance.

      GitHub API docs: https://developer.github.com/v3/users/administration/#unsuspend-a-user
    code: func (s *UsersService) Unsuspend(ctx context.Context, user string) (*Response,
      error)
    source:
      file: /src/github/users_administration.go
      line: 58
  source:
    file: /src/github/users.go
    line: 17
- name: WatchEvent
  summary: WatchEvent is related to starring a repository, not watching.
  description: |
    WatchEvent is related to starring a repository, not watching. See this API blog post for an explanation: https://developer.github.com/changes/2012-09-05-watcher-api/

    The event’s actor is the user who starred a repository, and the event’s repository is the repository that was starred.

    GitHub API docs: https://developer.github.com/v3/activity/events/types/#watchevent
  code: "type WatchEvent struct {\n\t// Action is the action that was performed. Possible
    value is: \"started\".\n\tAction\t*string\t`json:\"action,omitempty\"`\n\n\t//
    The following fields are only populated by Webhook events.\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n\tInstallation\t*Installation\t`json:\"installation,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAction
    summary: GetAction returns the Action field if it's non-nil, zero value otherwise.
    description: |
      GetAction returns the Action field if it's non-nil, zero value otherwise.
    code: func (w *WatchEvent) GetAction() string
    source:
      file: /src/github/github-accessors.go
      line: 10072
  - name: GetInstallation
    summary: GetInstallation returns the Installation field.
    description: |
      GetInstallation returns the Installation field.
    code: func (w *WatchEvent) GetInstallation() *Installation
    source:
      file: /src/github/github-accessors.go
      line: 10080
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (w *WatchEvent) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 10088
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (w *WatchEvent) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 10096
  source:
    file: /src/github/event_types.go
    line: 740
- name: WebHookAuthor
  summary: WebHookAuthor represents the author or committer of a commit, as specified
    in a WebHookCommit.
  description: |
    WebHookAuthor represents the author or committer of a commit, as specified in a WebHookCommit. The commit author may not correspond to a GitHub User.
  code: "type WebHookAuthor struct {\n\tEmail\t\t*string\t`json:\"email,omitempty\"`\n\tName\t\t*string\t`json:\"name,omitempty\"`\n\tUsername\t*string\t`json:\"username,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetEmail
    summary: GetEmail returns the Email field if it's non-nil, zero value otherwise.
    description: |
      GetEmail returns the Email field if it's non-nil, zero value otherwise.
    code: func (w *WebHookAuthor) GetEmail() string
    source:
      file: /src/github/github-accessors.go
      line: 10104
  - name: GetName
    summary: GetName returns the Name field if it's non-nil, zero value otherwise.
    description: |
      GetName returns the Name field if it's non-nil, zero value otherwise.
    code: func (w *WebHookAuthor) GetName() string
    source:
      file: /src/github/github-accessors.go
      line: 10112
  - name: GetUsername
    summary: GetUsername returns the Username field if it's non-nil, zero value otherwise.
    description: |
      GetUsername returns the Username field if it's non-nil, zero value otherwise.
    code: func (w *WebHookAuthor) GetUsername() string
    source:
      file: /src/github/github-accessors.go
      line: 10120
  - name: String
    summary: ""
    description: ""
    code: func (w WebHookAuthor) String() string
    source:
      file: /src/github/repos_hooks.go
      line: 66
  source:
    file: /src/github/repos_hooks.go
    line: 60
- name: WebHookCommit
  summary: WebHookCommit represents the commit variant we receive from GitHub in a
    WebHookPayload.
  description: |
    WebHookCommit represents the commit variant we receive from GitHub in a WebHookPayload.
  code: "type WebHookCommit struct {\n\tAdded\t\t[]string\t`json:\"added,omitempty\"`\n\tAuthor\t\t*WebHookAuthor\t`json:\"author,omitempty\"`\n\tCommitter\t*WebHookAuthor\t`json:\"committer,omitempty\"`\n\tDistinct\t*bool\t\t`json:\"distinct,omitempty\"`\n\tID\t\t*string\t\t`json:\"id,omitempty\"`\n\tMessage\t\t*string\t\t`json:\"message,omitempty\"`\n\tModified\t[]string\t`json:\"modified,omitempty\"`\n\tRemoved\t\t[]string\t`json:\"removed,omitempty\"`\n\tTimestamp\t*time.Time\t`json:\"timestamp,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAuthor
    summary: GetAuthor returns the Author field.
    description: |
      GetAuthor returns the Author field.
    code: func (w *WebHookCommit) GetAuthor() *WebHookAuthor
    source:
      file: /src/github/github-accessors.go
      line: 10128
  - name: GetCommitter
    summary: GetCommitter returns the Committer field.
    description: |
      GetCommitter returns the Committer field.
    code: func (w *WebHookCommit) GetCommitter() *WebHookAuthor
    source:
      file: /src/github/github-accessors.go
      line: 10136
  - name: GetDistinct
    summary: GetDistinct returns the Distinct field if it's non-nil, zero value otherwise.
    description: |
      GetDistinct returns the Distinct field if it's non-nil, zero value otherwise.
    code: func (w *WebHookCommit) GetDistinct() bool
    source:
      file: /src/github/github-accessors.go
      line: 10144
  - name: GetID
    summary: GetID returns the ID field if it's non-nil, zero value otherwise.
    description: |
      GetID returns the ID field if it's non-nil, zero value otherwise.
    code: func (w *WebHookCommit) GetID() string
    source:
      file: /src/github/github-accessors.go
      line: 10152
  - name: GetMessage
    summary: GetMessage returns the Message field if it's non-nil, zero value otherwise.
    description: |
      GetMessage returns the Message field if it's non-nil, zero value otherwise.
    code: func (w *WebHookCommit) GetMessage() string
    source:
      file: /src/github/github-accessors.go
      line: 10160
  - name: GetTimestamp
    summary: GetTimestamp returns the Timestamp field if it's non-nil, zero value
      otherwise.
    description: |
      GetTimestamp returns the Timestamp field if it's non-nil, zero value otherwise.
    code: func (w *WebHookCommit) GetTimestamp() time.Time
    source:
      file: /src/github/github-accessors.go
      line: 10168
  - name: String
    summary: ""
    description: ""
    code: func (w WebHookCommit) String() string
    source:
      file: /src/github/repos_hooks.go
      line: 54
  source:
    file: /src/github/repos_hooks.go
    line: 42
- name: WebHookPayload
  summary: WebHookPayload represents the data that is received from GitHub when a
    push event hook is triggered.
  description: |
    WebHookPayload represents the data that is received from GitHub when a push event hook is triggered. The format of these payloads pre-date most of the GitHub v3 API, so there are lots of minor incompatibilities with the types defined in the rest of the API. Therefore, several types are duplicated here to account for these differences.

    GitHub API docs: https://help.github.com/articles/post-receive-hooks
  code: "type WebHookPayload struct {\n\tAfter\t\t*string\t\t`json:\"after,omitempty\"`\n\tBefore\t\t*string\t\t`json:\"before,omitempty\"`\n\tCommits\t\t[]WebHookCommit\t`json:\"commits,omitempty\"`\n\tCompare\t\t*string\t\t`json:\"compare,omitempty\"`\n\tCreated\t\t*bool\t\t`json:\"created,omitempty\"`\n\tDeleted\t\t*bool\t\t`json:\"deleted,omitempty\"`\n\tForced\t\t*bool\t\t`json:\"forced,omitempty\"`\n\tHeadCommit\t*WebHookCommit\t`json:\"head_commit,omitempty\"`\n\tPusher\t\t*User\t\t`json:\"pusher,omitempty\"`\n\tRef\t\t*string\t\t`json:\"ref,omitempty\"`\n\tRepo\t\t*Repository\t`json:\"repository,omitempty\"`\n\tSender\t\t*User\t\t`json:\"sender,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAfter
    summary: GetAfter returns the After field if it's non-nil, zero value otherwise.
    description: |
      GetAfter returns the After field if it's non-nil, zero value otherwise.
    code: func (w *WebHookPayload) GetAfter() string
    source:
      file: /src/github/github-accessors.go
      line: 10176
  - name: GetBefore
    summary: GetBefore returns the Before field if it's non-nil, zero value otherwise.
    description: |
      GetBefore returns the Before field if it's non-nil, zero value otherwise.
    code: func (w *WebHookPayload) GetBefore() string
    source:
      file: /src/github/github-accessors.go
      line: 10184
  - name: GetCompare
    summary: GetCompare returns the Compare field if it's non-nil, zero value otherwise.
    description: |
      GetCompare returns the Compare field if it's non-nil, zero value otherwise.
    code: func (w *WebHookPayload) GetCompare() string
    source:
      file: /src/github/github-accessors.go
      line: 10192
  - name: GetCreated
    summary: GetCreated returns the Created field if it's non-nil, zero value otherwise.
    description: |
      GetCreated returns the Created field if it's non-nil, zero value otherwise.
    code: func (w *WebHookPayload) GetCreated() bool
    source:
      file: /src/github/github-accessors.go
      line: 10200
  - name: GetDeleted
    summary: GetDeleted returns the Deleted field if it's non-nil, zero value otherwise.
    description: |
      GetDeleted returns the Deleted field if it's non-nil, zero value otherwise.
    code: func (w *WebHookPayload) GetDeleted() bool
    source:
      file: /src/github/github-accessors.go
      line: 10208
  - name: GetForced
    summary: GetForced returns the Forced field if it's non-nil, zero value otherwise.
    description: |
      GetForced returns the Forced field if it's non-nil, zero value otherwise.
    code: func (w *WebHookPayload) GetForced() bool
    source:
      file: /src/github/github-accessors.go
      line: 10216
  - name: GetHeadCommit
    summary: GetHeadCommit returns the HeadCommit field.
    description: |
      GetHeadCommit returns the HeadCommit field.
    code: func (w *WebHookPayload) GetHeadCommit() *WebHookCommit
    source:
      file: /src/github/github-accessors.go
      line: 10224
  - name: GetPusher
    summary: GetPusher returns the Pusher field.
    description: |
      GetPusher returns the Pusher field.
    code: func (w *WebHookPayload) GetPusher() *User
    source:
      file: /src/github/github-accessors.go
      line: 10232
  - name: GetRef
    summary: GetRef returns the Ref field if it's non-nil, zero value otherwise.
    description: |
      GetRef returns the Ref field if it's non-nil, zero value otherwise.
    code: func (w *WebHookPayload) GetRef() string
    source:
      file: /src/github/github-accessors.go
      line: 10240
  - name: GetRepo
    summary: GetRepo returns the Repo field.
    description: |
      GetRepo returns the Repo field.
    code: func (w *WebHookPayload) GetRepo() *Repository
    source:
      file: /src/github/github-accessors.go
      line: 10248
  - name: GetSender
    summary: GetSender returns the Sender field.
    description: |
      GetSender returns the Sender field.
    code: func (w *WebHookPayload) GetSender() *User
    source:
      file: /src/github/github-accessors.go
      line: 10256
  - name: String
    summary: ""
    description: ""
    code: func (w WebHookPayload) String() string
    source:
      file: /src/github/repos_hooks.go
      line: 36
  source:
    file: /src/github/repos_hooks.go
    line: 21
- name: WeeklyCommitActivity
  summary: WeeklyCommitActivity represents the weekly commit activity for a repository.
  description: |
    WeeklyCommitActivity represents the weekly commit activity for a repository. The days array is a group of commits per day, starting on Sunday.
  code: "type WeeklyCommitActivity struct {\n\tDays\t[]int\t\t`json:\"days,omitempty\"`\n\tTotal\t*int\t\t`json:\"total,omitempty\"`\n\tWeek\t*Timestamp\t`json:\"week,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetTotal
    summary: GetTotal returns the Total field if it's non-nil, zero value otherwise.
    description: |
      GetTotal returns the Total field if it's non-nil, zero value otherwise.
    code: func (w *WeeklyCommitActivity) GetTotal() int
    source:
      file: /src/github/github-accessors.go
      line: 10264
  - name: GetWeek
    summary: GetWeek returns the Week field if it's non-nil, zero value otherwise.
    description: |
      GetWeek returns the Week field if it's non-nil, zero value otherwise.
    code: func (w *WeeklyCommitActivity) GetWeek() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 10272
  - name: String
    summary: ""
    description: ""
    code: func (w WeeklyCommitActivity) String() string
    source:
      file: /src/github/repos_stats.go
      line: 73
  source:
    file: /src/github/repos_stats.go
    line: 67
- name: WeeklyStats
  summary: WeeklyStats represents the number of additions, deletions and commits a
    Contributor made in a given week.
  description: |
    WeeklyStats represents the number of additions, deletions and commits a Contributor made in a given week.
  code: "type WeeklyStats struct {\n\tWeek\t\t*Timestamp\t`json:\"w,omitempty\"`\n\tAdditions\t*int\t\t`json:\"a,omitempty\"`\n\tDeletions\t*int\t\t`json:\"d,omitempty\"`\n\tCommits\t\t*int\t\t`json:\"c,omitempty\"`\n}"
  consts: []
  vars: []
  funcs: []
  methods:
  - name: GetAdditions
    summary: GetAdditions returns the Additions field if it's non-nil, zero value
      otherwise.
    description: |
      GetAdditions returns the Additions field if it's non-nil, zero value otherwise.
    code: func (w *WeeklyStats) GetAdditions() int
    source:
      file: /src/github/github-accessors.go
      line: 10280
  - name: GetCommits
    summary: GetCommits returns the Commits field if it's non-nil, zero value otherwise.
    description: |
      GetCommits returns the Commits field if it's non-nil, zero value otherwise.
    code: func (w *WeeklyStats) GetCommits() int
    source:
      file: /src/github/github-accessors.go
      line: 10288
  - name: GetDeletions
    summary: GetDeletions returns the Deletions field if it's non-nil, zero value
      otherwise.
    description: |
      GetDeletions returns the Deletions field if it's non-nil, zero value otherwise.
    code: func (w *WeeklyStats) GetDeletions() int
    source:
      file: /src/github/github-accessors.go
      line: 10296
  - name: GetWeek
    summary: GetWeek returns the Week field if it's non-nil, zero value otherwise.
    description: |
      GetWeek returns the Week field if it's non-nil, zero value otherwise.
    code: func (w *WeeklyStats) GetWeek() Timestamp
    source:
      file: /src/github/github-accessors.go
      line: 10304
  - name: String
    summary: ""
    description: ""
    code: func (w WeeklyStats) String() string
    source:
      file: /src/github/repos_stats.go
      line: 35
  source:
    file: /src/github/repos_stats.go
    line: 28
vars: []
funcs:
- name: Bool
  summary: Bool is a helper routine that allocates a new bool value to store v and
    returns a pointer to it.
  description: |
    Bool is a helper routine that allocates a new bool value to store v and returns a pointer to it.
  code: func Bool(v bool) *bool
  source:
    file: /src/github/github.go
    line: 965
- name: CheckResponse
  summary: CheckResponse checks the API response for errors, and returns them if present.
  description: |
    CheckResponse checks the API response for errors, and returns them if present. A response is considered an error if it has a status code outside the 200 range or equal to 202 Accepted. API error responses are expected to have either no response body, or a JSON response body that maps to ErrorResponse. Any other response body will be silently ignored.

    The error type will be *RateLimitError for rate limit exceeded errors, *AcceptedError for 202 Accepted status codes, and *TwoFactorAuthError for two-factor authentication errors.
  code: func CheckResponse(r *http.Response) error
  source:
    file: /src/github/github.go
    line: 672
- name: DeliveryID
  summary: DeliveryID returns the unique delivery ID of webhook request r.
  description: |
    DeliveryID returns the unique delivery ID of webhook request r.

    GitHub API docs: https://developer.github.com/v3/repos/hooks/#webhook-headers
  code: func DeliveryID(r *http.Request) string
  source:
    file: /src/github/messages.go
    line: 209
- name: Int
  summary: Int is a helper routine that allocates a new int value to store v and returns
    a pointer to it.
  description: |
    Int is a helper routine that allocates a new int value to store v and returns a pointer to it.
  code: func Int(v int) *int
  source:
    file: /src/github/github.go
    line: 969
- name: ParseWebHook
  summary: ParseWebHook parses the event payload.
  description: |
    ParseWebHook parses the event payload. For recognized event types, a value of the corresponding struct type will be returned (as returned by Event.ParsePayload()). An error will be returned for unrecognized event types.

    Example usage:

        func (s *GitHubEventMonitor) ServeHTTP(w http.ResponseWriter, r *http.Request) {
          payload, err := github.ValidatePayload(r, s.webhookSecretKey)
          if err != nil { ... }
          event, err := github.ParseWebHook(github.WebHookType(r), payload)
          if err != nil { ... }
          switch event := event.(type) {
          case *github.CommitCommentEvent:
              processCommitCommentEvent(event)
          case *github.CreateEvent:
              processCreateEvent(event)
          ...
          }
        }
  code: func ParseWebHook(messageType string, payload []byte) (interface{}, error)
  source:
    file: /src/github/messages.go
    line: 234
- name: String
  summary: String is a helper routine that allocates a new string value to store v
    and returns a pointer to it.
  description: |
    String is a helper routine that allocates a new string value to store v and returns a pointer to it.
  code: func String(v string) *string
  source:
    file: /src/github/github.go
    line: 973
- name: Stringify
  summary: Stringify attempts to create a reasonable string representation of types
    in the GitHub library.
  description: |
    Stringify attempts to create a reasonable string representation of types in the GitHub library. It does things like resolve pointers to their values and omits struct fields with nil values.
  code: func Stringify(message interface{}) string
  source:
    file: /src/github/strings.go
    line: 21
- name: ValidatePayload
  summary: ValidatePayload validates an incoming GitHub Webhook event request and
    returns the (JSON) payload.
  description: |
    ValidatePayload validates an incoming GitHub Webhook event request and returns the (JSON) payload. The Content-Type header of the payload can be "application/json" or "application/x-www-form-urlencoded". If the Content-Type is neither then an error is returned. secretKey is the GitHub Webhook secret message.

    Example usage:

        func (s *GitHubEventMonitor) ServeHTTP(w http.ResponseWriter, r *http.Request) {
          payload, err := github.ValidatePayload(r, s.webhookSecretKey)
          if err != nil { ... }
          // Process payload...
        }
  code: func ValidatePayload(r *http.Request, secretKey []byte) (payload []byte, err
    error)
  source:
    file: /src/github/messages.go
    line: 139
- name: WebHookType
  summary: WebHookType returns the event type of webhook request r.
  description: |
    WebHookType returns the event type of webhook request r.

    GitHub API docs: https://developer.github.com/v3/repos/hooks/#webhook-headers
  code: func WebHookType(r *http.Request) string
  source:
    file: /src/github/messages.go
    line: 202
notes: {}
examples:
- name: Client_Markdown
  code: "{\n\tclient := github.NewClient(nil)\n\n\tinput := \"# heading #\\n\\nLink
    to issue #1\"\n\topt := &github.MarkdownOptions{Mode: \"gfm\", Context: \"google/go-github\"}\n\n\toutput,
    _, err := client.Markdown(context.Background(), input, opt)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Println(output)\n}"
- name: RepositoriesService_GetReadme
  code: "{\n\tclient := github.NewClient(nil)\n\n\treadme, _, err := client.Repositories.GetReadme(context.Background(),
    \"google\", \"go-github\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tcontent,
    err := readme.GetContent()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"google/go-github
    README:\\n%v\\n\", content)\n}"
- name: RepositoriesService_List
  code: "{\n\tclient := github.NewClient(nil)\n\n\tuser := \"willnorris\"\n\topt :=
    &github.RepositoryListOptions{Type: \"owner\", Sort: \"updated\", Direction: \"desc\"}\n\n\trepos,
    _, err := client.Repositories.List(context.Background(), user, opt)\n\tif err
    != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Printf(\"Recently updated repositories
    by %q: %v\", user, github.Stringify(repos))\n}"
- name: UsersService_ListAll
  code: "{\n\tclient := github.NewClient(nil)\n\topts := &github.UserListOptions{}\n\tfor
    {\n\t\tusers, _, err := client.Users.ListAll(context.Background(), opts)\n\t\tif
    err != nil {\n\t\t\tlog.Fatalf(\"error listing users: %v\", err)\n\t\t}\n\t\tif
    len(users) == 0 {\n\t\t\tbreak\n\t\t}\n\t\topts.Since = *users[len(users)-1].ID\n\t\t//
    Process users...\n\t}\n}"
dirs: []
